
inzynierka_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a26c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800a440  0800a440  0001a440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7c0  0800a7c0  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7c0  0800a7c0  0001a7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7c8  0800a7c8  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a7c8  0800a7c8  0001a7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7d0  0800a7d0  0001a7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800a7d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000208  0800a9d8  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800a9d8  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4df  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000400d  00000000  00000000  0003c713  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  00040720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  00041ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002807a  00000000  00000000  00042d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013712  00000000  00000000  0006ad8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dbeb3  00000000  00000000  0007e49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015a34f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000617c  00000000  00000000  0015a3cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a424 	.word	0x0800a424

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0800a424 	.word	0x0800a424

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <_ZN9parameterC1Ev>:

struct parameter{
	char name;
	double value;

	parameter(){
 8000f48:	b490      	push	{r4, r7}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
		name = 0;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
		value = 0;
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	f04f 0400 	mov.w	r4, #0
 8000f60:	e9c2 3402 	strd	r3, r4, [r2, #8]
	}
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc90      	pop	{r4, r7}
 8000f6e:	4770      	bx	lr

08000f70 <_ZN7msgDataC1Ev>:

const char* commandNamesLookUpTable[] = {"G1","G4","G10","G11","G12",
		"G13","G14","G15","G28"
};

msgData::msgData(){
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	paramsCount=0;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	for(int i=0;i<BT_PARAMS_PER_COMMAND_MAX_COUNT;i++){
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b05      	cmp	r3, #5
 8000f88:	dc17      	bgt.n	8000fba <_ZN7msgDataC1Ev+0x4a>
		for(int j=0;j<BT_PARAMS_MAX_LENGHT;j++){
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	2b13      	cmp	r3, #19
 8000f92:	dc0e      	bgt.n	8000fb2 <_ZN7msgDataC1Ev+0x42>
			cmdParams[i][j] = 0;
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	18ca      	adds	r2, r1, r3
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<BT_PARAMS_MAX_LENGHT;j++){
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3301      	adds	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	e7ed      	b.n	8000f8e <_ZN7msgDataC1Ev+0x1e>
	for(int i=0;i<BT_PARAMS_PER_COMMAND_MAX_COUNT;i++){
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e7e4      	b.n	8000f84 <_ZN7msgDataC1Ev+0x14>
		}
	}
}
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <_ZN7msgData5clearEv>:

void msgData::clear(){
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	paramsCount=0;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	for(int i=0;i<BT_PARAMS_PER_COMMAND_MAX_COUNT;i++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b05      	cmp	r3, #5
 8000fe0:	dc17      	bgt.n	8001012 <_ZN7msgData5clearEv+0x4a>
		for(int j=0;j<BT_PARAMS_MAX_LENGHT;j++){
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b13      	cmp	r3, #19
 8000fea:	dc0e      	bgt.n	800100a <_ZN7msgData5clearEv+0x42>
			cmdParams[i][j] = 0;
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	18ca      	adds	r2, r1, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<BT_PARAMS_MAX_LENGHT;j++){
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	3301      	adds	r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	e7ed      	b.n	8000fe6 <_ZN7msgData5clearEv+0x1e>
	for(int i=0;i<BT_PARAMS_PER_COMMAND_MAX_COUNT;i++){
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3301      	adds	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	e7e4      	b.n	8000fdc <_ZN7msgData5clearEv+0x14>
		}
	}
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_ZN7commandC1Ev>:

command::command(){
 800101e:	b5b0      	push	{r4, r5, r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3308      	adds	r3, #8
 800102a:	2403      	movs	r4, #3
 800102c:	461d      	mov	r5, r3
 800102e:	2c00      	cmp	r4, #0
 8001030:	db05      	blt.n	800103e <_ZN7commandC1Ev+0x20>
 8001032:	4628      	mov	r0, r5
 8001034:	f7ff ff88 	bl	8000f48 <_ZN9parameterC1Ev>
 8001038:	3510      	adds	r5, #16
 800103a:	3c01      	subs	r4, #1
 800103c:	e7f7      	b.n	800102e <_ZN7commandC1Ev+0x10>
	clear();
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f805 	bl	800104e <_ZN7command5clearEv>
}
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bdb0      	pop	{r4, r5, r7, pc}

0800104e <_ZN7command5clearEv>:

void command::clear(){
 800104e:	b490      	push	{r4, r7}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	cmdName = UNDEFINED;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
	paramsCount = 0;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	705a      	strb	r2, [r3, #1]
	int i = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
	while(i<BT_PARAMS_PER_COMMAND_MAX_COUNT - 2){
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b03      	cmp	r3, #3
 800106a:	dc15      	bgt.n	8001098 <_ZN7command5clearEv+0x4a>
		params[i].name = 0;
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	4413      	add	r3, r2
 8001074:	3308      	adds	r3, #8
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
		params[i].value = 0;
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3301      	adds	r3, #1
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	441a      	add	r2, r3
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	f04f 0400 	mov.w	r4, #0
 800108c:	e9c2 3400 	strd	r3, r4, [r2]
		++i;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
	while(i<BT_PARAMS_PER_COMMAND_MAX_COUNT - 2){
 8001096:	e7e6      	b.n	8001066 <_ZN7command5clearEv+0x18>
	}
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bc90      	pop	{r4, r7}
 80010a0:	4770      	bx	lr

080010a2 <_ZN20BTTransmiterReceiverC1EP20__UART_HandleTypeDef>:

BTTransmiterReceiver::BTTransmiterReceiver(UART_HandleTypeDef * uartHandler) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3309      	adds	r3, #9
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5d 	bl	8000f70 <_ZN7msgDataC1Ev>
	// TODO Auto-generated constructor stub
	buff = iter = cmdNum = 0;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	721a      	strb	r2, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7a1a      	ldrb	r2, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	71da      	strb	r2, [r3, #7]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	79da      	ldrb	r2, [r3, #7]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	719a      	strb	r2, [r3, #6]
	newMsg = crcCorrect = false;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	715a      	strb	r2, [r3, #5]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	795a      	ldrb	r2, [r3, #5]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	711a      	strb	r2, [r3, #4]
	btUART = uartHandler;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_ZN20BTTransmiterReceiver4initEv>:

void BTTransmiterReceiver::init(){
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	//	HAL_UART_Receive_IT(btUART, (uint8_t*)btRXbuffer, BT_MSG_LEN);
	HAL_UART_Receive_IT(btUART, &buff, 1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3306      	adds	r3, #6
 80010fa:	2201      	movs	r2, #1
 80010fc:	4619      	mov	r1, r3
 80010fe:	f004 ff3f 	bl	8005f80 <HAL_UART_Receive_IT>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_ZNK20BTTransmiterReceiver14getUARTHandlerEv>:

UART_HandleTypeDef * BTTransmiterReceiver::getUARTHandler()const{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
	return btUART;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_ZN20BTTransmiterReceiver9getNewMsgEv>:

void BTTransmiterReceiver::getNewMsg(){
 8001122:	b590      	push	{r4, r7, lr}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]

	switch(buff){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	799b      	ldrb	r3, [r3, #6]
 800112e:	2b0a      	cmp	r3, #10
 8001130:	d017      	beq.n	8001162 <_ZN20BTTransmiterReceiver9getNewMsgEv+0x40>
 8001132:	2b20      	cmp	r3, #32
 8001134:	d11f      	bne.n	8001176 <_ZN20BTTransmiterReceiver9getNewMsgEv+0x54>
	case ' ':
		if(m.paramsCount < BT_PARAMS_PER_COMMAND_MAX_COUNT){
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800113c:	2b05      	cmp	r3, #5
 800113e:	d839      	bhi.n	80011b4 <_ZN20BTTransmiterReceiver9getNewMsgEv+0x92>
			cmdNum++;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7a1b      	ldrb	r3, [r3, #8]
 8001144:	3301      	adds	r3, #1
 8001146:	b2da      	uxtb	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	721a      	strb	r2, [r3, #8]
			m.paramsCount = cmdNum+1;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7a1b      	ldrb	r3, [r3, #8]
 8001150:	3301      	adds	r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
			iter = 0;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	71da      	strb	r2, [r3, #7]
		}
		break;
 8001160:	e028      	b.n	80011b4 <_ZN20BTTransmiterReceiver9getNewMsgEv+0x92>
	case '\n':
		newMsg = true;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	711a      	strb	r2, [r3, #4]
		cmdNum = 0;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	721a      	strb	r2, [r3, #8]
		iter = 0;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	71da      	strb	r2, [r3, #7]
		break;
 8001174:	e01f      	b.n	80011b6 <_ZN20BTTransmiterReceiver9getNewMsgEv+0x94>
	default:
		if(cmdNum<BT_PARAMS_PER_COMMAND_MAX_COUNT && iter<BT_PARAMS_MAX_LENGHT-1
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7a1b      	ldrb	r3, [r3, #8]
 800117a:	2b05      	cmp	r3, #5
 800117c:	d81b      	bhi.n	80011b6 <_ZN20BTTransmiterReceiver9getNewMsgEv+0x94>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	79db      	ldrb	r3, [r3, #7]
 8001182:	2b12      	cmp	r3, #18
 8001184:	d817      	bhi.n	80011b6 <_ZN20BTTransmiterReceiver9getNewMsgEv+0x94>
				&&cmdNum>=0&&iter>=0){
			m.cmdParams[cmdNum][iter++] = (char)buff;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7a1b      	ldrb	r3, [r3, #8]
 800118a:	4619      	mov	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	79db      	ldrb	r3, [r3, #7]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	b2d0      	uxtb	r0, r2
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	71d0      	strb	r0, [r2, #7]
 8001198:	461c      	mov	r4, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7998      	ldrb	r0, [r3, #6]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	4423      	add	r3, r4
 80011ac:	3309      	adds	r3, #9
 80011ae:	4602      	mov	r2, r0
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e000      	b.n	80011b6 <_ZN20BTTransmiterReceiver9getNewMsgEv+0x94>
		break;
 80011b4:	bf00      	nop
		}
	}

	HAL_UART_Receive_IT(btUART, &buff, 1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3306      	adds	r3, #6
 80011be:	2201      	movs	r2, #1
 80011c0:	4619      	mov	r1, r3
 80011c2:	f004 fedd 	bl	8005f80 <HAL_UART_Receive_IT>
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}

080011ce <_ZNK20BTTransmiterReceiver8isNewMsgEv>:

bool BTTransmiterReceiver::isNewMsg()const{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
	return newMsg;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	791b      	ldrb	r3, [r3, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_ZN20BTTransmiterReceiver11clearBufferEv>:

void BTTransmiterReceiver::clearBuffer(){
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
	newMsg = false;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	711a      	strb	r2, [r3, #4]
	buff = iter = cmdNum = 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	721a      	strb	r2, [r3, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7a1a      	ldrb	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	71da      	strb	r2, [r3, #7]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	79da      	ldrb	r2, [r3, #7]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	719a      	strb	r2, [r3, #6]
	m.clear();
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3309      	adds	r3, #9
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff feda 	bl	8000fc8 <_ZN7msgData5clearEv>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_ZN20BTTransmiterReceiver7sendMsgEPc>:

bool BTTransmiterReceiver::sendMsg(char * msg){
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(btUART, (uint8_t*)msg, strlen(msg), 100) == HAL_OK;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681c      	ldr	r4, [r3, #0]
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7fe fffa 	bl	8000224 <strlen>
 8001230:	4603      	mov	r3, r0
 8001232:	b29a      	uxth	r2, r3
 8001234:	2364      	movs	r3, #100	; 0x64
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	4620      	mov	r0, r4
 800123a:	f004 fe08 	bl	8005e4e <HAL_UART_Transmit>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}
	...

08001254 <_ZN20BTTransmiterReceiver10readNewMsgER7command>:

bool BTTransmiterReceiver::readNewMsg(command &cmd){
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b0a3      	sub	sp, #140	; 0x8c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	//there is no new message
	if(!newMsg){
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	791b      	ldrb	r3, [r3, #4]
 8001262:	f083 0301 	eor.w	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <_ZN20BTTransmiterReceiver10readNewMsgER7command+0x1c>
		return false;
 800126c:	2300      	movs	r3, #0
 800126e:	e073      	b.n	8001358 <_ZN20BTTransmiterReceiver10readNewMsgER7command+0x104>
	}

	//string for crc
	char tmpBuff[BT_PARAMS_PER_COMMAND_MAX_COUNT * BT_PARAMS_MAX_LENGHT] = {0};
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2278      	movs	r2, #120	; 0x78
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f005 fd21 	bl	8006cc0 <memset>
	for(int i =0; i<m.paramsCount-1;i++){
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800128a:	3b01      	subs	r3, #1
 800128c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001290:	429a      	cmp	r2, r3
 8001292:	da2c      	bge.n	80012ee <_ZN20BTTransmiterReceiver10readNewMsgER7command+0x9a>
		strcat(tmpBuff, (const char*)m.cmdParams[i]);
 8001294:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	3308      	adds	r3, #8
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f006 fa46 	bl	8007740 <strcat>
		if(i<m.paramsCount-2){
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80012ba:	3b02      	subs	r3, #2
 80012bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80012c0:	429a      	cmp	r2, r3
 80012c2:	da0e      	bge.n	80012e2 <_ZN20BTTransmiterReceiver10readNewMsgER7command+0x8e>
			strcat(tmpBuff, " ");
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7fe ffab 	bl	8000224 <strlen>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4413      	add	r3, r2
 80012d8:	4921      	ldr	r1, [pc, #132]	; (8001360 <_ZN20BTTransmiterReceiver10readNewMsgER7command+0x10c>)
 80012da:	461a      	mov	r2, r3
 80012dc:	460b      	mov	r3, r1
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	8013      	strh	r3, [r2, #0]
	for(int i =0; i<m.paramsCount-1;i++){
 80012e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012e6:	3301      	adds	r3, #1
 80012e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80012ec:	e7ca      	b.n	8001284 <_ZN20BTTransmiterReceiver10readNewMsgER7command+0x30>
		}
	}

	//check crc
	crcCorrect = atoi(m.cmdParams[m.paramsCount-1]) == crc16(tmpBuff);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80012f4:	1e5a      	subs	r2, r3, #1
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	3308      	adds	r3, #8
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	3301      	adds	r3, #1
 8001306:	4618      	mov	r0, r3
 8001308:	f005 fcab 	bl	8006c62 <atoi>
 800130c:	4603      	mov	r3, r0
 800130e:	461c      	mov	r4, r3
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4619      	mov	r1, r3
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f8dc 	bl	80014d4 <_ZN20BTTransmiterReceiver5crc16EPc>
 800131c:	4603      	mov	r3, r0
 800131e:	429c      	cmp	r4, r3
 8001320:	bf0c      	ite	eq
 8001322:	2301      	moveq	r3, #1
 8001324:	2300      	movne	r3, #0
 8001326:	b2da      	uxtb	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	715a      	strb	r2, [r3, #5]
		sprintf(tmpb2, "CRC not ok: received: %d, calculated: %d\n",
				atoi(m.cmdParams[m.paramsCount-1]), crc16(tmpBuff));
		sendMsg(tmpb2);
	}
#else
	if(crcCorrect){
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	795b      	ldrb	r3, [r3, #5]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d009      	beq.n	8001348 <_ZN20BTTransmiterReceiver10readNewMsgER7command+0xf4>
		sendMsg((char*)BT_OK_MSG);
 8001334:	490b      	ldr	r1, [pc, #44]	; (8001364 <_ZN20BTTransmiterReceiver10readNewMsgER7command+0x110>)
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff70 	bl	800121c <_ZN20BTTransmiterReceiver7sendMsgEPc>
		clearBuffer();
		return false;
	}
#endif

	return parseMsg(cmd);
 800133c:	6839      	ldr	r1, [r7, #0]
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f814 	bl	800136c <_ZN20BTTransmiterReceiver8parseMsgER7command>
 8001344:	4603      	mov	r3, r0
 8001346:	e007      	b.n	8001358 <_ZN20BTTransmiterReceiver10readNewMsgER7command+0x104>
		sendMsg((char*)BT_NOK_MSG);
 8001348:	4907      	ldr	r1, [pc, #28]	; (8001368 <_ZN20BTTransmiterReceiver10readNewMsgER7command+0x114>)
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff66 	bl	800121c <_ZN20BTTransmiterReceiver7sendMsgEPc>
		clearBuffer();
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff48 	bl	80011e6 <_ZN20BTTransmiterReceiver11clearBufferEv>
		return false;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	378c      	adds	r7, #140	; 0x8c
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	0800a464 	.word	0x0800a464
 8001364:	0800a468 	.word	0x0800a468
 8001368:	0800a46c 	.word	0x0800a46c

0800136c <_ZN20BTTransmiterReceiver8parseMsgER7command>:


bool BTTransmiterReceiver::parseMsg(command &cmd){
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]

	//clear previous cmd
	int i=0;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
	cmd.clear();
 800137a:	6838      	ldr	r0, [r7, #0]
 800137c:	f7ff fe67 	bl	800104e <_ZN7command5clearEv>

	//find cmd name in lookup table
	while(i<sizeof(commandNamesLookUpTable)/sizeof(commandNamesLookUpTable[0])){
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b08      	cmp	r3, #8
 8001384:	d81c      	bhi.n	80013c0 <_ZN20BTTransmiterReceiver8parseMsgER7command+0x54>
		if(strcmp(m.cmdParams[0],commandNamesLookUpTable[i]) == 0){
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f103 0009 	add.w	r0, r3, #9
 800138c:	4a50      	ldr	r2, [pc, #320]	; (80014d0 <_ZN20BTTransmiterReceiver8parseMsgER7command+0x164>)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001394:	4619      	mov	r1, r3
 8001396:	f7fe ff3b 	bl	8000210 <strcmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d106      	bne.n	80013ae <_ZN20BTTransmiterReceiver8parseMsgER7command+0x42>
			cmd.cmdName = (commandName)(i+1);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	701a      	strb	r2, [r3, #0]
			break;
 80013ac:	e008      	b.n	80013c0 <_ZN20BTTransmiterReceiver8parseMsgER7command+0x54>
		}
		if(cmd.cmdName != UNDEFINED) break;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d103      	bne.n	80013be <_ZN20BTTransmiterReceiver8parseMsgER7command+0x52>
		++i;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
	while(i<sizeof(commandNamesLookUpTable)/sizeof(commandNamesLookUpTable[0])){
 80013bc:	e7e0      	b.n	8001380 <_ZN20BTTransmiterReceiver8parseMsgER7command+0x14>
		if(cmd.cmdName != UNDEFINED) break;
 80013be:	bf00      	nop
	}
	//cmd name not found
	if(cmd.cmdName == UNDEFINED){
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d104      	bne.n	80013d2 <_ZN20BTTransmiterReceiver8parseMsgER7command+0x66>
		clearBuffer();
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff0c 	bl	80011e6 <_ZN20BTTransmiterReceiver11clearBufferEv>
		return false;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e079      	b.n	80014c6 <_ZN20BTTransmiterReceiver8parseMsgER7command+0x15a>
	}

	//read params
	i=1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
	while(i<m.paramsCount-1){
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80013dc:	3b01      	subs	r3, #1
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	da65      	bge.n	80014b0 <_ZN20BTTransmiterReceiver8parseMsgER7command+0x144>
		if(atof(m.cmdParams[i])==0){
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	3308      	adds	r3, #8
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	3301      	adds	r3, #1
 80013f6:	4618      	mov	r0, r3
 80013f8:	f005 fc30 	bl	8006c5c <atof>
 80013fc:	ec51 0b10 	vmov	r0, r1, d0
 8001400:	2301      	movs	r3, #1
 8001402:	461c      	mov	r4, r3
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	f7ff fb8c 	bl	8000b28 <__aeabi_dcmpeq>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <_ZN20BTTransmiterReceiver8parseMsgER7command+0xae>
 8001416:	2300      	movs	r3, #0
 8001418:	461c      	mov	r4, r3
 800141a:	b2e3      	uxtb	r3, r4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d02b      	beq.n	8001478 <_ZN20BTTransmiterReceiver8parseMsgER7command+0x10c>
			char *tmpChar = m.cmdParams[i]+1;
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	3308      	adds	r3, #8
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	3301      	adds	r3, #1
 8001432:	3301      	adds	r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
			cmd.params[i-1].name = m.cmdParams[i][0];
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1e59      	subs	r1, r3, #1
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4403      	add	r3, r0
 8001448:	3309      	adds	r3, #9
 800144a:	7818      	ldrb	r0, [r3, #0]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	010b      	lsls	r3, r1, #4
 8001450:	4413      	add	r3, r2
 8001452:	3308      	adds	r3, #8
 8001454:	4602      	mov	r2, r0
 8001456:	701a      	strb	r2, [r3, #0]
			cmd.params[i-1].value = atof(tmpChar);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1e5c      	subs	r4, r3, #1
 800145c:	68b8      	ldr	r0, [r7, #8]
 800145e:	f005 fbfd 	bl	8006c5c <atof>
 8001462:	eeb0 7a40 	vmov.f32	s14, s0
 8001466:	eef0 7a60 	vmov.f32	s15, s1
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	1c63      	adds	r3, r4, #1
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4413      	add	r3, r2
 8001472:	ed83 7b00 	vstr	d7, [r3]
 8001476:	e017      	b.n	80014a8 <_ZN20BTTransmiterReceiver8parseMsgER7command+0x13c>
		}
		else{
			cmd.params[i-1].value = atof(m.cmdParams[i]);
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	3308      	adds	r3, #8
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1e5c      	subs	r4, r3, #1
 800148e:	4610      	mov	r0, r2
 8001490:	f005 fbe4 	bl	8006c5c <atof>
 8001494:	eeb0 7a40 	vmov.f32	s14, s0
 8001498:	eef0 7a60 	vmov.f32	s15, s1
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	1c63      	adds	r3, r4, #1
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4413      	add	r3, r2
 80014a4:	ed83 7b00 	vstr	d7, [r3]
		}
		++i;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3301      	adds	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
	while(i<m.paramsCount-1){
 80014ae:	e792      	b.n	80013d6 <_ZN20BTTransmiterReceiver8parseMsgER7command+0x6a>
	}
	cmd.paramsCount = m.paramsCount - 2;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80014b6:	3b02      	subs	r3, #2
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	705a      	strb	r2, [r3, #1]

	clearBuffer();
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fe91 	bl	80011e6 <_ZN20BTTransmiterReceiver11clearBufferEv>

	return true;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000000 	.word	0x20000000

080014d4 <_ZN20BTTransmiterReceiver5crc16EPc>:

	sendMsg(tmpBuff);
}


unsigned long int BTTransmiterReceiver::crc16(char* s){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	char *ptr = s;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	617b      	str	r3, [r7, #20]
	int count = strlen(ptr);
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7fe fe9e 	bl	8000224 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	613b      	str	r3, [r7, #16]

	unsigned long int  crc;
	char iss;
	crc = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
	while (--count >= 0)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	0fdb      	lsrs	r3, r3, #31
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d026      	beq.n	8001550 <_ZN20BTTransmiterReceiver5crc16EPc+0x7c>
	{
		crc = crc ^ (int) *ptr++ << 8;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	617a      	str	r2, [r7, #20]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4053      	eors	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
		iss = 8;
 8001514:	2308      	movs	r3, #8
 8001516:	72fb      	strb	r3, [r7, #11]
		do
		{
			if (crc & 0x8000)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <_ZN20BTTransmiterReceiver5crc16EPc+0x5e>
				crc = crc << 1 ^ 0x1021;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800152a:	f083 0301 	eor.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	e002      	b.n	8001538 <_ZN20BTTransmiterReceiver5crc16EPc+0x64>
			else
				crc = crc << 1;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
		} while(--iss);
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	3b01      	subs	r3, #1
 800153c:	72fb      	strb	r3, [r7, #11]
 800153e:	7afb      	ldrb	r3, [r7, #11]
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf14      	ite	ne
 8001544:	2301      	movne	r3, #1
 8001546:	2300      	moveq	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0d0      	beq.n	80014f0 <_ZN20BTTransmiterReceiver5crc16EPc+0x1c>
		do
 800154e:	e7e3      	b.n	8001518 <_ZN20BTTransmiterReceiver5crc16EPc+0x44>
	}
	return crc;
 8001550:	68fb      	ldr	r3, [r7, #12]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001562:	463b      	mov	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001570:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <MX_ADC1_Init+0x9c>)
 8001572:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001576:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800157a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <MX_ADC1_Init+0x98>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <MX_ADC1_Init+0x98>)
 800158a:	2200      	movs	r2, #0
 800158c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001598:	2200      	movs	r2, #0
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <MX_ADC1_Init+0x98>)
 800159e:	4a17      	ldr	r2, [pc, #92]	; (80015fc <MX_ADC1_Init+0xa0>)
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015be:	f002 f815 	bl	80035ec <HAL_ADC_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015c8:	f000 fe0a 	bl	80021e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015cc:	230a      	movs	r3, #10
 80015ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015d4:	2307      	movs	r3, #7
 80015d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015de:	f002 f9a7 	bl	8003930 <HAL_ADC_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015e8:	f000 fdfa 	bl	80021e0 <Error_Handler>
  }

}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200002ec 	.word	0x200002ec
 80015f8:	40012000 	.word	0x40012000
 80015fc:	0f000001 	.word	0x0f000001

08001600 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_ADC_MspInit+0x8c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12f      	bne.n	8001682 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <HAL_ADC_MspInit+0x90>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a19      	ldr	r2, [pc, #100]	; (8001690 <HAL_ADC_MspInit+0x90>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_ADC_MspInit+0x90>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_ADC_MspInit+0x90>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <HAL_ADC_MspInit+0x90>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HAL_ADC_MspInit+0x90>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800165a:	2307      	movs	r3, #7
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165e:	2303      	movs	r3, #3
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <HAL_ADC_MspInit+0x94>)
 800166e:	f002 fccb 	bl	8004008 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2012      	movs	r0, #18
 8001678:	f002 fc6d 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800167c:	2012      	movs	r0, #18
 800167e:	f002 fc86 	bl	8003f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40012000 	.word	0x40012000
 8001690:	40023800 	.word	0x40023800
 8001694:	40020800 	.word	0x40020800

08001698 <_ZN9batteriesC1EP17ADC_HandleTypeDefmmmm>:
 *      Author: Marcel
 */

#include <batteries.hh>

batteries::batteries(ADC_HandleTypeDef  *nADCHand, uint32_t lbChan, uint32_t mbChan, uint32_t rank, uint32_t samTime) {
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
	if(nADCHand == nullptr) Error_Handler();
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <_ZN9batteriesC1EP17ADC_HandleTypeDefmmmm+0x18>
 80016ac:	f000 fd98 	bl	80021e0 <Error_Handler>

	adcHandler = nADCHand;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	601a      	str	r2, [r3, #0]

	lbatChan = lbChan;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	609a      	str	r2, [r3, #8]
	mbatChan = mbChan;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	60da      	str	r2, [r3, #12]

	lbatMesSum = mbatMesSum = lbatMesCount = mbatMesCount = 0;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	61da      	str	r2, [r3, #28]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	69da      	ldr	r2, [r3, #28]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	619a      	str	r2, [r3, #24]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	615a      	str	r2, [r3, #20]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	611a      	str	r2, [r3, #16]
	actLbatVol_unconverted = actMbatVol_unconverted = 0;
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	f04f 0400 	mov.w	r4, #0
 80016ea:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	ADC_ChannelConfTypeDef sC = {0};
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]

	sC.Channel = lbChan;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	613b      	str	r3, [r7, #16]
	sC.Rank = rank;
 800170c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170e:	617b      	str	r3, [r7, #20]
	sC.SamplingTime = samTime;
 8001710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001712:	61bb      	str	r3, [r7, #24]

	sConfig = &sC;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f107 0210 	add.w	r2, r7, #16
 800171a:	605a      	str	r2, [r3, #4]

	if(HAL_ADC_ConfigChannel(adcHandler, sConfig) != HAL_OK) Error_Handler();
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4619      	mov	r1, r3
 8001726:	4610      	mov	r0, r2
 8001728:	f002 f902 	bl	8003930 <HAL_ADC_ConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <_ZN9batteriesC1EP17ADC_HandleTypeDefmmmm+0xa8>
 800173c:	f000 fd50 	bl	80021e0 <Error_Handler>

}
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}

0800174a <_ZN10controlBoxC1EP20__UART_HandleTypeDef>:
 *      Author: Marcel
 */

#include <controlBox.hh>

controlBox::controlBox(UART_HandleTypeDef * cbUARTHand) {
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
	if(cbUARTHand != nullptr){
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <_ZN10controlBoxC1EP20__UART_HandleTypeDef+0x16>
		cbUART = cbUARTHand;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	601a      	str	r2, [r3, #0]
	}
}
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_ZN10controlBox7sendMsgEPc>:

bool controlBox::sendMsg(char * msg){
 800176e:	b590      	push	{r4, r7, lr}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(cbUART, (uint8_t*)msg, strlen(msg), 100) == HAL_OK;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681c      	ldr	r4, [r3, #0]
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f7fe fd51 	bl	8000224 <strlen>
 8001782:	4603      	mov	r3, r0
 8001784:	b29a      	uxth	r2, r3
 8001786:	2364      	movs	r3, #100	; 0x64
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	4620      	mov	r0, r4
 800178c:	f004 fb5f 	bl	8005e4e <HAL_UART_Transmit>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf0c      	ite	eq
 8001796:	2301      	moveq	r3, #1
 8001798:	2300      	movne	r3, #0
 800179a:	b2db      	uxtb	r3, r3
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}

080017a4 <_ZN18incrementalEncoderC1EP17TIM_HandleTypeDefid>:
 *      Author: Marcel
 */

#include "encoder.h"

incrementalEncoder::incrementalEncoder(TIM_HandleTypeDef * timHand, int timChan, double mesFreq){
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6178      	str	r0, [r7, #20]
 80017ac:	6139      	str	r1, [r7, #16]
 80017ae:	60fa      	str	r2, [r7, #12]
 80017b0:	ed87 0b00 	vstr	d0, [r7]
	if(timHand != nullptr){
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d016      	beq.n	80017e8 <_ZN18incrementalEncoderC1EP17TIM_HandleTypeDefid+0x44>
		encoderTimHandler = timHand;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	639a      	str	r2, [r3, #56]	; 0x38
		encoderTimChannel = timChan;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	63da      	str	r2, [r3, #60]	; 0x3c

		if(HAL_TIM_Encoder_Start(encoderTimHandler, encoderTimChannel)!=HAL_OK){
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f003 fd5b 	bl	800528c <HAL_TIM_Encoder_Start>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf14      	ite	ne
 80017dc:	2301      	movne	r3, #1
 80017de:	2300      	moveq	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <_ZN18incrementalEncoderC1EP17TIM_HandleTypeDefid+0x46>
			while(1){};
 80017e6:	e7fe      	b.n	80017e6 <_ZN18incrementalEncoderC1EP17TIM_HandleTypeDefid+0x42>
		}
	}
	else{
		while(1){};
 80017e8:	e7fe      	b.n	80017e8 <_ZN18incrementalEncoderC1EP17TIM_HandleTypeDefid+0x44>
	}

	for(int i = 0; i< ENC_MEAS_COUNT;i++)lastMeasurements[i] = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	2b09      	cmp	r3, #9
 80017f2:	dc09      	bgt.n	8001808 <_ZN18incrementalEncoderC1EP17TIM_HandleTypeDefid+0x64>
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	3202      	adds	r2, #2
 80017fa:	2100      	movs	r1, #0
 80017fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	3301      	adds	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e7f2      	b.n	80017ee <_ZN18incrementalEncoderC1EP17TIM_HandleTypeDefid+0x4a>
	prevMeasure = 0;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
	actEncMesIndex = 0;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2200      	movs	r2, #0
 8001812:	605a      	str	r2, [r3, #4]

	if(mesFreq > MIN_ENCODER_MEASUREMENT_FREQ_HZ){
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <_ZN18incrementalEncoderC1EP17TIM_HandleTypeDefid+0xa8>)
 800181a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800181e:	f7ff f9ab 	bl	8000b78 <__aeabi_dcmpgt>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <_ZN18incrementalEncoderC1EP17TIM_HandleTypeDefid+0x90>
		measFrequency_Hz = mesFreq;
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800182e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
 8001832:	e005      	b.n	8001840 <_ZN18incrementalEncoderC1EP17TIM_HandleTypeDefid+0x9c>
	}
	else{
		measFrequency_Hz = MIN_ENCODER_MEASUREMENT_FREQ_HZ;
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	4c04      	ldr	r4, [pc, #16]	; (800184c <_ZN18incrementalEncoderC1EP17TIM_HandleTypeDefid+0xa8>)
 800183c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	}

}
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	3ff00000 	.word	0x3ff00000

08001850 <_ZN18incrementalEncoder25readCurrentSpeed_impulsesEv>:

double incrementalEncoder::readCurrentSpeed_impulses(){
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	int tmpMes = __HAL_TIM_GET_COUNTER(encoderTimHandler);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	60bb      	str	r3, [r7, #8]
	double actEncMes = 0;
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	f04f 0400 	mov.w	r4, #0
 800186a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	if(abs(prevMeasure-tmpMes)>2500){
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	bfb8      	it	lt
 800187a:	425b      	neglt	r3, r3
 800187c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001880:	4293      	cmp	r3, r2
 8001882:	dd21      	ble.n	80018c8 <_ZN18incrementalEncoder25readCurrentSpeed_impulsesEv+0x78>
		//counter overload
		if(prevMeasure-tmpMes > 0){
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	dd0d      	ble.n	80018ac <_ZN18incrementalEncoder25readCurrentSpeed_impulsesEv+0x5c>
			lastMeasurements[actEncMesIndex] = 2999 - prevMeasure + tmpMes;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8001898:	3307      	adds	r3, #7
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6852      	ldr	r2, [r2, #4]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	4419      	add	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3202      	adds	r2, #2
 80018a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80018aa:	e017      	b.n	80018dc <_ZN18incrementalEncoder25readCurrentSpeed_impulsesEv+0x8c>
		}
		else{
			lastMeasurements[actEncMesIndex] = 2999 - tmpMes + prevMeasure;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 80018b2:	3307      	adds	r3, #7
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6811      	ldr	r1, [r2, #0]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6852      	ldr	r2, [r2, #4]
 80018bc:	4419      	add	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3202      	adds	r2, #2
 80018c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80018c6:	e009      	b.n	80018dc <_ZN18incrementalEncoder25readCurrentSpeed_impulsesEv+0x8c>
		}
	}
	else{
		lastMeasurements[actEncMesIndex] = tmpMes - prevMeasure;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6852      	ldr	r2, [r2, #4]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	1ac9      	subs	r1, r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3202      	adds	r2, #2
 80018d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	for(int i = 0; i<ENC_MEAS_COUNT; i++){
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	dc17      	bgt.n	8001916 <_ZN18incrementalEncoder25readCurrentSpeed_impulsesEv+0xc6>
		actEncMes += (double)lastMeasurements[i];
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	3202      	adds	r2, #2
 80018ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe47 	bl	8000584 <__aeabi_i2d>
 80018f6:	4603      	mov	r3, r0
 80018f8:	460c      	mov	r4, r1
 80018fa:	461a      	mov	r2, r3
 80018fc:	4623      	mov	r3, r4
 80018fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001902:	f7fe fcf3 	bl	80002ec <__adddf3>
 8001906:	4603      	mov	r3, r0
 8001908:	460c      	mov	r4, r1
 800190a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for(int i = 0; i<ENC_MEAS_COUNT; i++){
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3301      	adds	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e7e4      	b.n	80018e0 <_ZN18incrementalEncoder25readCurrentSpeed_impulsesEv+0x90>
	}

	actEncMes = actEncMes/(double)ENC_MEAS_COUNT;
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <_ZN18incrementalEncoder25readCurrentSpeed_impulsesEv+0x118>)
 800191c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001920:	f7fe ffc4 	bl	80008ac <__aeabi_ddiv>
 8001924:	4603      	mov	r3, r0
 8001926:	460c      	mov	r4, r1
 8001928:	e9c7 3404 	strd	r3, r4, [r7, #16]

	actEncMesIndex = (actEncMesIndex +1)%ENC_MEAS_COUNT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	1c59      	adds	r1, r3, #1
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <_ZN18incrementalEncoder25readCurrentSpeed_impulsesEv+0x11c>)
 8001934:	fb83 2301 	smull	r2, r3, r3, r1
 8001938:	109a      	asrs	r2, r3, #2
 800193a:	17cb      	asrs	r3, r1, #31
 800193c:	1ad2      	subs	r2, r2, r3
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	1aca      	subs	r2, r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	605a      	str	r2, [r3, #4]
	prevMeasure = tmpMes;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	601a      	str	r2, [r3, #0]

	return actEncMes;
 8001952:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001956:	ec44 3b17 	vmov	d7, r3, r4
}
 800195a:	eeb0 0a47 	vmov.f32	s0, s14
 800195e:	eef0 0a67 	vmov.f32	s1, s15
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}
 8001968:	40240000 	.word	0x40240000
 800196c:	66666667 	.word	0x66666667

08001970 <_ZN18incrementalEncoder25readCurrentWheelSpeed_rpmEv>:

double incrementalEncoder::readCurrentWheelSpeed_rpm(){
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	return (this->readCurrentSpeed_impulses()/IMPULSES_PER_ROVOLUTE)*BELT_GEAR_RATIO*measFrequency_Hz*60;
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ff69 	bl	8001850 <_ZN18incrementalEncoder25readCurrentSpeed_impulsesEv>
 800197e:	ec51 0b10 	vmov	r0, r1, d0
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_ZN18incrementalEncoder25readCurrentWheelSpeed_rpmEv+0x6c>)
 8001988:	f7fe ff90 	bl	80008ac <__aeabi_ddiv>
 800198c:	4603      	mov	r3, r0
 800198e:	460c      	mov	r4, r1
 8001990:	4618      	mov	r0, r3
 8001992:	4621      	mov	r1, r4
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_ZN18incrementalEncoder25readCurrentWheelSpeed_rpmEv+0x70>)
 800199a:	f7fe fe5d 	bl	8000658 <__aeabi_dmul>
 800199e:	4603      	mov	r3, r0
 80019a0:	460c      	mov	r4, r1
 80019a2:	4618      	mov	r0, r3
 80019a4:	4621      	mov	r1, r4
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80019ac:	461a      	mov	r2, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	f7fe fe52 	bl	8000658 <__aeabi_dmul>
 80019b4:	4603      	mov	r3, r0
 80019b6:	460c      	mov	r4, r1
 80019b8:	4618      	mov	r0, r3
 80019ba:	4621      	mov	r1, r4
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_ZN18incrementalEncoder25readCurrentWheelSpeed_rpmEv+0x74>)
 80019c2:	f7fe fe49 	bl	8000658 <__aeabi_dmul>
 80019c6:	4603      	mov	r3, r0
 80019c8:	460c      	mov	r4, r1
 80019ca:	ec44 3b17 	vmov	d7, r3, r4
}
 80019ce:	eeb0 0a47 	vmov.f32	s0, s14
 80019d2:	eef0 0a67 	vmov.f32	s1, s15
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	40280000 	.word	0x40280000
 80019e0:	3fd40000 	.word	0x3fd40000
 80019e4:	404e0000 	.word	0x404e0000

080019e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a42      	ldr	r2, [pc, #264]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b40      	ldr	r3, [pc, #256]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a3b      	ldr	r2, [pc, #236]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a34      	ldr	r2, [pc, #208]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	603b      	str	r3, [r7, #0]
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a2d      	ldr	r2, [pc, #180]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <MX_GPIO_Init+0x144>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RMOT_DIR_L_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001a90:	4827      	ldr	r0, [pc, #156]	; (8001b30 <MX_GPIO_Init+0x148>)
 8001a92:	f002 fc4b 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROT_MOT_R_Pin|ROT_MOT_L_Pin|RMOT_DIR_R_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	f240 4106 	movw	r1, #1030	; 0x406
 8001a9c:	4825      	ldr	r0, [pc, #148]	; (8001b34 <MX_GPIO_Init+0x14c>)
 8001a9e:	f002 fc45 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LMOT_DIR_R_Pin|LMOT_DIR_L_Pin, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001aa8:	4823      	ldr	r0, [pc, #140]	; (8001b38 <MX_GPIO_Init+0x150>)
 8001aaa:	f002 fc3f 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <MX_GPIO_Init+0x154>)
 8001ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	481d      	ldr	r0, [pc, #116]	; (8001b38 <MX_GPIO_Init+0x150>)
 8001ac4:	f002 faa0 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|RMOT_DIR_L_Pin;
 8001ac8:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4813      	ldr	r0, [pc, #76]	; (8001b30 <MX_GPIO_Init+0x148>)
 8001ae2:	f002 fa91 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ROT_MOT_R_Pin|ROT_MOT_L_Pin|RMOT_DIR_R_Pin;
 8001ae6:	f240 4306 	movw	r3, #1030	; 0x406
 8001aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <MX_GPIO_Init+0x14c>)
 8001b00:	f002 fa82 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LMOT_DIR_R_Pin|LMOT_DIR_L_Pin;
 8001b04:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4806      	ldr	r0, [pc, #24]	; (8001b38 <MX_GPIO_Init+0x150>)
 8001b1e:	f002 fa73 	bl	8004008 <HAL_GPIO_Init>

}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	10210000 	.word	0x10210000

08001b40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b46:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <MX_I2C1_Init+0x54>)
 8001b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b4c:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <MX_I2C1_Init+0x58>)
 8001b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b7e:	f002 fc09 	bl	8004394 <HAL_I2C_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b88:	f000 fb2a 	bl	80021e0 <Error_Handler>
  }

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000334 	.word	0x20000334
 8001b94:	40005400 	.word	0x40005400
 8001b98:	000186a0 	.word	0x000186a0

08001b9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	; (8001c20 <HAL_I2C_MspInit+0x84>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d12c      	bne.n	8001c18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_I2C_MspInit+0x88>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a17      	ldr	r2, [pc, #92]	; (8001c24 <HAL_I2C_MspInit+0x88>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_I2C_MspInit+0x88>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be0:	2312      	movs	r3, #18
 8001be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bec:	2304      	movs	r3, #4
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	480c      	ldr	r0, [pc, #48]	; (8001c28 <HAL_I2C_MspInit+0x8c>)
 8001bf8:	f002 fa06 	bl	8004008 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_I2C_MspInit+0x88>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_I2C_MspInit+0x88>)
 8001c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_I2C_MspInit+0x88>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40005400 	.word	0x40005400
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020400 	.word	0x40020400

08001c2c <HAL_UART_RxCpltCallback>:
int tmpPrevMes = 0;

float EncToDiagram = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	if(huart == bt.getUARTHandler()){
 8001c34:	4809      	ldr	r0, [pc, #36]	; (8001c5c <HAL_UART_RxCpltCallback+0x30>)
 8001c36:	f7ff fa68 	bl	800110a <_ZNK20BTTransmiterReceiver14getUARTHandlerEv>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	bf0c      	ite	eq
 8001c42:	2301      	moveq	r3, #1
 8001c44:	2300      	movne	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_UART_RxCpltCallback+0x26>
		bt.getNewMsg();
 8001c4c:	4803      	ldr	r0, [pc, #12]	; (8001c5c <HAL_UART_RxCpltCallback+0x30>)
 8001c4e:	f7ff fa68 	bl	8001122 <_ZN20BTTransmiterReceiver9getNewMsgEv>
	}
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000224 	.word	0x20000224

08001c60 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8001c66:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c68:	f001 fc2c 	bl	80034c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c6c:	f000 fa40 	bl	80020f0 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c70:	f7ff feba 	bl	80019e8 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001c74:	f001 f97c 	bl	8002f70 <MX_TIM2_Init>
	MX_ADC1_Init();
 8001c78:	f7ff fc70 	bl	800155c <MX_ADC1_Init>
	MX_I2C1_Init();
 8001c7c:	f7ff ff60 	bl	8001b40 <MX_I2C1_Init>
	MX_TIM3_Init();
 8001c80:	f001 f9ca 	bl	8003018 <MX_TIM3_Init>
	MX_TIM1_Init();
 8001c84:	f001 f8bc 	bl	8002e00 <MX_TIM1_Init>
	MX_UART5_Init();
 8001c88:	f001 faf0 	bl	800326c <MX_UART5_Init>
	MX_USART3_UART_Init();
 8001c8c:	f001 fb18 	bl	80032c0 <MX_USART3_UART_Init>
//	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);

	DCmotor rightMotor(&htim1, TIM_CHANNEL_3,
			RMOT_DIR_L_GPIO_Port, RMOT_DIR_L_Pin,
			RMOT_DIR_R_GPIO_Port, RMOT_DIR_R_Pin,
			&htim3, TIM_CHANNEL_ALL);
 8001c90:	f507 70d4 	add.w	r0, r7, #424	; 0x1a8
 8001c94:	233c      	movs	r3, #60	; 0x3c
 8001c96:	9304      	str	r3, [sp, #16]
 8001c98:	4bbd      	ldr	r3, [pc, #756]	; (8001f90 <main+0x330>)
 8001c9a:	9303      	str	r3, [sp, #12]
 8001c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	4bbc      	ldr	r3, [pc, #752]	; (8001f94 <main+0x334>)
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	4bba      	ldr	r3, [pc, #744]	; (8001f98 <main+0x338>)
 8001cae:	2208      	movs	r2, #8
 8001cb0:	49ba      	ldr	r1, [pc, #744]	; (8001f9c <main+0x33c>)
 8001cb2:	f000 fb55 	bl	8002360 <_ZN7DCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tS1_t>
	DCmotor leftMotor(&htim1, TIM_CHANNEL_4,
			LMOT_DIR_L_GPIO_Port, LMOT_DIR_L_Pin,
			LMOT_DIR_R_GPIO_Port, LMOT_DIR_R_Pin,
			&htim2, TIM_CHANNEL_ALL);
 8001cb6:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001cba:	233c      	movs	r3, #60	; 0x3c
 8001cbc:	9304      	str	r3, [sp, #16]
 8001cbe:	4bb8      	ldr	r3, [pc, #736]	; (8001fa0 <main+0x340>)
 8001cc0:	9303      	str	r3, [sp, #12]
 8001cc2:	2340      	movs	r3, #64	; 0x40
 8001cc4:	9302      	str	r3, [sp, #8]
 8001cc6:	4bb7      	ldr	r3, [pc, #732]	; (8001fa4 <main+0x344>)
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4bb4      	ldr	r3, [pc, #720]	; (8001fa4 <main+0x344>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	49b1      	ldr	r1, [pc, #708]	; (8001f9c <main+0x33c>)
 8001cd6:	f000 fb43 	bl	8002360 <_ZN7DCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tS1_t>
	turningDCmotor turningMotor(&htim1, TIM_CHANNEL_2,
			ROT_MOT_L_GPIO_Port, ROT_MOT_L_Pin,
			ROT_MOT_R_GPIO_Port, ROT_MOT_R_Pin,
			&hi2c1);
 8001cda:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8001cde:	4bb2      	ldr	r3, [pc, #712]	; (8001fa8 <main+0x348>)
 8001ce0:	9303      	str	r3, [sp, #12]
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	9302      	str	r3, [sp, #8]
 8001ce6:	4bab      	ldr	r3, [pc, #684]	; (8001f94 <main+0x334>)
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	2304      	movs	r3, #4
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	4ba9      	ldr	r3, [pc, #676]	; (8001f94 <main+0x334>)
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	49aa      	ldr	r1, [pc, #680]	; (8001f9c <main+0x33c>)
 8001cf4:	f000 fd5e 	bl	80027b4 <_ZN14turningDCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tP17I2C_HandleTypeDef>

	turningMotor.setSpeed_rpm(900);
 8001cf8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001cfc:	ed9f 0ba2 	vldr	d0, [pc, #648]	; 8001f88 <main+0x328>
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fdf7 	bl	80028f4 <_ZN14turningDCmotor12setSpeed_rpmEd>


	//	cart mCart(&rightMotor, &leftMotor, &turningMotor);

	command cmd;
 8001d06:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f987 	bl	800101e <_ZN7commandC1Ev>

	bt.init();
 8001d10:	48a6      	ldr	r0, [pc, #664]	; (8001fac <main+0x34c>)
 8001d12:	f7ff f9ea 	bl	80010ea <_ZN20BTTransmiterReceiver4initEv>
	//		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)batteries, 2);


	unsigned long int currentProcTime, prevProcTime, refreshDispVoltage,
	prevProcTime_dcmot, prevProcTime_turningMot, prevProcTime_Msg, incEncMesTime;
	currentProcTime = prevProcTime = prevProcTime_dcmot = incEncMesTime =
 8001d16:	f001 fc3b 	bl	8003590 <HAL_GetTick>
 8001d1a:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
			prevProcTime_turningMot = prevProcTime_Msg = refreshDispVoltage = HAL_GetTick();
 8001d1e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001d22:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001d26:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001d2a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	currentProcTime = prevProcTime = prevProcTime_dcmot = incEncMesTime =
 8001d2e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001d32:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001d36:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001d3a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8001d3e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001d42:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001d46:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001d4a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

	unsigned int dcMotControlValueRefreshPeriod = 100, sendingMsgPeriod = 1000,
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d58:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			IncEncMesPeriodTime = 100, refreshDispVoltagePeriod = 2000,
 8001d5c:	2364      	movs	r3, #100	; 0x64
 8001d5e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001d62:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d66:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
			turningMotControlValueRefreshPeriod = 20;
 8001d6a:	2314      	movs	r3, #20
 8001d6c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	//
	//
	const uint8_t quickMsgSize = 70;
 8001d70:	2346      	movs	r3, #70	; 0x46
 8001d72:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	char quickMsg[quickMsgSize] = {0};
 8001d76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	2346      	movs	r3, #70	; 0x46
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2100      	movs	r1, #0
 8001d82:	f004 ff9d 	bl	8006cc0 <memset>

	incrementalEncoder enc(&htim2, TIM_CHANNEL_ALL, 1000.0/(double)IncEncMesPeriodTime);
 8001d86:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001d8a:	f7fe fbeb 	bl	8000564 <__aeabi_ui2d>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	460c      	mov	r4, r1
 8001d92:	461a      	mov	r2, r3
 8001d94:	4623      	mov	r3, r4
 8001d96:	f04f 0000 	mov.w	r0, #0
 8001d9a:	4985      	ldr	r1, [pc, #532]	; (8001fb0 <main+0x350>)
 8001d9c:	f7fe fd86 	bl	80008ac <__aeabi_ddiv>
 8001da0:	4603      	mov	r3, r0
 8001da2:	460c      	mov	r4, r1
 8001da4:	ec44 3b17 	vmov	d7, r3, r4
 8001da8:	463b      	mov	r3, r7
 8001daa:	eeb0 0a47 	vmov.f32	s0, s14
 8001dae:	eef0 0a67 	vmov.f32	s1, s15
 8001db2:	223c      	movs	r2, #60	; 0x3c
 8001db4:	497a      	ldr	r1, [pc, #488]	; (8001fa0 <main+0x340>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fcf4 	bl	80017a4 <_ZN18incrementalEncoderC1EP17TIM_HandleTypeDefid>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
#ifndef DEV_MODE
		currentProcTime = HAL_GetTick();
 8001dbc:	f001 fbe8 	bl	8003590 <HAL_GetTick>
 8001dc0:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218

		//read new message, if it's available
		if(bt.isNewMsg()){
 8001dc4:	4879      	ldr	r0, [pc, #484]	; (8001fac <main+0x34c>)
 8001dc6:	f7ff fa02 	bl	80011ce <_ZNK20BTTransmiterReceiver8isNewMsgEv>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00d      	beq.n	8001dec <main+0x18c>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001dd0:	2120      	movs	r1, #32
 8001dd2:	4871      	ldr	r0, [pc, #452]	; (8001f98 <main+0x338>)
 8001dd4:	f002 fac3 	bl	800435e <HAL_GPIO_TogglePin>
			bt.readNewMsg(cmd);
 8001dd8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4873      	ldr	r0, [pc, #460]	; (8001fac <main+0x34c>)
 8001de0:	f7ff fa38 	bl	8001254 <_ZN20BTTransmiterReceiver10readNewMsgER7command>

			prevProcTime = HAL_GetTick();
 8001de4:	f001 fbd4 	bl	8003590 <HAL_GetTick>
 8001de8:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
			m.DCMotorSettedSpeed_rpm = 0;
			prevProcTime = HAL_GetTick();
		}
#endif

		switch(cmd.cmdName){
 8001dec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	f200 80eb 	bhi.w	8001fd0 <main+0x370>
 8001dfa:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <main+0x1a0>)
 8001dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e00:	08001e25 	.word	0x08001e25
 8001e04:	08001ecb 	.word	0x08001ecb
 8001e08:	08001f49 	.word	0x08001f49
 8001e0c:	08001f53 	.word	0x08001f53
 8001e10:	08001f5d 	.word	0x08001f5d
 8001e14:	08001f67 	.word	0x08001f67
 8001e18:	08001f71 	.word	0x08001f71
 8001e1c:	08001f7b 	.word	0x08001f7b
 8001e20:	08001fd1 	.word	0x08001fd1
		case G1:
			for(int i = 0;i<sizeof(cmd.params)/sizeof(parameter);i++){
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001e2a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d849      	bhi.n	8001ec6 <main+0x266>
				switch(cmd.params[i].name){
 8001e32:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e36:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3308      	adds	r3, #8
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b41      	cmp	r3, #65	; 0x41
 8001e44:	d026      	beq.n	8001e94 <main+0x234>
 8001e46:	2b4c      	cmp	r3, #76	; 0x4c
 8001e48:	d137      	bne.n	8001eba <main+0x25a>
				case 'L':
					//					mCart.setMovingSpeed(cmd.params[i].value);
					rightMotor.setSpeed_rpm(cmd.params[i].value);
 8001e4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e4e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001e52:	3301      	adds	r3, #1
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	4413      	add	r3, r2
 8001e58:	ed93 7b00 	vldr	d7, [r3]
 8001e5c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001e60:	eeb0 0a47 	vmov.f32	s0, s14
 8001e64:	eef0 0a67 	vmov.f32	s1, s15
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fad5 	bl	8002418 <_ZN7DCmotor12setSpeed_rpmEd>
					leftMotor.setSpeed_rpm(cmd.params[i].value);
 8001e6e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e72:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001e76:	3301      	adds	r3, #1
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	4413      	add	r3, r2
 8001e7c:	ed93 7b00 	vldr	d7, [r3]
 8001e80:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e84:	eeb0 0a47 	vmov.f32	s0, s14
 8001e88:	eef0 0a67 	vmov.f32	s1, s15
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fac3 	bl	8002418 <_ZN7DCmotor12setSpeed_rpmEd>

					break;
 8001e92:	e012      	b.n	8001eba <main+0x25a>
				case 'A':
					turningMotor.setAngle_deg(cmd.params[i].value);
 8001e94:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e98:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	4413      	add	r3, r2
 8001ea2:	ed93 7b00 	vldr	d7, [r3]
 8001ea6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001eaa:	eeb0 0a47 	vmov.f32	s0, s14
 8001eae:	eef0 0a67 	vmov.f32	s1, s15
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fce8 	bl	8002888 <_ZN14turningDCmotor12setAngle_degEd>
					break;
 8001eb8:	bf00      	nop
			for(int i = 0;i<sizeof(cmd.params)/sizeof(parameter);i++){
 8001eba:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001ec4:	e7b1      	b.n	8001e2a <main+0x1ca>
				}
			}
 8001ec6:	bf00      	nop
			break;
 8001ec8:	e083      	b.n	8001fd2 <main+0x372>
		case G4:
			for(int i = 0;i<sizeof(cmd.params)/sizeof(parameter);i++){
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8001ed0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d836      	bhi.n	8001f46 <main+0x2e6>
				switch(cmd.params[i].name){
 8001ed8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001edc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3308      	adds	r3, #8
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b41      	cmp	r3, #65	; 0x41
 8001eea:	d126      	bne.n	8001f3a <main+0x2da>
				case 'A':
					turningMotor.setSpeed_rpm(cmd.params[i].value);
 8001eec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ef0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	ed93 7b00 	vldr	d7, [r3]
 8001efe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f02:	eeb0 0a47 	vmov.f32	s0, s14
 8001f06:	eef0 0a67 	vmov.f32	s1, s15
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fcf2 	bl	80028f4 <_ZN14turningDCmotor12setSpeed_rpmEd>
					turningMotControlValueRefreshPeriod = 8000/(unsigned int)cmd.params[i].value;
 8001f10:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f14:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001f18:	3301      	adds	r3, #1
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	4413      	add	r3, r2
 8001f1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f22:	4618      	mov	r0, r3
 8001f24:	4621      	mov	r1, r4
 8001f26:	f7fe fe6f 	bl	8000c08 <__aeabi_d2uiz>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f34:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
					break;
 8001f38:	bf00      	nop
			for(int i = 0;i<sizeof(cmd.params)/sizeof(parameter);i++){
 8001f3a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8001f44:	e7c4      	b.n	8001ed0 <main+0x270>
				}
			}
 8001f46:	bf00      	nop
		case G10:
			cb.sendMsg("G10\n");
 8001f48:	491a      	ldr	r1, [pc, #104]	; (8001fb4 <main+0x354>)
 8001f4a:	481b      	ldr	r0, [pc, #108]	; (8001fb8 <main+0x358>)
 8001f4c:	f7ff fc0f 	bl	800176e <_ZN10controlBox7sendMsgEPc>
			break;
 8001f50:	e03f      	b.n	8001fd2 <main+0x372>
		case G11:
			cb.sendMsg("G11\n");
 8001f52:	491a      	ldr	r1, [pc, #104]	; (8001fbc <main+0x35c>)
 8001f54:	4818      	ldr	r0, [pc, #96]	; (8001fb8 <main+0x358>)
 8001f56:	f7ff fc0a 	bl	800176e <_ZN10controlBox7sendMsgEPc>
			break;
 8001f5a:	e03a      	b.n	8001fd2 <main+0x372>
		case G12:
			cb.sendMsg("G12\n");
 8001f5c:	4918      	ldr	r1, [pc, #96]	; (8001fc0 <main+0x360>)
 8001f5e:	4816      	ldr	r0, [pc, #88]	; (8001fb8 <main+0x358>)
 8001f60:	f7ff fc05 	bl	800176e <_ZN10controlBox7sendMsgEPc>
			break;
 8001f64:	e035      	b.n	8001fd2 <main+0x372>
		case G13:
			cb.sendMsg("G13\n");
 8001f66:	4917      	ldr	r1, [pc, #92]	; (8001fc4 <main+0x364>)
 8001f68:	4813      	ldr	r0, [pc, #76]	; (8001fb8 <main+0x358>)
 8001f6a:	f7ff fc00 	bl	800176e <_ZN10controlBox7sendMsgEPc>
			break;
 8001f6e:	e030      	b.n	8001fd2 <main+0x372>
		case G14:
			cb.sendMsg("G14\n");
 8001f70:	4915      	ldr	r1, [pc, #84]	; (8001fc8 <main+0x368>)
 8001f72:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <main+0x358>)
 8001f74:	f7ff fbfb 	bl	800176e <_ZN10controlBox7sendMsgEPc>
			break;
 8001f78:	e02b      	b.n	8001fd2 <main+0x372>
		case G15:
			cb.sendMsg("G15\n");
 8001f7a:	4914      	ldr	r1, [pc, #80]	; (8001fcc <main+0x36c>)
 8001f7c:	480e      	ldr	r0, [pc, #56]	; (8001fb8 <main+0x358>)
 8001f7e:	f7ff fbf6 	bl	800176e <_ZN10controlBox7sendMsgEPc>
			break;
 8001f82:	e026      	b.n	8001fd2 <main+0x372>
 8001f84:	f3af 8000 	nop.w
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	408c2000 	.word	0x408c2000
 8001f90:	20000388 	.word	0x20000388
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	200003c8 	.word	0x200003c8
 8001fa0:	20000408 	.word	0x20000408
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	20000334 	.word	0x20000334
 8001fac:	20000224 	.word	0x20000224
 8001fb0:	408f4000 	.word	0x408f4000
 8001fb4:	0800a474 	.word	0x0800a474
 8001fb8:	200002a8 	.word	0x200002a8
 8001fbc:	0800a47c 	.word	0x0800a47c
 8001fc0:	0800a484 	.word	0x0800a484
 8001fc4:	0800a48c 	.word	0x0800a48c
 8001fc8:	0800a494 	.word	0x0800a494
 8001fcc:	0800a49c 	.word	0x0800a49c
			//			mCart.setMovingSpeed(0);
			//			mCart.setTurningAngle(0);
			break;

		default:
			break;
 8001fd0:	bf00      	nop
		}

		cmd.clear();
 8001fd2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f839 	bl	800104e <_ZN7command5clearEv>
		if(currentProcTime - prevProcTime_dcmot > dcMotControlValueRefreshPeriod){
 8001fdc:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8001fe0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d20d      	bcs.n	800200a <main+0x3aa>
			prevProcTime_dcmot = HAL_GetTick();
 8001fee:	f001 facf 	bl	8003590 <HAL_GetTick>
 8001ff2:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238

			leftMotor.refreshControlState();
 8001ff6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 fab6 	bl	800256c <_ZN7DCmotor19refreshControlStateEv>
			rightMotor.refreshControlState();
 8002000:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fab1 	bl	800256c <_ZN7DCmotor19refreshControlStateEv>
		}

		if(currentProcTime - prevProcTime_turningMot > turningMotControlValueRefreshPeriod){
 800200a:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800200e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8002018:	429a      	cmp	r2, r3
 800201a:	d208      	bcs.n	800202e <main+0x3ce>
			prevProcTime_turningMot = HAL_GetTick();
 800201c:	f001 fab8 	bl	8003590 <HAL_GetTick>
 8002020:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

			turningMotor.refreshControlState();
 8002024:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fca5 	bl	8002978 <_ZN14turningDCmotor19refreshControlStateEv>
		}

		if(currentProcTime - incEncMesTime > IncEncMesPeriodTime){
 800202e:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8002032:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800203c:	429a      	cmp	r2, r3
 800203e:	d216      	bcs.n	800206e <main+0x40e>
			incEncMesTime = HAL_GetTick();
 8002040:	f001 faa6 	bl	8003590 <HAL_GetTick>
 8002044:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
//			EncToDiagram = (float)actEncMes/(12*3*(float)IncEncMesPeriodTime/1000.0);

//			sprintf(quickMsg, "Usrednione: %0.2f  Zwykle: %0.2f\n",
//					(float)actEncMes/(12.0*3.0*((float)IncEncMesPeriodTime/1000.0)),
//					(float)EncToDiagram/(12.0*3.0*((float)IncEncMesPeriodTime/1000.0)));
			sprintf(quickMsg, "%0.2f\n",enc.readCurrentWheelSpeed_rpm());
 8002048:	463b      	mov	r3, r7
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fc90 	bl	8001970 <_ZN18incrementalEncoder25readCurrentWheelSpeed_rpmEv>
 8002050:	ec54 3b10 	vmov	r3, r4, d0
 8002054:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002058:	461a      	mov	r2, r3
 800205a:	4623      	mov	r3, r4
 800205c:	4920      	ldr	r1, [pc, #128]	; (80020e0 <main+0x480>)
 800205e:	f005 fb4f 	bl	8007700 <siprintf>
			bt.sendMsg(quickMsg);
 8002062:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002066:	4619      	mov	r1, r3
 8002068:	481e      	ldr	r0, [pc, #120]	; (80020e4 <main+0x484>)
 800206a:	f7ff f8d7 	bl	800121c <_ZN20BTTransmiterReceiver7sendMsgEPc>
//
//			actEncMesIndex = (actEncMesIndex +1)%encMesCount;
//			tmpPrevMes = tmpMes;
		}

		if(currentProcTime - refreshDispVoltage > refreshDispVoltagePeriod){
 800206e:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8002072:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800207c:	429a      	cmp	r2, r3
 800207e:	d216      	bcs.n	80020ae <main+0x44e>
			refreshDispVoltage = HAL_GetTick();
 8002080:	f001 fa86 	bl	8003590 <HAL_GetTick>
 8002084:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
			//			bat.readMotorBatteryVoltage_volts();

			//			sprintf(quickMsg, "G10 L%0.2f M%0.2f\n",
			//					bat.readLogicBatteryVoltage_percent(),
			//					bat.readMotorBatteryVoltage_percent());
			sprintf(quickMsg, "G10 L%0.2f M%0.2f\n",
 8002088:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800208c:	a410      	add	r4, pc, #64	; (adr r4, 80020d0 <main+0x470>)
 800208e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002092:	e9cd 3400 	strd	r3, r4, [sp]
 8002096:	a310      	add	r3, pc, #64	; (adr r3, 80020d8 <main+0x478>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	4912      	ldr	r1, [pc, #72]	; (80020e8 <main+0x488>)
 800209e:	f005 fb2f 	bl	8007700 <siprintf>
					48.52,
					72.33);
			cb.sendMsg(quickMsg);
 80020a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020a6:	4619      	mov	r1, r3
 80020a8:	4810      	ldr	r0, [pc, #64]	; (80020ec <main+0x48c>)
 80020aa:	f7ff fb60 	bl	800176e <_ZN10controlBox7sendMsgEPc>
		}

		if(currentProcTime - prevProcTime_Msg > sendingMsgPeriod){
 80020ae:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80020b2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80020bc:	429a      	cmp	r2, r3
 80020be:	f4bf ae7d 	bcs.w	8001dbc <main+0x15c>
			prevProcTime_Msg = HAL_GetTick();
 80020c2:	f001 fa65 	bl	8003590 <HAL_GetTick>
 80020c6:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230


		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
 80020ca:	e677      	b.n	8001dbc <main+0x15c>
 80020cc:	f3af 8000 	nop.w
 80020d0:	b851eb85 	.word	0xb851eb85
 80020d4:	4052151e 	.word	0x4052151e
 80020d8:	5c28f5c3 	.word	0x5c28f5c3
 80020dc:	4048428f 	.word	0x4048428f
 80020e0:	0800a4a4 	.word	0x0800a4a4
 80020e4:	20000224 	.word	0x20000224
 80020e8:	0800a4ac 	.word	0x0800a4ac
 80020ec:	200002a8 	.word	0x200002a8

080020f0 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b094      	sub	sp, #80	; 0x50
 80020f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	2234      	movs	r2, #52	; 0x34
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 fdde 	bl	8006cc0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002104:	f107 0308 	add.w	r3, r7, #8
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <_Z18SystemClock_Configv+0xe8>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	4a2e      	ldr	r2, [pc, #184]	; (80021d8 <_Z18SystemClock_Configv+0xe8>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002122:	6413      	str	r3, [r2, #64]	; 0x40
 8002124:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <_Z18SystemClock_Configv+0xe8>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002130:	2300      	movs	r3, #0
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <_Z18SystemClock_Configv+0xec>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800213c:	4a27      	ldr	r2, [pc, #156]	; (80021dc <_Z18SystemClock_Configv+0xec>)
 800213e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <_Z18SystemClock_Configv+0xec>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002150:	2302      	movs	r3, #2
 8002152:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002154:	2301      	movs	r3, #1
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002158:	2310      	movs	r3, #16
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800215c:	2302      	movs	r3, #2
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002160:	2300      	movs	r3, #0
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002164:	2310      	movs	r3, #16
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002168:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800216c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800216e:	2304      	movs	r3, #4
 8002170:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002172:	2302      	movs	r3, #2
 8002174:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002176:	2302      	movs	r3, #2
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217a:	f107 031c 	add.w	r3, r7, #28
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fcfa 	bl	8004b78 <HAL_RCC_OscConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf14      	ite	ne
 800218a:	2301      	movne	r3, #1
 800218c:	2300      	moveq	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <_Z18SystemClock_Configv+0xa8>
	{
		Error_Handler();
 8002194:	f000 f824 	bl	80021e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002198:	230f      	movs	r3, #15
 800219a:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800219c:	2302      	movs	r3, #2
 800219e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	2102      	movs	r1, #2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 fa25 	bl	8004604 <HAL_RCC_ClockConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <_Z18SystemClock_Configv+0xde>
	{
		Error_Handler();
 80021ca:	f000 f809 	bl	80021e0 <Error_Handler>
	}
}
 80021ce:	bf00      	nop
 80021d0:	3750      	adds	r7, #80	; 0x50
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40007000 	.word	0x40007000

080021e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	while(1){
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80021e4:	2120      	movs	r1, #32
 80021e6:	4807      	ldr	r0, [pc, #28]	; (8002204 <Error_Handler+0x24>)
 80021e8:	f002 f8b9 	bl	800435e <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80021ec:	20c8      	movs	r0, #200	; 0xc8
 80021ee:	f001 f9db 	bl	80035a8 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80021f2:	2120      	movs	r1, #32
 80021f4:	4803      	ldr	r0, [pc, #12]	; (8002204 <Error_Handler+0x24>)
 80021f6:	f002 f8b2 	bl	800435e <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80021fa:	20c8      	movs	r0, #200	; 0xc8
 80021fc:	f001 f9d4 	bl	80035a8 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002200:	e7f0      	b.n	80021e4 <Error_Handler+0x4>
 8002202:	bf00      	nop
 8002204:	40020000 	.word	0x40020000

08002208 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af02      	add	r7, sp, #8
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d116      	bne.n	8002246 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221e:	4293      	cmp	r3, r2
 8002220:	d111      	bne.n	8002246 <_Z41__static_initialization_and_destruction_0ii+0x3e>
BTTransmiterReceiver bt(&huart3);
 8002222:	490b      	ldr	r1, [pc, #44]	; (8002250 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002224:	480b      	ldr	r0, [pc, #44]	; (8002254 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002226:	f7fe ff3c 	bl	80010a2 <_ZN20BTTransmiterReceiverC1EP20__UART_HandleTypeDef>
controlBox cb(&huart5);
 800222a:	490b      	ldr	r1, [pc, #44]	; (8002258 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800222c:	480b      	ldr	r0, [pc, #44]	; (800225c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800222e:	f7ff fa8c 	bl	800174a <_ZN10controlBoxC1EP20__UART_HandleTypeDef>
batteries bat(&hadc1, ADC_CHANNEL_11, ADC_CHANNEL_10);
 8002232:	2307      	movs	r3, #7
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	2301      	movs	r3, #1
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	230a      	movs	r3, #10
 800223c:	220b      	movs	r2, #11
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002240:	4808      	ldr	r0, [pc, #32]	; (8002264 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002242:	f7ff fa29 	bl	8001698 <_ZN9batteriesC1EP17ADC_HandleTypeDefmmmm>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000448 	.word	0x20000448
 8002254:	20000224 	.word	0x20000224
 8002258:	20000488 	.word	0x20000488
 800225c:	200002a8 	.word	0x200002a8
 8002260:	200002ec 	.word	0x200002ec
 8002264:	200002b0 	.word	0x200002b0

08002268 <_GLOBAL__sub_I_bt>:
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
 800226c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002270:	2001      	movs	r0, #1
 8002272:	f7ff ffc9 	bl	8002208 <_Z41__static_initialization_and_destruction_0ii>
 8002276:	bd80      	pop	{r7, pc}

08002278 <_ZSt3absd>:
// 2294. <cstdlib> should declare abs(double)

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8002278:	b490      	push	{r4, r7}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	ed87 0b00 	vstr	d0, [r7]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 800228a:	ec44 3b17 	vmov	d7, r3, r4
 800228e:	eeb0 0a47 	vmov.f32	s0, s14
 8002292:	eef0 0a67 	vmov.f32	s1, s15
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bc90      	pop	{r4, r7}
 800229c:	4770      	bx	lr

0800229e <_ZN5motor19refreshControlStateEv>:
	uint16_t PWMTimChannel;
public:
	motor();
	virtual void setSpeed_rpm(double value) = 0;
	virtual double readCurrentSpeed_rpm() = 0;
	virtual void refreshControlState(){};
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <_ZN5motorC1Ev>:

#include "motor.hh"

//enum motorRotaryDirection {free, cw, ccw, stop};

motor::motor(){
 80022b4:	b490      	push	{r4, r7}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	4a27      	ldr	r2, [pc, #156]	; (800235c <_ZN5motorC1Ev+0xa8>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	601a      	str	r2, [r3, #0]
	pidP = 0;
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	f04f 0400 	mov.w	r4, #0
 80022cc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	pidI = 0;
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	f04f 0400 	mov.w	r4, #0
 80022da:	e9c2 3404 	strd	r3, r4, [r2, #16]
	pidD = 0;
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	f04f 0400 	mov.w	r4, #0
 80022e8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	settedSpeed_rpm = 0;
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	f04f 0400 	mov.w	r4, #0
 80022f6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	currentSpeed_rpm = 0;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	f04f 0400 	mov.w	r4, #0
 8002304:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	controlValue = 0;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	f04f 0400 	mov.w	r4, #0
 8002312:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	pidError = 0;
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	f04f 0400 	mov.w	r4, #0
 8002320:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	dirPinLeft = 0;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	dirPinRight = 0;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	dirPinLeft_Port = nullptr;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	645a      	str	r2, [r3, #68]	; 0x44
	dirPinRight_Port = nullptr;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	649a      	str	r2, [r3, #72]	; 0x48

	PWMTimHandler = nullptr;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	64da      	str	r2, [r3, #76]	; 0x4c
	PWMTimChannel = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bc90      	pop	{r4, r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	0800a4f0 	.word	0x0800a4f0

08002360 <_ZN7DCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tS1_t>:
	D>0 ? pidD = D : pidD = 0;
}

/****************************** DCMOTOR  CLASS *****************************/

DCmotor::DCmotor(TIM_HandleTypeDef* timHand, uint16_t timChannel,
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	80fb      	strh	r3, [r7, #6]
		GPIO_TypeDef * dPLPort, uint16_t dPL,
		GPIO_TypeDef * dPRPort, uint16_t dPR,
		TIM_HandleTypeDef* eTimHand, uint16_t eTimChannel)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff9e 	bl	80022b4 <_ZN5motorC1Ev>
 8002378:	4a26      	ldr	r2, [pc, #152]	; (8002414 <_ZN7DCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tS1_t+0xb4>)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	601a      	str	r2, [r3, #0]
{
	//assign PWM timer handler and channel
	if(timHand == nullptr || dPLPort == nullptr ||
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <_ZN7DCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tS1_t+0x36>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <_ZN7DCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tS1_t+0x36>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <_ZN7DCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tS1_t+0x36>
			dPRPort == nullptr || eTimHand == nullptr){
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d100      	bne.n	8002398 <_ZN7DCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tS1_t+0x38>
		while(1){};
 8002396:	e7fe      	b.n	8002396 <_ZN7DCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tS1_t+0x36>
	}
	PWMTimHandler = timHand;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	64da      	str	r2, [r3, #76]	; 0x4c
	PWMTimChannel = timChannel;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	88fa      	ldrh	r2, [r7, #6]
 80023a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	if(HAL_TIM_PWM_Start(PWMTimHandler, PWMTimChannel) != HAL_OK){
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f002 fe9a 	bl	80050ec <HAL_TIM_PWM_Start>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	bf14      	ite	ne
 80023be:	2301      	movne	r3, #1
 80023c0:	2300      	moveq	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d000      	beq.n	80023ca <_ZN7DCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tS1_t+0x6a>
		while(1){};
 80023c8:	e7fe      	b.n	80023c8 <_ZN7DCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tS1_t+0x68>
//	//assign incremental encoder timer handler and channel
//	incrementalEncoder mEnc(eTimHand, eTimChannel);
//	enc = &mEnc;

	//assign control pins and their ports
	dirPinLeft_Port = dPLPort;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44
	dirPinLeft = dPL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8b3a      	ldrh	r2, [r7, #24]
 80023d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	dirPinRight_Port = dPRPort;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	649a      	str	r2, [r3, #72]	; 0x48
	dirPinRight = dPR;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8c3a      	ldrh	r2, [r7, #32]
 80023e2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	//reset pin's states
	HAL_GPIO_WritePin(dirPinLeft_Port, dirPinLeft, GPIO_PIN_RESET);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023f0:	2200      	movs	r2, #0
 80023f2:	4619      	mov	r1, r3
 80023f4:	f001 ff9a 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dirPinRight_Port, dirPinRight, GPIO_PIN_RESET);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002402:	2200      	movs	r2, #0
 8002404:	4619      	mov	r1, r3
 8002406:	f001 ff91 	bl	800432c <HAL_GPIO_WritePin>
}
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	0800a4dc 	.word	0x0800a4dc

08002418 <_ZN7DCmotor12setSpeed_rpmEd>:

void DCmotor::setSpeed_rpm(double value){
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	ed87 0b00 	vstr	d0, [r7]

	if(value > DCMOTOR_MAX_SPEED_RPM){
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	4b13      	ldr	r3, [pc, #76]	; (8002478 <_ZN7DCmotor12setSpeed_rpmEd+0x60>)
 800242a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800242e:	f7fe fba3 	bl	8000b78 <__aeabi_dcmpgt>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <_ZN7DCmotor12setSpeed_rpmEd+0x2e>
		settedSpeed_rpm = DCMOTOR_MAX_SPEED_RPM;
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	4c0e      	ldr	r4, [pc, #56]	; (8002478 <_ZN7DCmotor12setSpeed_rpmEd+0x60>)
 8002440:	e9c2 3408 	strd	r3, r4, [r2, #32]
		return;
 8002444:	e015      	b.n	8002472 <_ZN7DCmotor12setSpeed_rpmEd+0x5a>
	}
	else if(value < DCMOTOR_MIN_SPEED_RPM){
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <_ZN7DCmotor12setSpeed_rpmEd+0x64>)
 800244c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002450:	f7fe fb74 	bl	8000b3c <__aeabi_dcmplt>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d006      	beq.n	8002468 <_ZN7DCmotor12setSpeed_rpmEd+0x50>
		settedSpeed_rpm = DCMOTOR_MIN_SPEED_RPM;
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	4c06      	ldr	r4, [pc, #24]	; (800247c <_ZN7DCmotor12setSpeed_rpmEd+0x64>)
 8002462:	e9c2 3408 	strd	r3, r4, [r2, #32]
		return;
 8002466:	e004      	b.n	8002472 <_ZN7DCmotor12setSpeed_rpmEd+0x5a>
	}
	else
		settedSpeed_rpm = value;
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800246e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bd90      	pop	{r4, r7, pc}
 8002478:	40790000 	.word	0x40790000
 800247c:	c0790000 	.word	0xc0790000

08002480 <_ZN5motor18setRotaryDirectionEh>:

void motor::setRotaryDirection(uint8_t dir){
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	70fb      	strb	r3, [r7, #3]
	switch(dir){
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d856      	bhi.n	8002540 <_ZN5motor18setRotaryDirectionEh+0xc0>
 8002492:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <_ZN5motor18setRotaryDirectionEh+0x18>)
 8002494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002498:	080024f5 	.word	0x080024f5
 800249c:	080024a9 	.word	0x080024a9
 80024a0:	080024cf 	.word	0x080024cf
 80024a4:	0800251b 	.word	0x0800251b
	case MOTOR_ROTARY_DIRECTION_CW:
		HAL_GPIO_WritePin(dirPinLeft_Port, dirPinLeft, GPIO_PIN_SET);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024b2:	2201      	movs	r2, #1
 80024b4:	4619      	mov	r1, r3
 80024b6:	f001 ff39 	bl	800432c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dirPinRight_Port, dirPinRight, GPIO_PIN_RESET);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80024c4:	2200      	movs	r2, #0
 80024c6:	4619      	mov	r1, r3
 80024c8:	f001 ff30 	bl	800432c <HAL_GPIO_WritePin>
		return;
 80024cc:	e04a      	b.n	8002564 <_ZN5motor18setRotaryDirectionEh+0xe4>
	case MOTOR_ROTARY_DIRECTION_CCW:
		HAL_GPIO_WritePin(dirPinLeft_Port, dirPinLeft, GPIO_PIN_RESET);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024d8:	2200      	movs	r2, #0
 80024da:	4619      	mov	r1, r3
 80024dc:	f001 ff26 	bl	800432c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dirPinRight_Port, dirPinRight, GPIO_PIN_SET);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80024ea:	2201      	movs	r2, #1
 80024ec:	4619      	mov	r1, r3
 80024ee:	f001 ff1d 	bl	800432c <HAL_GPIO_WritePin>
		return;
 80024f2:	e037      	b.n	8002564 <_ZN5motor18setRotaryDirectionEh+0xe4>
	case MOTOR_ROTARY_DIRECTION_FREE:
		HAL_GPIO_WritePin(dirPinLeft_Port, dirPinLeft, GPIO_PIN_RESET);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024fe:	2200      	movs	r2, #0
 8002500:	4619      	mov	r1, r3
 8002502:	f001 ff13 	bl	800432c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dirPinRight_Port, dirPinRight, GPIO_PIN_RESET);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	f001 ff0a 	bl	800432c <HAL_GPIO_WritePin>
		return;
 8002518:	e024      	b.n	8002564 <_ZN5motor18setRotaryDirectionEh+0xe4>
	case MOTOR_ROTARY_DIRECTION_STOP:
		HAL_GPIO_WritePin(dirPinLeft_Port, dirPinLeft, GPIO_PIN_SET);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002524:	2201      	movs	r2, #1
 8002526:	4619      	mov	r1, r3
 8002528:	f001 ff00 	bl	800432c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dirPinRight_Port, dirPinRight, GPIO_PIN_SET);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002536:	2201      	movs	r2, #1
 8002538:	4619      	mov	r1, r3
 800253a:	f001 fef7 	bl	800432c <HAL_GPIO_WritePin>
		return;
 800253e:	e011      	b.n	8002564 <_ZN5motor18setRotaryDirectionEh+0xe4>
	default:
		HAL_GPIO_WritePin(dirPinLeft_Port, dirPinLeft, GPIO_PIN_RESET);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800254a:	2200      	movs	r2, #0
 800254c:	4619      	mov	r1, r3
 800254e:	f001 feed 	bl	800432c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dirPinRight_Port, dirPinRight, GPIO_PIN_RESET);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800255c:	2200      	movs	r2, #0
 800255e:	4619      	mov	r1, r3
 8002560:	f001 fee4 	bl	800432c <HAL_GPIO_WritePin>
	}
}
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop

0800256c <_ZN7DCmotor19refreshControlStateEv>:

void DCmotor::refreshControlState(){
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

	pidError = settedSpeed_rpm - currentSpeed_rpm;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002580:	461a      	mov	r2, r3
 8002582:	4623      	mov	r3, r4
 8002584:	f7fd feb0 	bl	80002e8 <__aeabi_dsub>
 8002588:	4603      	mov	r3, r0
 800258a:	460c      	mov	r4, r1
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	if(pidError < 0){
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	f7fe facc 	bl	8000b3c <__aeabi_dcmplt>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d028      	beq.n	80025fc <_ZN7DCmotor19refreshControlStateEv+0x90>
		if(pidError < -DCMOTOR_STEP_VALUE){
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	4b73      	ldr	r3, [pc, #460]	; (8002784 <_ZN7DCmotor19refreshControlStateEv+0x218>)
 80025b6:	f7fe fac1 	bl	8000b3c <__aeabi_dcmplt>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00d      	beq.n	80025dc <_ZN7DCmotor19refreshControlStateEv+0x70>
			controlValue = currentSpeed_rpm - DCMOTOR_STEP_VALUE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	4b6f      	ldr	r3, [pc, #444]	; (8002788 <_ZN7DCmotor19refreshControlStateEv+0x21c>)
 80025cc:	f7fd fe8c 	bl	80002e8 <__aeabi_dsub>
 80025d0:	4603      	mov	r3, r0
 80025d2:	460c      	mov	r4, r1
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
 80025da:	e043      	b.n	8002664 <_ZN7DCmotor19refreshControlStateEv+0xf8>
		}
		else{
			controlValue = currentSpeed_rpm + pidError;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80025e8:	461a      	mov	r2, r3
 80025ea:	4623      	mov	r3, r4
 80025ec:	f7fd fe7e 	bl	80002ec <__adddf3>
 80025f0:	4603      	mov	r3, r0
 80025f2:	460c      	mov	r4, r1
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
 80025fa:	e033      	b.n	8002664 <_ZN7DCmotor19refreshControlStateEv+0xf8>
		}
	}
	else if(pidError > 0){
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	f7fe fab5 	bl	8000b78 <__aeabi_dcmpgt>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d027      	beq.n	8002664 <_ZN7DCmotor19refreshControlStateEv+0xf8>
		if(pidError > DCMOTOR_STEP_VALUE){
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	4b5a      	ldr	r3, [pc, #360]	; (8002788 <_ZN7DCmotor19refreshControlStateEv+0x21c>)
 8002620:	f7fe faaa 	bl	8000b78 <__aeabi_dcmpgt>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00d      	beq.n	8002646 <_ZN7DCmotor19refreshControlStateEv+0xda>
			controlValue = currentSpeed_rpm + DCMOTOR_STEP_VALUE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	4b54      	ldr	r3, [pc, #336]	; (8002788 <_ZN7DCmotor19refreshControlStateEv+0x21c>)
 8002636:	f7fd fe59 	bl	80002ec <__adddf3>
 800263a:	4603      	mov	r3, r0
 800263c:	460c      	mov	r4, r1
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
 8002644:	e00e      	b.n	8002664 <_ZN7DCmotor19refreshControlStateEv+0xf8>
		}
		else{
			controlValue = currentSpeed_rpm + pidError;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8002652:	461a      	mov	r2, r3
 8002654:	4623      	mov	r3, r4
 8002656:	f7fd fe49 	bl	80002ec <__adddf3>
 800265a:	4603      	mov	r3, r0
 800265c:	460c      	mov	r4, r1
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
		}
	}

	if(controlValue >= 0){
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	f7fe fa77 	bl	8000b64 <__aeabi_dcmpge>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <_ZN7DCmotor19refreshControlStateEv+0x11c>
		setRotaryDirection(MOTOR_ROTARY_DIRECTION_CCW);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2102      	movs	r1, #2
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fefd 	bl	8002480 <_ZN5motor18setRotaryDirectionEh>
 8002686:	e010      	b.n	80026aa <_ZN7DCmotor19refreshControlStateEv+0x13e>
	}
	else if(controlValue < 0){
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	f7fe fa51 	bl	8000b3c <__aeabi_dcmplt>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <_ZN7DCmotor19refreshControlStateEv+0x13e>
		setRotaryDirection(MOTOR_ROTARY_DIRECTION_CW);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2101      	movs	r1, #1
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff feeb 	bl	8002480 <_ZN5motor18setRotaryDirectionEh>
	}

	__HAL_TIM_SET_COMPARE(PWMTimHandler, PWMTimChannel, abs(controlValue));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d114      	bne.n	80026de <_ZN7DCmotor19refreshControlStateEv+0x172>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80026ba:	eeb0 0a47 	vmov.f32	s0, s14
 80026be:	eef0 0a67 	vmov.f32	s1, s15
 80026c2:	f7ff fdd9 	bl	8002278 <_ZSt3absd>
 80026c6:	ec52 1b10 	vmov	r1, r2, d0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	681c      	ldr	r4, [r3, #0]
 80026d0:	4608      	mov	r0, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	f7fe fa98 	bl	8000c08 <__aeabi_d2uiz>
 80026d8:	4603      	mov	r3, r0
 80026da:	6363      	str	r3, [r4, #52]	; 0x34
 80026dc:	e047      	b.n	800276e <_ZN7DCmotor19refreshControlStateEv+0x202>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d114      	bne.n	8002712 <_ZN7DCmotor19refreshControlStateEv+0x1a6>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80026ee:	eeb0 0a47 	vmov.f32	s0, s14
 80026f2:	eef0 0a67 	vmov.f32	s1, s15
 80026f6:	f7ff fdbf 	bl	8002278 <_ZSt3absd>
 80026fa:	ec52 1b10 	vmov	r1, r2, d0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	681c      	ldr	r4, [r3, #0]
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	f7fe fa7e 	bl	8000c08 <__aeabi_d2uiz>
 800270c:	4603      	mov	r3, r0
 800270e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002710:	e02d      	b.n	800276e <_ZN7DCmotor19refreshControlStateEv+0x202>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002718:	2b08      	cmp	r3, #8
 800271a:	d114      	bne.n	8002746 <_ZN7DCmotor19refreshControlStateEv+0x1da>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002722:	eeb0 0a47 	vmov.f32	s0, s14
 8002726:	eef0 0a67 	vmov.f32	s1, s15
 800272a:	f7ff fda5 	bl	8002278 <_ZSt3absd>
 800272e:	ec52 1b10 	vmov	r1, r2, d0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	681c      	ldr	r4, [r3, #0]
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	f7fe fa64 	bl	8000c08 <__aeabi_d2uiz>
 8002740:	4603      	mov	r3, r0
 8002742:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002744:	e013      	b.n	800276e <_ZN7DCmotor19refreshControlStateEv+0x202>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800274c:	eeb0 0a47 	vmov.f32	s0, s14
 8002750:	eef0 0a67 	vmov.f32	s1, s15
 8002754:	f7ff fd90 	bl	8002278 <_ZSt3absd>
 8002758:	ec52 1b10 	vmov	r1, r2, d0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002760:	681c      	ldr	r4, [r3, #0]
 8002762:	4608      	mov	r0, r1
 8002764:	4611      	mov	r1, r2
 8002766:	f7fe fa4f 	bl	8000c08 <__aeabi_d2uiz>
 800276a:	4603      	mov	r3, r0
 800276c:	6423      	str	r3, [r4, #64]	; 0x40

	currentSpeed_rpm = controlValue;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}
 8002782:	bf00      	nop
 8002784:	c03e0000 	.word	0xc03e0000
 8002788:	403e0000 	.word	0x403e0000

0800278c <_ZN7DCmotor20readCurrentSpeed_rpmEv>:

double DCmotor::readCurrentSpeed_rpm(){
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	return enc->readCurrentWheelSpeed_rpm();
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff f8e9 	bl	8001970 <_ZN18incrementalEncoder25readCurrentWheelSpeed_rpmEv>
 800279e:	eeb0 7a40 	vmov.f32	s14, s0
 80027a2:	eef0 7a60 	vmov.f32	s15, s1
}
 80027a6:	eeb0 0a47 	vmov.f32	s0, s14
 80027aa:	eef0 0a67 	vmov.f32	s1, s15
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_ZN14turningDCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tP17I2C_HandleTypeDef>:


/**************************** TURNING  DCMOTOR  CLASS *****************************/

turningDCmotor::turningDCmotor(TIM_HandleTypeDef* PWM_Hand, uint16_t PWM_Chan,
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	4613      	mov	r3, r2
 80027c2:	80fb      	strh	r3, [r7, #6]
		GPIO_TypeDef * dPL_port, uint16_t dPL,
		GPIO_TypeDef * dPR_port, uint16_t dPR,
		I2C_HandleTypeDef* I2CHand){
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fd74 	bl	80022b4 <_ZN5motorC1Ev>
 80027cc:	4a2d      	ldr	r2, [pc, #180]	; (8002884 <_ZN14turningDCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tP17I2C_HandleTypeDef+0xd0>)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	601a      	str	r2, [r3, #0]

	if(PWM_Hand == nullptr || dPL_port == nullptr ||
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <_ZN14turningDCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tP17I2C_HandleTypeDef+0x36>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <_ZN14turningDCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tP17I2C_HandleTypeDef+0x36>
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <_ZN14turningDCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tP17I2C_HandleTypeDef+0x36>
			dPR_port == nullptr || I2CHand == nullptr){
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d100      	bne.n	80027ec <_ZN14turningDCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tP17I2C_HandleTypeDef+0x38>
		while(1){};
 80027ea:	e7fe      	b.n	80027ea <_ZN14turningDCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tP17I2C_HandleTypeDef+0x36>
	}

	settedAngle_deg = 0;
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	f04f 0400 	mov.w	r4, #0
 80027f6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	currentAngle_deg = 0;
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	f04f 0400 	mov.w	r4, #0
 8002804:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	//assign motor's control pins and their ports
	dirPinLeft = dPL;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8c3a      	ldrh	r2, [r7, #32]
 800280c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	dirPinRight = dPR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002814:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	dirPinLeft_Port = dPL_port;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	645a      	str	r2, [r3, #68]	; 0x44
	dirPinRight_Port = dPR_port;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002822:	649a      	str	r2, [r3, #72]	; 0x48

	//reset pin's states
	HAL_GPIO_WritePin(dirPinLeft_Port, dirPinLeft, GPIO_PIN_RESET);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800282e:	2200      	movs	r2, #0
 8002830:	4619      	mov	r1, r3
 8002832:	f001 fd7b 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dirPinRight_Port, dirPinRight, GPIO_PIN_RESET);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002840:	2200      	movs	r2, #0
 8002842:	4619      	mov	r1, r3
 8002844:	f001 fd72 	bl	800432c <HAL_GPIO_WritePin>

	PWMTimHandler = PWM_Hand;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	64da      	str	r2, [r3, #76]	; 0x4c
	PWMTimChannel = PWM_Chan;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	if(HAL_TIM_PWM_Start(PWMTimHandler, PWMTimChannel)!= HAL_OK){
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f002 fc42 	bl	80050ec <HAL_TIM_PWM_Start>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	bf14      	ite	ne
 800286e:	2301      	movne	r3, #1
 8002870:	2300      	moveq	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d000      	beq.n	800287a <_ZN14turningDCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tP17I2C_HandleTypeDef+0xc6>
		while(1){};
 8002878:	e7fe      	b.n	8002878 <_ZN14turningDCmotorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_tP17I2C_HandleTypeDef+0xc4>
	}

//	absoluteEncoder mEnc(I2CHand);
//	absEnc = &mEnc;
}
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	0800a4c8 	.word	0x0800a4c8

08002888 <_ZN14turningDCmotor12setAngle_degEd>:

void turningDCmotor::setAngle_deg(double angle){
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	ed87 0b00 	vstr	d0, [r7]
	if(angle > TURNING_DCMOTOR_MAX_ANGLE_DEG){
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <_ZN14turningDCmotor12setAngle_degEd+0x68>)
 800289a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800289e:	f7fe f96b 	bl	8000b78 <__aeabi_dcmpgt>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <_ZN14turningDCmotor12setAngle_degEd+0x2e>
		settedAngle_deg = TURNING_DCMOTOR_MAX_ANGLE_DEG;
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	4c10      	ldr	r4, [pc, #64]	; (80028f0 <_ZN14turningDCmotor12setAngle_degEd+0x68>)
 80028b0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		return;
 80028b4:	e015      	b.n	80028e2 <_ZN14turningDCmotor12setAngle_degEd+0x5a>
	}
	else if(angle < TURNING_DCMOTOR_MIN_ANGLE_DEG){
 80028b6:	a30c      	add	r3, pc, #48	; (adr r3, 80028e8 <_ZN14turningDCmotor12setAngle_degEd+0x60>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028c0:	f7fe f93c 	bl	8000b3c <__aeabi_dcmplt>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <_ZN14turningDCmotor12setAngle_degEd+0x50>
		settedAngle_deg = TURNING_DCMOTOR_MIN_ANGLE_DEG;
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	a406      	add	r4, pc, #24	; (adr r4, 80028e8 <_ZN14turningDCmotor12setAngle_degEd+0x60>)
 80028ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80028d2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		return;
 80028d6:	e004      	b.n	80028e2 <_ZN14turningDCmotor12setAngle_degEd+0x5a>
	}
	else
		settedAngle_deg = angle;
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80028de:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
}
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd90      	pop	{r4, r7, pc}
 80028e8:	00000000 	.word	0x00000000
 80028ec:	c08f4000 	.word	0xc08f4000
 80028f0:	408f4000 	.word	0x408f4000

080028f4 <_ZN14turningDCmotor12setSpeed_rpmEd>:

double turningDCmotor::getCurrentAngle()const{
	return currentAngle_deg;
}

void turningDCmotor::setSpeed_rpm(double value){
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	ed87 0b00 	vstr	d0, [r7]
	if(value > TURNING_DCMOTOR_MAX_SPEED_RPM){
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <_ZN14turningDCmotor12setSpeed_rpmEd+0x64>)
 8002906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800290a:	f7fe f935 	bl	8000b78 <__aeabi_dcmpgt>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d006      	beq.n	8002922 <_ZN14turningDCmotor12setSpeed_rpmEd+0x2e>
		settedSpeed_rpm = TURNING_DCMOTOR_MAX_SPEED_RPM;
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	4c0f      	ldr	r4, [pc, #60]	; (8002958 <_ZN14turningDCmotor12setSpeed_rpmEd+0x64>)
 800291c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		return;
 8002920:	e017      	b.n	8002952 <_ZN14turningDCmotor12setSpeed_rpmEd+0x5e>
	}
	else if(value < TURNING_DCMOTOR_MIN_SPEED_RPM){
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800292e:	f7fe f905 	bl	8000b3c <__aeabi_dcmplt>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <_ZN14turningDCmotor12setSpeed_rpmEd+0x54>
		settedSpeed_rpm = TURNING_DCMOTOR_MIN_SPEED_RPM;
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	f04f 0400 	mov.w	r4, #0
 8002942:	e9c2 3408 	strd	r3, r4, [r2, #32]
		return;
 8002946:	e004      	b.n	8002952 <_ZN14turningDCmotor12setSpeed_rpmEd+0x5e>
	}
	else
		settedSpeed_rpm = value;
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800294e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bd90      	pop	{r4, r7, pc}
 8002958:	408f4000 	.word	0x408f4000

0800295c <_ZN14turningDCmotor20readCurrentSpeed_rpmEv>:

double turningDCmotor::readCurrentSpeed_rpm(){
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	//reads current rotary speed using absolute encoder
}
 8002964:	bf00      	nop
 8002966:	eeb0 0a47 	vmov.f32	s0, s14
 800296a:	eef0 0a67 	vmov.f32	s1, s15
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_ZN14turningDCmotor19refreshControlStateEv>:

void turningDCmotor::refreshControlState(){
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	angleError = settedAngle_deg - currentAngle_deg;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800298c:	461a      	mov	r2, r3
 800298e:	4623      	mov	r3, r4
 8002990:	f7fd fcaa 	bl	80002e8 <__aeabi_dsub>
 8002994:	4603      	mov	r3, r0
 8002996:	460c      	mov	r4, r1
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	if(angleError > 0){
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	f7fe f8e4 	bl	8000b78 <__aeabi_dcmpgt>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <_ZN14turningDCmotor19refreshControlStateEv+0x4a>
		setRotaryDirection(MOTOR_ROTARY_DIRECTION_CW);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2101      	movs	r1, #1
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fd60 	bl	8002480 <_ZN5motor18setRotaryDirectionEh>
 80029c0:	e010      	b.n	80029e4 <_ZN14turningDCmotor19refreshControlStateEv+0x6c>
	}
	else if(angleError < 0){
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	f7fe f8b4 	bl	8000b3c <__aeabi_dcmplt>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d004      	beq.n	80029e4 <_ZN14turningDCmotor19refreshControlStateEv+0x6c>
		setRotaryDirection(MOTOR_ROTARY_DIRECTION_CCW);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2102      	movs	r1, #2
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fd4e 	bl	8002480 <_ZN5motor18setRotaryDirectionEh>
	}

	if(angleError < 0){
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	f7fe f8a3 	bl	8000b3c <__aeabi_dcmplt>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8082 	beq.w	8002b02 <_ZN14turningDCmotor19refreshControlStateEv+0x18a>
		if(angleError < -TURNING_DCMOTOR_STEP_VALUE){
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	4b8a      	ldr	r3, [pc, #552]	; (8002c34 <_ZN14turningDCmotor19refreshControlStateEv+0x2bc>)
 8002a0a:	f7fe f897 	bl	8000b3c <__aeabi_dcmplt>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d04f      	beq.n	8002ab4 <_ZN14turningDCmotor19refreshControlStateEv+0x13c>
			controlValue = currentAngle_deg - TURNING_DCMOTOR_STEP_VALUE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	4b86      	ldr	r3, [pc, #536]	; (8002c38 <_ZN14turningDCmotor19refreshControlStateEv+0x2c0>)
 8002a20:	f7fd fc62 	bl	80002e8 <__aeabi_dsub>
 8002a24:	4603      	mov	r3, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
			__HAL_TIM_SET_COMPARE(PWMTimHandler, PWMTimChannel, settedSpeed_rpm);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10c      	bne.n	8002a52 <_ZN14turningDCmotor19refreshControlStateEv+0xda>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a42:	6815      	ldr	r5, [r2, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	4621      	mov	r1, r4
 8002a48:	f7fe f8de 	bl	8000c08 <__aeabi_d2uiz>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	636b      	str	r3, [r5, #52]	; 0x34
 8002a50:	e0e5      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d10c      	bne.n	8002a76 <_ZN14turningDCmotor19refreshControlStateEv+0xfe>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a66:	6815      	ldr	r5, [r2, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	f7fe f8cc 	bl	8000c08 <__aeabi_d2uiz>
 8002a70:	4603      	mov	r3, r0
 8002a72:	63ab      	str	r3, [r5, #56]	; 0x38
 8002a74:	e0d3      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d10c      	bne.n	8002a9a <_ZN14turningDCmotor19refreshControlStateEv+0x122>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a8a:	6815      	ldr	r5, [r2, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	4621      	mov	r1, r4
 8002a90:	f7fe f8ba 	bl	8000c08 <__aeabi_d2uiz>
 8002a94:	4603      	mov	r3, r0
 8002a96:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002a98:	e0c1      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002aa4:	6815      	ldr	r5, [r2, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	f7fe f8ad 	bl	8000c08 <__aeabi_d2uiz>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	642b      	str	r3, [r5, #64]	; 0x40
 8002ab2:	e0b4      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
		}
		else{
			//			controlValue = currentAngle_deg + angleError;
			__HAL_TIM_SET_COMPARE(PWMTimHandler, PWMTimChannel, 0);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <_ZN14turningDCmotor19refreshControlStateEv+0x152>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ac8:	e0a9      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d105      	bne.n	8002ae0 <_ZN14turningDCmotor19refreshControlStateEv+0x168>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
 8002ade:	e09e      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d105      	bne.n	8002af6 <_ZN14turningDCmotor19refreshControlStateEv+0x17e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002af4:	e093      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2200      	movs	r2, #0
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
 8002b00:	e08d      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
		}
	}
	else if(angleError > 0){
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	f7fe f832 	bl	8000b78 <__aeabi_dcmpgt>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8081 	beq.w	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
		if(angleError > TURNING_DCMOTOR_STEP_VALUE){
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	4b44      	ldr	r3, [pc, #272]	; (8002c38 <_ZN14turningDCmotor19refreshControlStateEv+0x2c0>)
 8002b28:	f7fe f826 	bl	8000b78 <__aeabi_dcmpgt>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d04f      	beq.n	8002bd2 <_ZN14turningDCmotor19refreshControlStateEv+0x25a>
			controlValue = currentAngle_deg + TURNING_DCMOTOR_STEP_VALUE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <_ZN14turningDCmotor19refreshControlStateEv+0x2c0>)
 8002b3e:	f7fd fbd5 	bl	80002ec <__adddf3>
 8002b42:	4603      	mov	r3, r0
 8002b44:	460c      	mov	r4, r1
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
			__HAL_TIM_SET_COMPARE(PWMTimHandler, PWMTimChannel, settedSpeed_rpm);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10c      	bne.n	8002b70 <_ZN14turningDCmotor19refreshControlStateEv+0x1f8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b60:	6815      	ldr	r5, [r2, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	4621      	mov	r1, r4
 8002b66:	f7fe f84f 	bl	8000c08 <__aeabi_d2uiz>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	636b      	str	r3, [r5, #52]	; 0x34
 8002b6e:	e056      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d10c      	bne.n	8002b94 <_ZN14turningDCmotor19refreshControlStateEv+0x21c>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b84:	6815      	ldr	r5, [r2, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	4621      	mov	r1, r4
 8002b8a:	f7fe f83d 	bl	8000c08 <__aeabi_d2uiz>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	63ab      	str	r3, [r5, #56]	; 0x38
 8002b92:	e044      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d10c      	bne.n	8002bb8 <_ZN14turningDCmotor19refreshControlStateEv+0x240>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ba8:	6815      	ldr	r5, [r2, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	4621      	mov	r1, r4
 8002bae:	f7fe f82b 	bl	8000c08 <__aeabi_d2uiz>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002bb6:	e032      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002bc2:	6815      	ldr	r5, [r2, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	f7fe f81e 	bl	8000c08 <__aeabi_d2uiz>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	642b      	str	r3, [r5, #64]	; 0x40
 8002bd0:	e025      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
		}
		else{
			//			controlValue = currentAngle_deg + angleError;
			__HAL_TIM_SET_COMPARE(PWMTimHandler, PWMTimChannel, 0);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <_ZN14turningDCmotor19refreshControlStateEv+0x270>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	635a      	str	r2, [r3, #52]	; 0x34
 8002be6:	e01a      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d105      	bne.n	8002bfe <_ZN14turningDCmotor19refreshControlStateEv+0x286>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38
 8002bfc:	e00f      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d105      	bne.n	8002c14 <_ZN14turningDCmotor19refreshControlStateEv+0x29c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c12:	e004      	b.n	8002c1e <_ZN14turningDCmotor19refreshControlStateEv+0x2a6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}

	//__HAL_TIM_SET_COMPARE(PWMTimHandler, PWMTimChannel, settedSpeed_rpm);
	currentAngle_deg = controlValue;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bdb0      	pop	{r4, r5, r7, pc}
 8002c32:	bf00      	nop
 8002c34:	c0140000 	.word	0xc0140000
 8002c38:	40140000 	.word	0x40140000

08002c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c7a:	2007      	movs	r0, #7
 8002c7c:	f001 f960 	bl	8003f40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800

08002c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <HardFault_Handler+0x4>

08002ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <MemManage_Handler+0x4>

08002ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002caa:	e7fe      	b.n	8002caa <BusFault_Handler+0x4>

08002cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <UsageFault_Handler+0x4>

08002cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ce0:	f000 fc42 	bl	8003568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <ADC_IRQHandler+0x10>)
 8002cee:	f000 fcc0 	bl	8003672 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200002ec 	.word	0x200002ec

08002cfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <USART3_IRQHandler+0x10>)
 8002d02:	f003 f993 	bl	800602c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000448 	.word	0x20000448

08002d10 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <UART5_IRQHandler+0x10>)
 8002d16:	f003 f989 	bl	800602c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000488 	.word	0x20000488

08002d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
	return 1;
 8002d28:	2301      	movs	r3, #1
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <_kill>:

int _kill(int pid, int sig)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d3e:	f003 ff95 	bl	8006c6c <__errno>
 8002d42:	4602      	mov	r2, r0
 8002d44:	2316      	movs	r3, #22
 8002d46:	6013      	str	r3, [r2, #0]
	return -1;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_exit>:

void _exit (int status)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ffe7 	bl	8002d34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d66:	e7fe      	b.n	8002d66 <_exit+0x12>

08002d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <_sbrk+0x5c>)
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <_sbrk+0x60>)
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <_sbrk+0x64>)
 8002d86:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <_sbrk+0x68>)
 8002d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d207      	bcs.n	8002da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d98:	f003 ff68 	bl	8006c6c <__errno>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	230c      	movs	r3, #12
 8002da0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	e009      	b.n	8002dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <_sbrk+0x64>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <_sbrk+0x64>)
 8002db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20020000 	.word	0x20020000
 8002dc8:	00000400 	.word	0x00000400
 8002dcc:	200002e0 	.word	0x200002e0
 8002dd0:	200004d0 	.word	0x200004d0

08002dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <SystemInit+0x28>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <SystemInit+0x28>)
 8002de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <SystemInit+0x28>)
 8002dea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dee:	609a      	str	r2, [r3, #8]
#endif
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b096      	sub	sp, #88	; 0x58
 8002e04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	609a      	str	r2, [r3, #8]
 8002e2a:	60da      	str	r2, [r3, #12]
 8002e2c:	611a      	str	r2, [r3, #16]
 8002e2e:	615a      	str	r2, [r3, #20]
 8002e30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	2220      	movs	r2, #32
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 ff41 	bl	8006cc0 <memset>

  htim1.Instance = TIM1;
 8002e3e:	4b4a      	ldr	r3, [pc, #296]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002e40:	4a4a      	ldr	r2, [pc, #296]	; (8002f6c <MX_TIM1_Init+0x16c>)
 8002e42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002e44:	4b48      	ldr	r3, [pc, #288]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002e46:	2253      	movs	r2, #83	; 0x53
 8002e48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002e50:	4b45      	ldr	r3, [pc, #276]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002e52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e58:	4b43      	ldr	r3, [pc, #268]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e5e:	4b42      	ldr	r3, [pc, #264]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e64:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e6a:	483f      	ldr	r0, [pc, #252]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002e6c:	f002 f8de 	bl	800502c <HAL_TIM_Base_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002e76:	f7ff f9b3 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e84:	4619      	mov	r1, r3
 8002e86:	4838      	ldr	r0, [pc, #224]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002e88:	f002 fafe 	bl	8005488 <HAL_TIM_ConfigClockSource>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002e92:	f7ff f9a5 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e96:	4834      	ldr	r0, [pc, #208]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002e98:	f002 f8f3 	bl	8005082 <HAL_TIM_PWM_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002ea2:	f7ff f99d 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002eae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	482c      	ldr	r0, [pc, #176]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002eb6:	f002 feaf 	bl	8005c18 <HAL_TIMEx_MasterConfigSynchronization>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002ec0:	f7ff f98e 	bl	80021e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ec4:	2360      	movs	r3, #96	; 0x60
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002edc:	2300      	movs	r3, #0
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	481f      	ldr	r0, [pc, #124]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002eea:	f002 fa07 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002ef4:	f7ff f974 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efc:	2208      	movs	r2, #8
 8002efe:	4619      	mov	r1, r3
 8002f00:	4819      	ldr	r0, [pc, #100]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002f02:	f002 f9fb 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002f0c:	f7ff f968 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f14:	220c      	movs	r2, #12
 8002f16:	4619      	mov	r1, r3
 8002f18:	4813      	ldr	r0, [pc, #76]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002f1a:	f002 f9ef 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002f24:	f7ff f95c 	bl	80021e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f46:	1d3b      	adds	r3, r7, #4
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4807      	ldr	r0, [pc, #28]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002f4c:	f002 fee0 	bl	8005d10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002f56:	f7ff f943 	bl	80021e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002f5a:	4803      	ldr	r0, [pc, #12]	; (8002f68 <MX_TIM1_Init+0x168>)
 8002f5c:	f000 f94c 	bl	80031f8 <HAL_TIM_MspPostInit>

}
 8002f60:	bf00      	nop
 8002f62:	3758      	adds	r7, #88	; 0x58
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	200003c8 	.word	0x200003c8
 8002f6c:	40010000 	.word	0x40010000

08002f70 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08c      	sub	sp, #48	; 0x30
 8002f74:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f76:	f107 030c 	add.w	r3, r7, #12
 8002f7a:	2224      	movs	r2, #36	; 0x24
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 fe9e 	bl	8006cc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <MX_TIM2_Init+0xa4>)
 8002f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002f94:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <MX_TIM2_Init+0xa4>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <MX_TIM2_Init+0xa4>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8002fa0:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <MX_TIM2_Init+0xa4>)
 8002fa2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <MX_TIM2_Init+0xa4>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fae:	4b19      	ldr	r3, [pc, #100]	; (8003014 <MX_TIM2_Init+0xa4>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002fd8:	f107 030c 	add.w	r3, r7, #12
 8002fdc:	4619      	mov	r1, r3
 8002fde:	480d      	ldr	r0, [pc, #52]	; (8003014 <MX_TIM2_Init+0xa4>)
 8002fe0:	f002 f8c2 	bl	8005168 <HAL_TIM_Encoder_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002fea:	f7ff f8f9 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4806      	ldr	r0, [pc, #24]	; (8003014 <MX_TIM2_Init+0xa4>)
 8002ffc:	f002 fe0c 	bl	8005c18 <HAL_TIMEx_MasterConfigSynchronization>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003006:	f7ff f8eb 	bl	80021e0 <Error_Handler>
  }

}
 800300a:	bf00      	nop
 800300c:	3730      	adds	r7, #48	; 0x30
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000408 	.word	0x20000408

08003018 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	; 0x30
 800301c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	2224      	movs	r2, #36	; 0x24
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f003 fe4a 	bl	8006cc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8003034:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <MX_TIM3_Init+0xa0>)
 8003036:	4a21      	ldr	r2, [pc, #132]	; (80030bc <MX_TIM3_Init+0xa4>)
 8003038:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <MX_TIM3_Init+0xa0>)
 800303c:	2200      	movs	r2, #0
 800303e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <MX_TIM3_Init+0xa0>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <MX_TIM3_Init+0xa0>)
 8003048:	22c8      	movs	r2, #200	; 0xc8
 800304a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <MX_TIM3_Init+0xa0>)
 800304e:	2200      	movs	r2, #0
 8003050:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <MX_TIM3_Init+0xa0>)
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003058:	2301      	movs	r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800305c:	2300      	movs	r3, #0
 800305e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003060:	2301      	movs	r3, #1
 8003062:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800306c:	2300      	movs	r3, #0
 800306e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003070:	2301      	movs	r3, #1
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003074:	2300      	movs	r3, #0
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	4619      	mov	r1, r3
 8003082:	480d      	ldr	r0, [pc, #52]	; (80030b8 <MX_TIM3_Init+0xa0>)
 8003084:	f002 f870 	bl	8005168 <HAL_TIM_Encoder_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800308e:	f7ff f8a7 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	4619      	mov	r1, r3
 800309e:	4806      	ldr	r0, [pc, #24]	; (80030b8 <MX_TIM3_Init+0xa0>)
 80030a0:	f002 fdba 	bl	8005c18 <HAL_TIMEx_MasterConfigSynchronization>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80030aa:	f7ff f899 	bl	80021e0 <Error_Handler>
  }

}
 80030ae:	bf00      	nop
 80030b0:	3730      	adds	r7, #48	; 0x30
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000388 	.word	0x20000388
 80030bc:	40000400 	.word	0x40000400

080030c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <HAL_TIM_Base_MspInit+0x3c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10d      	bne.n	80030ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HAL_TIM_Base_MspInit+0x40>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4a09      	ldr	r2, [pc, #36]	; (8003100 <HAL_TIM_Base_MspInit+0x40>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
 80030e2:	4b07      	ldr	r3, [pc, #28]	; (8003100 <HAL_TIM_Base_MspInit+0x40>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40010000 	.word	0x40010000
 8003100:	40023800 	.word	0x40023800

08003104 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	; 0x30
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310c:	f107 031c 	add.w	r3, r7, #28
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003124:	d12d      	bne.n	8003182 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	4b30      	ldr	r3, [pc, #192]	; (80031ec <HAL_TIM_Encoder_MspInit+0xe8>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a2f      	ldr	r2, [pc, #188]	; (80031ec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b2d      	ldr	r3, [pc, #180]	; (80031ec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	4a28      	ldr	r2, [pc, #160]	; (80031ec <HAL_TIM_Encoder_MspInit+0xe8>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
 8003152:	4b26      	ldr	r3, [pc, #152]	; (80031ec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LINC_ENC_A_Pin|LINC_ENC_B_Pin;
 800315e:	f248 0302 	movw	r3, #32770	; 0x8002
 8003162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003164:	2302      	movs	r3, #2
 8003166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316c:	2300      	movs	r3, #0
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003170:	2301      	movs	r3, #1
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003174:	f107 031c 	add.w	r3, r7, #28
 8003178:	4619      	mov	r1, r3
 800317a:	481d      	ldr	r0, [pc, #116]	; (80031f0 <HAL_TIM_Encoder_MspInit+0xec>)
 800317c:	f000 ff44 	bl	8004008 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003180:	e030      	b.n	80031e4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d12b      	bne.n	80031e4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	4a15      	ldr	r2, [pc, #84]	; (80031ec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003196:	f043 0302 	orr.w	r3, r3, #2
 800319a:	6413      	str	r3, [r2, #64]	; 0x40
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <HAL_TIM_Encoder_MspInit+0xe8>)
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <HAL_TIM_Encoder_MspInit+0xe8>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	4a0e      	ldr	r2, [pc, #56]	; (80031ec <HAL_TIM_Encoder_MspInit+0xe8>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6313      	str	r3, [r2, #48]	; 0x30
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <HAL_TIM_Encoder_MspInit+0xe8>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RINC_ENC_B_Pin|RINC_ENC_A_Pin;
 80031c4:	23c0      	movs	r3, #192	; 0xc0
 80031c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031d4:	2302      	movs	r3, #2
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d8:	f107 031c 	add.w	r3, r7, #28
 80031dc:	4619      	mov	r1, r3
 80031de:	4804      	ldr	r0, [pc, #16]	; (80031f0 <HAL_TIM_Encoder_MspInit+0xec>)
 80031e0:	f000 ff12 	bl	8004008 <HAL_GPIO_Init>
}
 80031e4:	bf00      	nop
 80031e6:	3730      	adds	r7, #48	; 0x30
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40020000 	.word	0x40020000
 80031f4:	40000400 	.word	0x40000400

080031f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003200:	f107 030c 	add.w	r3, r7, #12
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a12      	ldr	r2, [pc, #72]	; (8003260 <HAL_TIM_MspPostInit+0x68>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d11e      	bne.n	8003258 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_TIM_MspPostInit+0x6c>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <HAL_TIM_MspPostInit+0x6c>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <HAL_TIM_MspPostInit+0x6c>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ROTMOT_SPEED_Pin|RMOT_SPEED_Pin|LMOT_SPEED_Pin;
 8003236:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800323a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2300      	movs	r3, #0
 8003246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003248:	2301      	movs	r3, #1
 800324a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324c:	f107 030c 	add.w	r3, r7, #12
 8003250:	4619      	mov	r1, r3
 8003252:	4805      	ldr	r0, [pc, #20]	; (8003268 <HAL_TIM_MspPostInit+0x70>)
 8003254:	f000 fed8 	bl	8004008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003258:	bf00      	nop
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40010000 	.word	0x40010000
 8003264:	40023800 	.word	0x40023800
 8003268:	40020000 	.word	0x40020000

0800326c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <MX_UART5_Init+0x4c>)
 8003272:	4a12      	ldr	r2, [pc, #72]	; (80032bc <MX_UART5_Init+0x50>)
 8003274:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <MX_UART5_Init+0x4c>)
 8003278:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800327c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <MX_UART5_Init+0x4c>)
 8003280:	2200      	movs	r2, #0
 8003282:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <MX_UART5_Init+0x4c>)
 8003286:	2200      	movs	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <MX_UART5_Init+0x4c>)
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <MX_UART5_Init+0x4c>)
 8003292:	220c      	movs	r2, #12
 8003294:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <MX_UART5_Init+0x4c>)
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <MX_UART5_Init+0x4c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80032a2:	4805      	ldr	r0, [pc, #20]	; (80032b8 <MX_UART5_Init+0x4c>)
 80032a4:	f002 fd86 	bl	8005db4 <HAL_UART_Init>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80032ae:	f7fe ff97 	bl	80021e0 <Error_Handler>
  }

}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000488 	.word	0x20000488
 80032bc:	40005000 	.word	0x40005000

080032c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <MX_USART3_UART_Init+0x4c>)
 80032c6:	4a12      	ldr	r2, [pc, #72]	; (8003310 <MX_USART3_UART_Init+0x50>)
 80032c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <MX_USART3_UART_Init+0x4c>)
 80032cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80032d2:	4b0e      	ldr	r3, [pc, #56]	; (800330c <MX_USART3_UART_Init+0x4c>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <MX_USART3_UART_Init+0x4c>)
 80032da:	2200      	movs	r2, #0
 80032dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <MX_USART3_UART_Init+0x4c>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <MX_USART3_UART_Init+0x4c>)
 80032e6:	220c      	movs	r2, #12
 80032e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ea:	4b08      	ldr	r3, [pc, #32]	; (800330c <MX_USART3_UART_Init+0x4c>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <MX_USART3_UART_Init+0x4c>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032f6:	4805      	ldr	r0, [pc, #20]	; (800330c <MX_USART3_UART_Init+0x4c>)
 80032f8:	f002 fd5c 	bl	8005db4 <HAL_UART_Init>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003302:	f7fe ff6d 	bl	80021e0 <Error_Handler>
  }

}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000448 	.word	0x20000448
 8003310:	40004800 	.word	0x40004800

08003314 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	; 0x30
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a4a      	ldr	r2, [pc, #296]	; (800345c <HAL_UART_MspInit+0x148>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d153      	bne.n	80033de <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	4b49      	ldr	r3, [pc, #292]	; (8003460 <HAL_UART_MspInit+0x14c>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	4a48      	ldr	r2, [pc, #288]	; (8003460 <HAL_UART_MspInit+0x14c>)
 8003340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003344:	6413      	str	r3, [r2, #64]	; 0x40
 8003346:	4b46      	ldr	r3, [pc, #280]	; (8003460 <HAL_UART_MspInit+0x14c>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334e:	61bb      	str	r3, [r7, #24]
 8003350:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	4b42      	ldr	r3, [pc, #264]	; (8003460 <HAL_UART_MspInit+0x14c>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a41      	ldr	r2, [pc, #260]	; (8003460 <HAL_UART_MspInit+0x14c>)
 800335c:	f043 0304 	orr.w	r3, r3, #4
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b3f      	ldr	r3, [pc, #252]	; (8003460 <HAL_UART_MspInit+0x14c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_UART_MspInit+0x14c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a3a      	ldr	r2, [pc, #232]	; (8003460 <HAL_UART_MspInit+0x14c>)
 8003378:	f043 0308 	orr.w	r3, r3, #8
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b38      	ldr	r3, [pc, #224]	; (8003460 <HAL_UART_MspInit+0x14c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800338a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800338e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003390:	2302      	movs	r3, #2
 8003392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003394:	2301      	movs	r3, #1
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003398:	2303      	movs	r3, #3
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800339c:	2308      	movs	r3, #8
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a0:	f107 031c 	add.w	r3, r7, #28
 80033a4:	4619      	mov	r1, r3
 80033a6:	482f      	ldr	r0, [pc, #188]	; (8003464 <HAL_UART_MspInit+0x150>)
 80033a8:	f000 fe2e 	bl	8004008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033ac:	2304      	movs	r3, #4
 80033ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b0:	2302      	movs	r3, #2
 80033b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b4:	2301      	movs	r3, #1
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b8:	2303      	movs	r3, #3
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80033bc:	2308      	movs	r3, #8
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033c0:	f107 031c 	add.w	r3, r7, #28
 80033c4:	4619      	mov	r1, r3
 80033c6:	4828      	ldr	r0, [pc, #160]	; (8003468 <HAL_UART_MspInit+0x154>)
 80033c8:	f000 fe1e 	bl	8004008 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80033cc:	2200      	movs	r2, #0
 80033ce:	2100      	movs	r1, #0
 80033d0:	2035      	movs	r0, #53	; 0x35
 80033d2:	f000 fdc0 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80033d6:	2035      	movs	r0, #53	; 0x35
 80033d8:	f000 fdd9 	bl	8003f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80033dc:	e039      	b.n	8003452 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART3)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a22      	ldr	r2, [pc, #136]	; (800346c <HAL_UART_MspInit+0x158>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d134      	bne.n	8003452 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <HAL_UART_MspInit+0x14c>)
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <HAL_UART_MspInit+0x14c>)
 80033f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f6:	6413      	str	r3, [r2, #64]	; 0x40
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_UART_MspInit+0x14c>)
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003404:	2300      	movs	r3, #0
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	4b15      	ldr	r3, [pc, #84]	; (8003460 <HAL_UART_MspInit+0x14c>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <HAL_UART_MspInit+0x14c>)
 800340e:	f043 0304 	orr.w	r3, r3, #4
 8003412:	6313      	str	r3, [r2, #48]	; 0x30
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_UART_MspInit+0x14c>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003420:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342e:	2303      	movs	r3, #3
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003432:	2307      	movs	r3, #7
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003436:	f107 031c 	add.w	r3, r7, #28
 800343a:	4619      	mov	r1, r3
 800343c:	4809      	ldr	r0, [pc, #36]	; (8003464 <HAL_UART_MspInit+0x150>)
 800343e:	f000 fde3 	bl	8004008 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	2100      	movs	r1, #0
 8003446:	2027      	movs	r0, #39	; 0x27
 8003448:	f000 fd85 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800344c:	2027      	movs	r0, #39	; 0x27
 800344e:	f000 fd9e 	bl	8003f8e <HAL_NVIC_EnableIRQ>
}
 8003452:	bf00      	nop
 8003454:	3730      	adds	r7, #48	; 0x30
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40005000 	.word	0x40005000
 8003460:	40023800 	.word	0x40023800
 8003464:	40020800 	.word	0x40020800
 8003468:	40020c00 	.word	0x40020c00
 800346c:	40004800 	.word	0x40004800

08003470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003474:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003476:	e003      	b.n	8003480 <LoopCopyDataInit>

08003478 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800347a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800347c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800347e:	3104      	adds	r1, #4

08003480 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003480:	480b      	ldr	r0, [pc, #44]	; (80034b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003484:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003486:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003488:	d3f6      	bcc.n	8003478 <CopyDataInit>
  ldr  r2, =_sbss
 800348a:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800348c:	e002      	b.n	8003494 <LoopFillZerobss>

0800348e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800348e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003490:	f842 3b04 	str.w	r3, [r2], #4

08003494 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003496:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003498:	d3f9      	bcc.n	800348e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800349a:	f7ff fc9b 	bl	8002dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800349e:	f003 fbeb 	bl	8006c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034a2:	f7fe fbdd 	bl	8001c60 <main>
  bx  lr    
 80034a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80034ac:	0800a7d4 	.word	0x0800a7d4
  ldr  r0, =_sdata
 80034b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034b4:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 80034b8:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 80034bc:	200004d0 	.word	0x200004d0

080034c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034c0:	e7fe      	b.n	80034c0 <CAN1_RX0_IRQHandler>
	...

080034c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_Init+0x40>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0d      	ldr	r2, [pc, #52]	; (8003504 <HAL_Init+0x40>)
 80034ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_Init+0x40>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <HAL_Init+0x40>)
 80034da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <HAL_Init+0x40>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a07      	ldr	r2, [pc, #28]	; (8003504 <HAL_Init+0x40>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ec:	2003      	movs	r0, #3
 80034ee:	f000 fd27 	bl	8003f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034f2:	2000      	movs	r0, #0
 80034f4:	f000 f808 	bl	8003508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034f8:	f7ff fba0 	bl	8002c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023c00 	.word	0x40023c00

08003508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003510:	4b12      	ldr	r3, [pc, #72]	; (800355c <HAL_InitTick+0x54>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_InitTick+0x58>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4619      	mov	r1, r3
 800351a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800351e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fd3f 	bl	8003faa <HAL_SYSTICK_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e00e      	b.n	8003554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b0f      	cmp	r3, #15
 800353a:	d80a      	bhi.n	8003552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800353c:	2200      	movs	r2, #0
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	f04f 30ff 	mov.w	r0, #4294967295
 8003544:	f000 fd07 	bl	8003f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003548:	4a06      	ldr	r2, [pc, #24]	; (8003564 <HAL_InitTick+0x5c>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e000      	b.n	8003554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
}
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000024 	.word	0x20000024
 8003560:	2000002c 	.word	0x2000002c
 8003564:	20000028 	.word	0x20000028

08003568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_IncTick+0x20>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_IncTick+0x24>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4413      	add	r3, r2
 8003578:	4a04      	ldr	r2, [pc, #16]	; (800358c <HAL_IncTick+0x24>)
 800357a:	6013      	str	r3, [r2, #0]
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	2000002c 	.word	0x2000002c
 800358c:	200004c8 	.word	0x200004c8

08003590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return uwTick;
 8003594:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_GetTick+0x14>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	200004c8 	.word	0x200004c8

080035a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b0:	f7ff ffee 	bl	8003590 <HAL_GetTick>
 80035b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d005      	beq.n	80035ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_Delay+0x40>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035ce:	bf00      	nop
 80035d0:	f7ff ffde 	bl	8003590 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d8f7      	bhi.n	80035d0 <HAL_Delay+0x28>
  {
  }
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	2000002c 	.word	0x2000002c

080035ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e033      	b.n	800366a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd fff8 	bl	8001600 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b00      	cmp	r3, #0
 8003628:	d118      	bne.n	800365c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003632:	f023 0302 	bic.w	r3, r3, #2
 8003636:	f043 0202 	orr.w	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 faa8 	bl	8003b94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f023 0303 	bic.w	r3, r3, #3
 8003652:	f043 0201 	orr.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
 800365a:	e001      	b.n	8003660 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003668:	7bfb      	ldrb	r3, [r7, #15]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d049      	beq.n	8003748 <HAL_ADC_IRQHandler+0xd6>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d046      	beq.n	8003748 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d12b      	bne.n	8003738 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d127      	bne.n	8003738 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d006      	beq.n	8003704 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003700:	2b00      	cmp	r3, #0
 8003702:	d119      	bne.n	8003738 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0220 	bic.w	r2, r2, #32
 8003712:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f043 0201 	orr.w	r2, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f8db 	bl	80038f4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f06f 0212 	mvn.w	r2, #18
 8003746:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b80      	cmp	r3, #128	; 0x80
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d057      	beq.n	800382a <HAL_ADC_IRQHandler+0x1b8>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d054      	beq.n	800382a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	d105      	bne.n	8003798 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d139      	bne.n	800381a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d006      	beq.n	80037c2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d12b      	bne.n	800381a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d124      	bne.n	800381a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d11d      	bne.n	800381a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d119      	bne.n	800381a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d105      	bne.n	800381a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fab6 	bl	8003d8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 020c 	mvn.w	r2, #12
 8003828:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	bf0c      	ite	eq
 800384e:	2301      	moveq	r3, #1
 8003850:	2300      	movne	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d017      	beq.n	800388c <HAL_ADC_IRQHandler+0x21a>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d014      	beq.n	800388c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d10d      	bne.n	800388c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f843 	bl	8003908 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f06f 0201 	mvn.w	r2, #1
 800388a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b20      	cmp	r3, #32
 8003898:	bf0c      	ite	eq
 800389a:	2301      	moveq	r3, #1
 800389c:	2300      	movne	r3, #0
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038b0:	bf0c      	ite	eq
 80038b2:	2301      	moveq	r3, #1
 80038b4:	2300      	movne	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d015      	beq.n	80038ec <HAL_ADC_IRQHandler+0x27a>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d012      	beq.n	80038ec <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f043 0202 	orr.w	r2, r3, #2
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f06f 0220 	mvn.w	r2, #32
 80038da:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f81d 	bl	800391c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f06f 0220 	mvn.w	r2, #32
 80038ea:	601a      	str	r2, [r3, #0]
  }
}
 80038ec:	bf00      	nop
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_ADC_ConfigChannel+0x1c>
 8003948:	2302      	movs	r3, #2
 800394a:	e113      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x244>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b09      	cmp	r3, #9
 800395a:	d925      	bls.n	80039a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68d9      	ldr	r1, [r3, #12]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	3b1e      	subs	r3, #30
 8003972:	2207      	movs	r2, #7
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43da      	mvns	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	400a      	ands	r2, r1
 8003980:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68d9      	ldr	r1, [r3, #12]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	4618      	mov	r0, r3
 8003994:	4603      	mov	r3, r0
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4403      	add	r3, r0
 800399a:	3b1e      	subs	r3, #30
 800399c:	409a      	lsls	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	e022      	b.n	80039ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6919      	ldr	r1, [r3, #16]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	4613      	mov	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	2207      	movs	r2, #7
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43da      	mvns	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	400a      	ands	r2, r1
 80039ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6919      	ldr	r1, [r3, #16]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4618      	mov	r0, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4403      	add	r3, r0
 80039e4:	409a      	lsls	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b06      	cmp	r3, #6
 80039f4:	d824      	bhi.n	8003a40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	3b05      	subs	r3, #5
 8003a08:	221f      	movs	r2, #31
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	400a      	ands	r2, r1
 8003a16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4618      	mov	r0, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	3b05      	subs	r3, #5
 8003a32:	fa00 f203 	lsl.w	r2, r0, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a3e:	e04c      	b.n	8003ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	d824      	bhi.n	8003a92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	3b23      	subs	r3, #35	; 0x23
 8003a5a:	221f      	movs	r2, #31
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43da      	mvns	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	400a      	ands	r2, r1
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	4618      	mov	r0, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	3b23      	subs	r3, #35	; 0x23
 8003a84:	fa00 f203 	lsl.w	r2, r0, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a90:	e023      	b.n	8003ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3b41      	subs	r3, #65	; 0x41
 8003aa4:	221f      	movs	r2, #31
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	3b41      	subs	r3, #65	; 0x41
 8003ace:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ada:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <HAL_ADC_ConfigChannel+0x250>)
 8003adc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a28      	ldr	r2, [pc, #160]	; (8003b84 <HAL_ADC_ConfigChannel+0x254>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d10f      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x1d8>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b12      	cmp	r3, #18
 8003aee:	d10b      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <HAL_ADC_ConfigChannel+0x254>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d12b      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x23a>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1c      	ldr	r2, [pc, #112]	; (8003b88 <HAL_ADC_ConfigChannel+0x258>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <HAL_ADC_ConfigChannel+0x1f4>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b11      	cmp	r3, #17
 8003b22:	d122      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a11      	ldr	r2, [pc, #68]	; (8003b88 <HAL_ADC_ConfigChannel+0x258>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d111      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <HAL_ADC_ConfigChannel+0x25c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a11      	ldr	r2, [pc, #68]	; (8003b90 <HAL_ADC_ConfigChannel+0x260>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	0c9a      	lsrs	r2, r3, #18
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b5c:	e002      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f9      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40012300 	.word	0x40012300
 8003b84:	40012000 	.word	0x40012000
 8003b88:	10000012 	.word	0x10000012
 8003b8c:	20000024 	.word	0x20000024
 8003b90:	431bde83 	.word	0x431bde83

08003b94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b9c:	4b79      	ldr	r3, [pc, #484]	; (8003d84 <ADC_Init+0x1f0>)
 8003b9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	021a      	lsls	r2, r3, #8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6899      	ldr	r1, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	4a58      	ldr	r2, [pc, #352]	; (8003d88 <ADC_Init+0x1f4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d022      	beq.n	8003c72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6899      	ldr	r1, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6899      	ldr	r1, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	e00f      	b.n	8003c92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0202 	bic.w	r2, r2, #2
 8003ca0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6899      	ldr	r1, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	7e1b      	ldrb	r3, [r3, #24]
 8003cac:	005a      	lsls	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01b      	beq.n	8003cf8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	3b01      	subs	r3, #1
 8003cec:	035a      	lsls	r2, r3, #13
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	e007      	b.n	8003d08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	051a      	lsls	r2, r3, #20
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6899      	ldr	r1, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d4a:	025a      	lsls	r2, r3, #9
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6899      	ldr	r1, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	029a      	lsls	r2, r3, #10
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	40012300 	.word	0x40012300
 8003d88:	0f000001 	.word	0x0f000001

08003d8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd2:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	60d3      	str	r3, [r2, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <__NVIC_GetPriorityGrouping+0x18>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	f003 0307 	and.w	r3, r3, #7
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	db0b      	blt.n	8003e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	4907      	ldr	r1, [pc, #28]	; (8003e3c <__NVIC_EnableIRQ+0x38>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2001      	movs	r0, #1
 8003e26:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000e100 	.word	0xe000e100

08003e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	6039      	str	r1, [r7, #0]
 8003e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	db0a      	blt.n	8003e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	490c      	ldr	r1, [pc, #48]	; (8003e8c <__NVIC_SetPriority+0x4c>)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	440b      	add	r3, r1
 8003e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e68:	e00a      	b.n	8003e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	4908      	ldr	r1, [pc, #32]	; (8003e90 <__NVIC_SetPriority+0x50>)
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	3b04      	subs	r3, #4
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	761a      	strb	r2, [r3, #24]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000e100 	.word	0xe000e100
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f1c3 0307 	rsb	r3, r3, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	bf28      	it	cs
 8003eb2:	2304      	movcs	r3, #4
 8003eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d902      	bls.n	8003ec4 <NVIC_EncodePriority+0x30>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3b03      	subs	r3, #3
 8003ec2:	e000      	b.n	8003ec6 <NVIC_EncodePriority+0x32>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003edc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43d9      	mvns	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eec:	4313      	orrs	r3, r2
         );
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3724      	adds	r7, #36	; 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f0c:	d301      	bcc.n	8003f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e00f      	b.n	8003f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f12:	4a0a      	ldr	r2, [pc, #40]	; (8003f3c <SysTick_Config+0x40>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f1a:	210f      	movs	r1, #15
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	f7ff ff8e 	bl	8003e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <SysTick_Config+0x40>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f2a:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <SysTick_Config+0x40>)
 8003f2c:	2207      	movs	r2, #7
 8003f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	e000e010 	.word	0xe000e010

08003f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff29 	bl	8003da0 <__NVIC_SetPriorityGrouping>
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f68:	f7ff ff3e 	bl	8003de8 <__NVIC_GetPriorityGrouping>
 8003f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7ff ff8e 	bl	8003e94 <NVIC_EncodePriority>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff5d 	bl	8003e40 <__NVIC_SetPriority>
}
 8003f86:	bf00      	nop
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4603      	mov	r3, r0
 8003f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff31 	bl	8003e04 <__NVIC_EnableIRQ>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff ffa2 	bl	8003efc <SysTick_Config>
 8003fb8:	4603      	mov	r3, r0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2280      	movs	r2, #128	; 0x80
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e00c      	b.n	8003ffa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2205      	movs	r2, #5
 8003fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0201 	bic.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004008:	b480      	push	{r7}
 800400a:	b089      	sub	sp, #36	; 0x24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e165      	b.n	80042f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004024:	2201      	movs	r2, #1
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	429a      	cmp	r2, r3
 800403e:	f040 8154 	bne.w	80042ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d00b      	beq.n	8004062 <HAL_GPIO_Init+0x5a>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d007      	beq.n	8004062 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004056:	2b11      	cmp	r3, #17
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b12      	cmp	r3, #18
 8004060:	d130      	bne.n	80040c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004098:	2201      	movs	r2, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 0201 	and.w	r2, r3, #1
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	2203      	movs	r2, #3
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d003      	beq.n	8004104 <HAL_GPIO_Init+0xfc>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b12      	cmp	r3, #18
 8004102:	d123      	bne.n	800414c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	08da      	lsrs	r2, r3, #3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3208      	adds	r2, #8
 800410c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	220f      	movs	r2, #15
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	08da      	lsrs	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3208      	adds	r2, #8
 8004146:	69b9      	ldr	r1, [r7, #24]
 8004148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	2203      	movs	r2, #3
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0203 	and.w	r2, r3, #3
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80ae 	beq.w	80042ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	4b5c      	ldr	r3, [pc, #368]	; (8004304 <HAL_GPIO_Init+0x2fc>)
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	4a5b      	ldr	r2, [pc, #364]	; (8004304 <HAL_GPIO_Init+0x2fc>)
 8004198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800419c:	6453      	str	r3, [r2, #68]	; 0x44
 800419e:	4b59      	ldr	r3, [pc, #356]	; (8004304 <HAL_GPIO_Init+0x2fc>)
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041aa:	4a57      	ldr	r2, [pc, #348]	; (8004308 <HAL_GPIO_Init+0x300>)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	3302      	adds	r3, #2
 80041b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	220f      	movs	r2, #15
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a4e      	ldr	r2, [pc, #312]	; (800430c <HAL_GPIO_Init+0x304>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d025      	beq.n	8004222 <HAL_GPIO_Init+0x21a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a4d      	ldr	r2, [pc, #308]	; (8004310 <HAL_GPIO_Init+0x308>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d01f      	beq.n	800421e <HAL_GPIO_Init+0x216>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a4c      	ldr	r2, [pc, #304]	; (8004314 <HAL_GPIO_Init+0x30c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d019      	beq.n	800421a <HAL_GPIO_Init+0x212>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a4b      	ldr	r2, [pc, #300]	; (8004318 <HAL_GPIO_Init+0x310>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d013      	beq.n	8004216 <HAL_GPIO_Init+0x20e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a4a      	ldr	r2, [pc, #296]	; (800431c <HAL_GPIO_Init+0x314>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00d      	beq.n	8004212 <HAL_GPIO_Init+0x20a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a49      	ldr	r2, [pc, #292]	; (8004320 <HAL_GPIO_Init+0x318>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d007      	beq.n	800420e <HAL_GPIO_Init+0x206>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a48      	ldr	r2, [pc, #288]	; (8004324 <HAL_GPIO_Init+0x31c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <HAL_GPIO_Init+0x202>
 8004206:	2306      	movs	r3, #6
 8004208:	e00c      	b.n	8004224 <HAL_GPIO_Init+0x21c>
 800420a:	2307      	movs	r3, #7
 800420c:	e00a      	b.n	8004224 <HAL_GPIO_Init+0x21c>
 800420e:	2305      	movs	r3, #5
 8004210:	e008      	b.n	8004224 <HAL_GPIO_Init+0x21c>
 8004212:	2304      	movs	r3, #4
 8004214:	e006      	b.n	8004224 <HAL_GPIO_Init+0x21c>
 8004216:	2303      	movs	r3, #3
 8004218:	e004      	b.n	8004224 <HAL_GPIO_Init+0x21c>
 800421a:	2302      	movs	r3, #2
 800421c:	e002      	b.n	8004224 <HAL_GPIO_Init+0x21c>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_GPIO_Init+0x21c>
 8004222:	2300      	movs	r3, #0
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	f002 0203 	and.w	r2, r2, #3
 800422a:	0092      	lsls	r2, r2, #2
 800422c:	4093      	lsls	r3, r2
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004234:	4934      	ldr	r1, [pc, #208]	; (8004308 <HAL_GPIO_Init+0x300>)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	3302      	adds	r3, #2
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004242:	4b39      	ldr	r3, [pc, #228]	; (8004328 <HAL_GPIO_Init+0x320>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004266:	4a30      	ldr	r2, [pc, #192]	; (8004328 <HAL_GPIO_Init+0x320>)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800426c:	4b2e      	ldr	r3, [pc, #184]	; (8004328 <HAL_GPIO_Init+0x320>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004290:	4a25      	ldr	r2, [pc, #148]	; (8004328 <HAL_GPIO_Init+0x320>)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004296:	4b24      	ldr	r3, [pc, #144]	; (8004328 <HAL_GPIO_Init+0x320>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042ba:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <HAL_GPIO_Init+0x320>)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_GPIO_Init+0x320>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042e4:	4a10      	ldr	r2, [pc, #64]	; (8004328 <HAL_GPIO_Init+0x320>)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3301      	adds	r3, #1
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b0f      	cmp	r3, #15
 80042f4:	f67f ae96 	bls.w	8004024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042f8:	bf00      	nop
 80042fa:	3724      	adds	r7, #36	; 0x24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40023800 	.word	0x40023800
 8004308:	40013800 	.word	0x40013800
 800430c:	40020000 	.word	0x40020000
 8004310:	40020400 	.word	0x40020400
 8004314:	40020800 	.word	0x40020800
 8004318:	40020c00 	.word	0x40020c00
 800431c:	40021000 	.word	0x40021000
 8004320:	40021400 	.word	0x40021400
 8004324:	40021800 	.word	0x40021800
 8004328:	40013c00 	.word	0x40013c00

0800432c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
 8004338:	4613      	mov	r3, r2
 800433a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800433c:	787b      	ldrb	r3, [r7, #1]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004348:	e003      	b.n	8004352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800434a:	887b      	ldrh	r3, [r7, #2]
 800434c:	041a      	lsls	r2, r3, #16
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	619a      	str	r2, [r3, #24]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	460b      	mov	r3, r1
 8004368:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	887b      	ldrh	r3, [r7, #2]
 8004370:	401a      	ands	r2, r3
 8004372:	887b      	ldrh	r3, [r7, #2]
 8004374:	429a      	cmp	r2, r3
 8004376:	d104      	bne.n	8004382 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004378:	887b      	ldrh	r3, [r7, #2]
 800437a:	041a      	lsls	r2, r3, #16
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004380:	e002      	b.n	8004388 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004382:	887a      	ldrh	r2, [r7, #2]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	619a      	str	r2, [r3, #24]
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e11f      	b.n	80045e6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fd fbee 	bl	8001b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2224      	movs	r2, #36	; 0x24
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043f8:	f000 f9f6 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 80043fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	4a7b      	ldr	r2, [pc, #492]	; (80045f0 <HAL_I2C_Init+0x25c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d807      	bhi.n	8004418 <HAL_I2C_Init+0x84>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4a7a      	ldr	r2, [pc, #488]	; (80045f4 <HAL_I2C_Init+0x260>)
 800440c:	4293      	cmp	r3, r2
 800440e:	bf94      	ite	ls
 8004410:	2301      	movls	r3, #1
 8004412:	2300      	movhi	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	e006      	b.n	8004426 <HAL_I2C_Init+0x92>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4a77      	ldr	r2, [pc, #476]	; (80045f8 <HAL_I2C_Init+0x264>)
 800441c:	4293      	cmp	r3, r2
 800441e:	bf94      	ite	ls
 8004420:	2301      	movls	r3, #1
 8004422:	2300      	movhi	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e0db      	b.n	80045e6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4a72      	ldr	r2, [pc, #456]	; (80045fc <HAL_I2C_Init+0x268>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	0c9b      	lsrs	r3, r3, #18
 8004438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4a64      	ldr	r2, [pc, #400]	; (80045f0 <HAL_I2C_Init+0x25c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d802      	bhi.n	8004468 <HAL_I2C_Init+0xd4>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	3301      	adds	r3, #1
 8004466:	e009      	b.n	800447c <HAL_I2C_Init+0xe8>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	4a63      	ldr	r2, [pc, #396]	; (8004600 <HAL_I2C_Init+0x26c>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	099b      	lsrs	r3, r3, #6
 800447a:	3301      	adds	r3, #1
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	430b      	orrs	r3, r1
 8004482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800448e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4956      	ldr	r1, [pc, #344]	; (80045f0 <HAL_I2C_Init+0x25c>)
 8004498:	428b      	cmp	r3, r1
 800449a:	d80d      	bhi.n	80044b8 <HAL_I2C_Init+0x124>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1e59      	subs	r1, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80044aa:	3301      	adds	r3, #1
 80044ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	bf38      	it	cc
 80044b4:	2304      	movcc	r3, #4
 80044b6:	e04f      	b.n	8004558 <HAL_I2C_Init+0x1c4>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d111      	bne.n	80044e4 <HAL_I2C_Init+0x150>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1e58      	subs	r0, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6859      	ldr	r1, [r3, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	440b      	add	r3, r1
 80044ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d2:	3301      	adds	r3, #1
 80044d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf0c      	ite	eq
 80044dc:	2301      	moveq	r3, #1
 80044de:	2300      	movne	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	e012      	b.n	800450a <HAL_I2C_Init+0x176>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	1e58      	subs	r0, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	0099      	lsls	r1, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fa:	3301      	adds	r3, #1
 80044fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_I2C_Init+0x17e>
 800450e:	2301      	movs	r3, #1
 8004510:	e022      	b.n	8004558 <HAL_I2C_Init+0x1c4>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10e      	bne.n	8004538 <HAL_I2C_Init+0x1a4>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1e58      	subs	r0, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6859      	ldr	r1, [r3, #4]
 8004522:	460b      	mov	r3, r1
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	440b      	add	r3, r1
 8004528:	fbb0 f3f3 	udiv	r3, r0, r3
 800452c:	3301      	adds	r3, #1
 800452e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004536:	e00f      	b.n	8004558 <HAL_I2C_Init+0x1c4>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1e58      	subs	r0, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6859      	ldr	r1, [r3, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	0099      	lsls	r1, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	fbb0 f3f3 	udiv	r3, r0, r3
 800454e:	3301      	adds	r3, #1
 8004550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	6809      	ldr	r1, [r1, #0]
 800455c:	4313      	orrs	r3, r2
 800455e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69da      	ldr	r2, [r3, #28]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6911      	ldr	r1, [r2, #16]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68d2      	ldr	r2, [r2, #12]
 8004592:	4311      	orrs	r1, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	430b      	orrs	r3, r1
 800459a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	000186a0 	.word	0x000186a0
 80045f4:	001e847f 	.word	0x001e847f
 80045f8:	003d08ff 	.word	0x003d08ff
 80045fc:	431bde83 	.word	0x431bde83
 8004600:	10624dd3 	.word	0x10624dd3

08004604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0cc      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004618:	4b68      	ldr	r3, [pc, #416]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d90c      	bls.n	8004640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004626:	4b65      	ldr	r3, [pc, #404]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800462e:	4b63      	ldr	r3, [pc, #396]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0b8      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d020      	beq.n	800468e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004658:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004670:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a52      	ldr	r2, [pc, #328]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800467a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800467c:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	494d      	ldr	r1, [pc, #308]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d044      	beq.n	8004724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d119      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e07f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d003      	beq.n	80046c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e06f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d2:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e067      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e2:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f023 0203 	bic.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4934      	ldr	r1, [pc, #208]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f4:	f7fe ff4c 	bl	8003590 <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046fc:	f7fe ff48 	bl	8003590 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e04f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 020c 	and.w	r2, r3, #12
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	429a      	cmp	r2, r3
 8004722:	d1eb      	bne.n	80046fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004724:	4b25      	ldr	r3, [pc, #148]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 030f 	and.w	r3, r3, #15
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d20c      	bcs.n	800474c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b22      	ldr	r3, [pc, #136]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e032      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4916      	ldr	r1, [pc, #88]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004776:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	490e      	ldr	r1, [pc, #56]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800478a:	f000 f855 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 800478e:	4601      	mov	r1, r0
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 800479c:	5cd3      	ldrb	r3, [r2, r3]
 800479e:	fa21 f303 	lsr.w	r3, r1, r3
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fe feac 	bl	8003508 <HAL_InitTick>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40023c00 	.word	0x40023c00
 80047c0:	40023800 	.word	0x40023800
 80047c4:	0800a4fc 	.word	0x0800a4fc
 80047c8:	20000024 	.word	0x20000024
 80047cc:	20000028 	.word	0x20000028

080047d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d4:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000024 	.word	0x20000024

080047e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047ec:	f7ff fff0 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 80047f0:	4601      	mov	r1, r0
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	0a9b      	lsrs	r3, r3, #10
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	4a03      	ldr	r2, [pc, #12]	; (800480c <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fe:	5cd3      	ldrb	r3, [r2, r3]
 8004800:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40023800 	.word	0x40023800
 800480c:	0800a50c 	.word	0x0800a50c

08004810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004814:	f7ff ffdc 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 8004818:	4601      	mov	r1, r0
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	0b5b      	lsrs	r3, r3, #13
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4a03      	ldr	r2, [pc, #12]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004826:	5cd3      	ldrb	r3, [r2, r3]
 8004828:	fa21 f303 	lsr.w	r3, r1, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40023800 	.word	0x40023800
 8004834:	0800a50c 	.word	0x0800a50c

08004838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004852:	4bc6      	ldr	r3, [pc, #792]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x334>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	2b0c      	cmp	r3, #12
 800485c:	f200 817e 	bhi.w	8004b5c <HAL_RCC_GetSysClockFreq+0x324>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <HAL_RCC_GetSysClockFreq+0x30>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	0800489d 	.word	0x0800489d
 800486c:	08004b5d 	.word	0x08004b5d
 8004870:	08004b5d 	.word	0x08004b5d
 8004874:	08004b5d 	.word	0x08004b5d
 8004878:	080048a3 	.word	0x080048a3
 800487c:	08004b5d 	.word	0x08004b5d
 8004880:	08004b5d 	.word	0x08004b5d
 8004884:	08004b5d 	.word	0x08004b5d
 8004888:	080048a9 	.word	0x080048a9
 800488c:	08004b5d 	.word	0x08004b5d
 8004890:	08004b5d 	.word	0x08004b5d
 8004894:	08004b5d 	.word	0x08004b5d
 8004898:	08004a05 	.word	0x08004a05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800489c:	4bb4      	ldr	r3, [pc, #720]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x338>)
 800489e:	613b      	str	r3, [r7, #16]
       break;
 80048a0:	e15f      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048a2:	4bb4      	ldr	r3, [pc, #720]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x33c>)
 80048a4:	613b      	str	r3, [r7, #16]
      break;
 80048a6:	e15c      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048a8:	4bb0      	ldr	r3, [pc, #704]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x334>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048b2:	4bae      	ldr	r3, [pc, #696]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x334>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d04a      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048be:	4bab      	ldr	r3, [pc, #684]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x334>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	099b      	lsrs	r3, r3, #6
 80048c4:	f04f 0400 	mov.w	r4, #0
 80048c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	ea03 0501 	and.w	r5, r3, r1
 80048d4:	ea04 0602 	and.w	r6, r4, r2
 80048d8:	4629      	mov	r1, r5
 80048da:	4632      	mov	r2, r6
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	f04f 0400 	mov.w	r4, #0
 80048e4:	0154      	lsls	r4, r2, #5
 80048e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048ea:	014b      	lsls	r3, r1, #5
 80048ec:	4619      	mov	r1, r3
 80048ee:	4622      	mov	r2, r4
 80048f0:	1b49      	subs	r1, r1, r5
 80048f2:	eb62 0206 	sbc.w	r2, r2, r6
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	f04f 0400 	mov.w	r4, #0
 80048fe:	0194      	lsls	r4, r2, #6
 8004900:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004904:	018b      	lsls	r3, r1, #6
 8004906:	1a5b      	subs	r3, r3, r1
 8004908:	eb64 0402 	sbc.w	r4, r4, r2
 800490c:	f04f 0100 	mov.w	r1, #0
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	00e2      	lsls	r2, r4, #3
 8004916:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800491a:	00d9      	lsls	r1, r3, #3
 800491c:	460b      	mov	r3, r1
 800491e:	4614      	mov	r4, r2
 8004920:	195b      	adds	r3, r3, r5
 8004922:	eb44 0406 	adc.w	r4, r4, r6
 8004926:	f04f 0100 	mov.w	r1, #0
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	0262      	lsls	r2, r4, #9
 8004930:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004934:	0259      	lsls	r1, r3, #9
 8004936:	460b      	mov	r3, r1
 8004938:	4614      	mov	r4, r2
 800493a:	4618      	mov	r0, r3
 800493c:	4621      	mov	r1, r4
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f04f 0400 	mov.w	r4, #0
 8004944:	461a      	mov	r2, r3
 8004946:	4623      	mov	r3, r4
 8004948:	f7fc f97e 	bl	8000c48 <__aeabi_uldivmod>
 800494c:	4603      	mov	r3, r0
 800494e:	460c      	mov	r4, r1
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	e049      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004954:	4b85      	ldr	r3, [pc, #532]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x334>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	099b      	lsrs	r3, r3, #6
 800495a:	f04f 0400 	mov.w	r4, #0
 800495e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	ea03 0501 	and.w	r5, r3, r1
 800496a:	ea04 0602 	and.w	r6, r4, r2
 800496e:	4629      	mov	r1, r5
 8004970:	4632      	mov	r2, r6
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	f04f 0400 	mov.w	r4, #0
 800497a:	0154      	lsls	r4, r2, #5
 800497c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004980:	014b      	lsls	r3, r1, #5
 8004982:	4619      	mov	r1, r3
 8004984:	4622      	mov	r2, r4
 8004986:	1b49      	subs	r1, r1, r5
 8004988:	eb62 0206 	sbc.w	r2, r2, r6
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	f04f 0400 	mov.w	r4, #0
 8004994:	0194      	lsls	r4, r2, #6
 8004996:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800499a:	018b      	lsls	r3, r1, #6
 800499c:	1a5b      	subs	r3, r3, r1
 800499e:	eb64 0402 	sbc.w	r4, r4, r2
 80049a2:	f04f 0100 	mov.w	r1, #0
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	00e2      	lsls	r2, r4, #3
 80049ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049b0:	00d9      	lsls	r1, r3, #3
 80049b2:	460b      	mov	r3, r1
 80049b4:	4614      	mov	r4, r2
 80049b6:	195b      	adds	r3, r3, r5
 80049b8:	eb44 0406 	adc.w	r4, r4, r6
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	02a2      	lsls	r2, r4, #10
 80049c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049ca:	0299      	lsls	r1, r3, #10
 80049cc:	460b      	mov	r3, r1
 80049ce:	4614      	mov	r4, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	4621      	mov	r1, r4
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f04f 0400 	mov.w	r4, #0
 80049da:	461a      	mov	r2, r3
 80049dc:	4623      	mov	r3, r4
 80049de:	f7fc f933 	bl	8000c48 <__aeabi_uldivmod>
 80049e2:	4603      	mov	r3, r0
 80049e4:	460c      	mov	r4, r1
 80049e6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049e8:	4b60      	ldr	r3, [pc, #384]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x334>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	0c1b      	lsrs	r3, r3, #16
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	3301      	adds	r3, #1
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	613b      	str	r3, [r7, #16]
      break;
 8004a02:	e0ae      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a04:	4b59      	ldr	r3, [pc, #356]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x334>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a0e:	4b57      	ldr	r3, [pc, #348]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x334>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d04a      	beq.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a1a:	4b54      	ldr	r3, [pc, #336]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x334>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	099b      	lsrs	r3, r3, #6
 8004a20:	f04f 0400 	mov.w	r4, #0
 8004a24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	ea03 0501 	and.w	r5, r3, r1
 8004a30:	ea04 0602 	and.w	r6, r4, r2
 8004a34:	4629      	mov	r1, r5
 8004a36:	4632      	mov	r2, r6
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	f04f 0400 	mov.w	r4, #0
 8004a40:	0154      	lsls	r4, r2, #5
 8004a42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a46:	014b      	lsls	r3, r1, #5
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	1b49      	subs	r1, r1, r5
 8004a4e:	eb62 0206 	sbc.w	r2, r2, r6
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	f04f 0400 	mov.w	r4, #0
 8004a5a:	0194      	lsls	r4, r2, #6
 8004a5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a60:	018b      	lsls	r3, r1, #6
 8004a62:	1a5b      	subs	r3, r3, r1
 8004a64:	eb64 0402 	sbc.w	r4, r4, r2
 8004a68:	f04f 0100 	mov.w	r1, #0
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	00e2      	lsls	r2, r4, #3
 8004a72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a76:	00d9      	lsls	r1, r3, #3
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4614      	mov	r4, r2
 8004a7c:	195b      	adds	r3, r3, r5
 8004a7e:	eb44 0406 	adc.w	r4, r4, r6
 8004a82:	f04f 0100 	mov.w	r1, #0
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	0262      	lsls	r2, r4, #9
 8004a8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a90:	0259      	lsls	r1, r3, #9
 8004a92:	460b      	mov	r3, r1
 8004a94:	4614      	mov	r4, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	4621      	mov	r1, r4
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f04f 0400 	mov.w	r4, #0
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4623      	mov	r3, r4
 8004aa4:	f7fc f8d0 	bl	8000c48 <__aeabi_uldivmod>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	e049      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab0:	4b2e      	ldr	r3, [pc, #184]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x334>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	099b      	lsrs	r3, r3, #6
 8004ab6:	f04f 0400 	mov.w	r4, #0
 8004aba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	ea03 0501 	and.w	r5, r3, r1
 8004ac6:	ea04 0602 	and.w	r6, r4, r2
 8004aca:	4629      	mov	r1, r5
 8004acc:	4632      	mov	r2, r6
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	f04f 0400 	mov.w	r4, #0
 8004ad6:	0154      	lsls	r4, r2, #5
 8004ad8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004adc:	014b      	lsls	r3, r1, #5
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	1b49      	subs	r1, r1, r5
 8004ae4:	eb62 0206 	sbc.w	r2, r2, r6
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	f04f 0400 	mov.w	r4, #0
 8004af0:	0194      	lsls	r4, r2, #6
 8004af2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004af6:	018b      	lsls	r3, r1, #6
 8004af8:	1a5b      	subs	r3, r3, r1
 8004afa:	eb64 0402 	sbc.w	r4, r4, r2
 8004afe:	f04f 0100 	mov.w	r1, #0
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	00e2      	lsls	r2, r4, #3
 8004b08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b0c:	00d9      	lsls	r1, r3, #3
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4614      	mov	r4, r2
 8004b12:	195b      	adds	r3, r3, r5
 8004b14:	eb44 0406 	adc.w	r4, r4, r6
 8004b18:	f04f 0100 	mov.w	r1, #0
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	02a2      	lsls	r2, r4, #10
 8004b22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b26:	0299      	lsls	r1, r3, #10
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4614      	mov	r4, r2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	4621      	mov	r1, r4
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f04f 0400 	mov.w	r4, #0
 8004b36:	461a      	mov	r2, r3
 8004b38:	4623      	mov	r3, r4
 8004b3a:	f7fc f885 	bl	8000c48 <__aeabi_uldivmod>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	460c      	mov	r4, r1
 8004b42:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x334>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	0f1b      	lsrs	r3, r3, #28
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	613b      	str	r3, [r7, #16]
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x338>)
 8004b5e:	613b      	str	r3, [r7, #16]
      break;
 8004b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b62:	693b      	ldr	r3, [r7, #16]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	00f42400 	.word	0x00f42400
 8004b74:	007a1200 	.word	0x007a1200

08004b78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8083 	beq.w	8004c98 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b92:	4b95      	ldr	r3, [pc, #596]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d019      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b9e:	4b92      	ldr	r3, [pc, #584]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d106      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004baa:	4b8f      	ldr	r3, [pc, #572]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb6:	d00c      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bb8:	4b8b      	ldr	r3, [pc, #556]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bc0:	2b0c      	cmp	r3, #12
 8004bc2:	d112      	bne.n	8004bea <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc4:	4b88      	ldr	r3, [pc, #544]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd0:	d10b      	bne.n	8004bea <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd2:	4b85      	ldr	r3, [pc, #532]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d05b      	beq.n	8004c96 <HAL_RCC_OscConfig+0x11e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d157      	bne.n	8004c96 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e216      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCC_OscConfig+0x8a>
 8004bf4:	4b7c      	ldr	r3, [pc, #496]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a7b      	ldr	r2, [pc, #492]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	e01d      	b.n	8004c3e <HAL_RCC_OscConfig+0xc6>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c0a:	d10c      	bne.n	8004c26 <HAL_RCC_OscConfig+0xae>
 8004c0c:	4b76      	ldr	r3, [pc, #472]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a75      	ldr	r2, [pc, #468]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004c12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	4b73      	ldr	r3, [pc, #460]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a72      	ldr	r2, [pc, #456]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	e00b      	b.n	8004c3e <HAL_RCC_OscConfig+0xc6>
 8004c26:	4b70      	ldr	r3, [pc, #448]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a6f      	ldr	r2, [pc, #444]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	4b6d      	ldr	r3, [pc, #436]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a6c      	ldr	r2, [pc, #432]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d013      	beq.n	8004c6e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fe fca3 	bl	8003590 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c4e:	f7fe fc9f 	bl	8003590 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b64      	cmp	r3, #100	; 0x64
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e1db      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c60:	4b61      	ldr	r3, [pc, #388]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0xd6>
 8004c6c:	e014      	b.n	8004c98 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6e:	f7fe fc8f 	bl	8003590 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c76:	f7fe fc8b 	bl	8003590 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b64      	cmp	r3, #100	; 0x64
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e1c7      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c88:	4b57      	ldr	r3, [pc, #348]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f0      	bne.n	8004c76 <HAL_RCC_OscConfig+0xfe>
 8004c94:	e000      	b.n	8004c98 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c96:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d06f      	beq.n	8004d84 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ca4:	4b50      	ldr	r3, [pc, #320]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d017      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cb0:	4b4d      	ldr	r3, [pc, #308]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cbc:	4b4a      	ldr	r3, [pc, #296]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00b      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc8:	4b47      	ldr	r3, [pc, #284]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cd0:	2b0c      	cmp	r3, #12
 8004cd2:	d11c      	bne.n	8004d0e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cd4:	4b44      	ldr	r3, [pc, #272]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d116      	bne.n	8004d0e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce0:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x180>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e18f      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf8:	4b3b      	ldr	r3, [pc, #236]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4938      	ldr	r1, [pc, #224]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d0c:	e03a      	b.n	8004d84 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d020      	beq.n	8004d58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d16:	4b35      	ldr	r3, [pc, #212]	; (8004dec <HAL_RCC_OscConfig+0x274>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fe fc38 	bl	8003590 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d24:	f7fe fc34 	bl	8003590 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e170      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d36:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d42:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4925      	ldr	r1, [pc, #148]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]
 8004d56:	e015      	b.n	8004d84 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d58:	4b24      	ldr	r3, [pc, #144]	; (8004dec <HAL_RCC_OscConfig+0x274>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fe fc17 	bl	8003590 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d66:	f7fe fc13 	bl	8003590 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e14f      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d78:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f0      	bne.n	8004d66 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d037      	beq.n	8004e00 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d016      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d98:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <HAL_RCC_OscConfig+0x278>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fe fbf7 	bl	8003590 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da6:	f7fe fbf3 	bl	8003590 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e12f      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <HAL_RCC_OscConfig+0x270>)
 8004dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x22e>
 8004dc4:	e01c      	b.n	8004e00 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <HAL_RCC_OscConfig+0x278>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dcc:	f7fe fbe0 	bl	8003590 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd2:	e00f      	b.n	8004df4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dd4:	f7fe fbdc 	bl	8003590 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d908      	bls.n	8004df4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e118      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800
 8004dec:	42470000 	.word	0x42470000
 8004df0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df4:	4b8a      	ldr	r3, [pc, #552]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e9      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 8097 	beq.w	8004f3c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e12:	4b83      	ldr	r3, [pc, #524]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10f      	bne.n	8004e3e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	4b7f      	ldr	r3, [pc, #508]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	4a7e      	ldr	r2, [pc, #504]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e2e:	4b7c      	ldr	r3, [pc, #496]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3e:	4b79      	ldr	r3, [pc, #484]	; (8005024 <HAL_RCC_OscConfig+0x4ac>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d118      	bne.n	8004e7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e4a:	4b76      	ldr	r3, [pc, #472]	; (8005024 <HAL_RCC_OscConfig+0x4ac>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a75      	ldr	r2, [pc, #468]	; (8005024 <HAL_RCC_OscConfig+0x4ac>)
 8004e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e56:	f7fe fb9b 	bl	8003590 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5e:	f7fe fb97 	bl	8003590 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e0d3      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e70:	4b6c      	ldr	r3, [pc, #432]	; (8005024 <HAL_RCC_OscConfig+0x4ac>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x31a>
 8004e84:	4b66      	ldr	r3, [pc, #408]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	4a65      	ldr	r2, [pc, #404]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e90:	e01c      	b.n	8004ecc <HAL_RCC_OscConfig+0x354>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2b05      	cmp	r3, #5
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x33c>
 8004e9a:	4b61      	ldr	r3, [pc, #388]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	4a60      	ldr	r2, [pc, #384]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004ea0:	f043 0304 	orr.w	r3, r3, #4
 8004ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea6:	4b5e      	ldr	r3, [pc, #376]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eaa:	4a5d      	ldr	r2, [pc, #372]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb2:	e00b      	b.n	8004ecc <HAL_RCC_OscConfig+0x354>
 8004eb4:	4b5a      	ldr	r3, [pc, #360]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb8:	4a59      	ldr	r2, [pc, #356]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004eba:	f023 0301 	bic.w	r3, r3, #1
 8004ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec0:	4b57      	ldr	r3, [pc, #348]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec4:	4a56      	ldr	r2, [pc, #344]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004ec6:	f023 0304 	bic.w	r3, r3, #4
 8004eca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d015      	beq.n	8004f00 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed4:	f7fe fb5c 	bl	8003590 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eda:	e00a      	b.n	8004ef2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004edc:	f7fe fb58 	bl	8003590 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e092      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef2:	4b4b      	ldr	r3, [pc, #300]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0ee      	beq.n	8004edc <HAL_RCC_OscConfig+0x364>
 8004efe:	e014      	b.n	8004f2a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f00:	f7fe fb46 	bl	8003590 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f06:	e00a      	b.n	8004f1e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f08:	f7fe fb42 	bl	8003590 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e07c      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1e:	4b40      	ldr	r3, [pc, #256]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1ee      	bne.n	8004f08 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d105      	bne.n	8004f3c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f30:	4b3b      	ldr	r3, [pc, #236]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	4a3a      	ldr	r2, [pc, #232]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d068      	beq.n	8005016 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f44:	4b36      	ldr	r3, [pc, #216]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 030c 	and.w	r3, r3, #12
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d060      	beq.n	8005012 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d145      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f58:	4b33      	ldr	r3, [pc, #204]	; (8005028 <HAL_RCC_OscConfig+0x4b0>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5e:	f7fe fb17 	bl	8003590 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f66:	f7fe fb13 	bl	8003590 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e04f      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f78:	4b29      	ldr	r3, [pc, #164]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f0      	bne.n	8004f66 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	019b      	lsls	r3, r3, #6
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	061b      	lsls	r3, r3, #24
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	071b      	lsls	r3, r3, #28
 8004fb0:	491b      	ldr	r1, [pc, #108]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb6:	4b1c      	ldr	r3, [pc, #112]	; (8005028 <HAL_RCC_OscConfig+0x4b0>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fe fae8 	bl	8003590 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc4:	f7fe fae4 	bl	8003590 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e020      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd6:	4b12      	ldr	r3, [pc, #72]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x44c>
 8004fe2:	e018      	b.n	8005016 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe4:	4b10      	ldr	r3, [pc, #64]	; (8005028 <HAL_RCC_OscConfig+0x4b0>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fea:	f7fe fad1 	bl	8003590 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff2:	f7fe facd 	bl	8003590 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e009      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005004:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_RCC_OscConfig+0x4a8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f0      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x47a>
 8005010:	e001      	b.n	8005016 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40023800 	.word	0x40023800
 8005024:	40007000 	.word	0x40007000
 8005028:	42470060 	.word	0x42470060

0800502c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e01d      	b.n	800507a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fe f834 	bl	80030c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3304      	adds	r3, #4
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f000 fac4 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e01d      	b.n	80050d0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f815 	bl	80050d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	4619      	mov	r1, r3
 80050c0:	4610      	mov	r0, r2
 80050c2:	f000 fa99 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2201      	movs	r2, #1
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fd64 	bl	8005bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a15      	ldr	r2, [pc, #84]	; (8005160 <HAL_TIM_PWM_Start+0x74>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_TIM_PWM_Start+0x2c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a14      	ldr	r2, [pc, #80]	; (8005164 <HAL_TIM_PWM_Start+0x78>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d101      	bne.n	800511c <HAL_TIM_PWM_Start+0x30>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <HAL_TIM_PWM_Start+0x32>
 800511c:	2300      	movs	r3, #0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005130:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b06      	cmp	r3, #6
 8005142:	d007      	beq.n	8005154 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40010000 	.word	0x40010000
 8005164:	40010400 	.word	0x40010400

08005168 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e083      	b.n	8005284 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7fd ffb7 	bl	8003104 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ac:	f023 0307 	bic.w	r3, r3, #7
 80051b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4619      	mov	r1, r3
 80051bc:	4610      	mov	r0, r2
 80051be:	f000 fa1b 	bl	80055f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ea:	f023 0303 	bic.w	r3, r3, #3
 80051ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	4313      	orrs	r3, r2
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005208:	f023 030c 	bic.w	r3, r3, #12
 800520c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005214:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	4313      	orrs	r3, r2
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	011a      	lsls	r2, r3, #4
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	031b      	lsls	r3, r3, #12
 8005238:	4313      	orrs	r3, r2
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800524e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	4313      	orrs	r3, r2
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <HAL_TIM_Encoder_Start+0x16>
 800529c:	2b04      	cmp	r3, #4
 800529e:	d008      	beq.n	80052b2 <HAL_TIM_Encoder_Start+0x26>
 80052a0:	e00f      	b.n	80052c2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2201      	movs	r2, #1
 80052a8:	2100      	movs	r1, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fc8e 	bl	8005bcc <TIM_CCxChannelCmd>
      break;
 80052b0:	e016      	b.n	80052e0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	2104      	movs	r1, #4
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fc86 	bl	8005bcc <TIM_CCxChannelCmd>
      break;
 80052c0:	e00e      	b.n	80052e0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2201      	movs	r2, #1
 80052c8:	2100      	movs	r1, #0
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fc7e 	bl	8005bcc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2201      	movs	r2, #1
 80052d6:	2104      	movs	r1, #4
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fc77 	bl	8005bcc <TIM_CCxChannelCmd>
      break;
 80052de:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005312:	2302      	movs	r3, #2
 8005314:	e0b4      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2202      	movs	r2, #2
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b0c      	cmp	r3, #12
 800532a:	f200 809f 	bhi.w	800546c <HAL_TIM_PWM_ConfigChannel+0x170>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005369 	.word	0x08005369
 8005338:	0800546d 	.word	0x0800546d
 800533c:	0800546d 	.word	0x0800546d
 8005340:	0800546d 	.word	0x0800546d
 8005344:	080053a9 	.word	0x080053a9
 8005348:	0800546d 	.word	0x0800546d
 800534c:	0800546d 	.word	0x0800546d
 8005350:	0800546d 	.word	0x0800546d
 8005354:	080053eb 	.word	0x080053eb
 8005358:	0800546d 	.word	0x0800546d
 800535c:	0800546d 	.word	0x0800546d
 8005360:	0800546d 	.word	0x0800546d
 8005364:	0800542b 	.word	0x0800542b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f9e2 	bl	8005738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0208 	orr.w	r2, r2, #8
 8005382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0204 	bic.w	r2, r2, #4
 8005392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6999      	ldr	r1, [r3, #24]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	619a      	str	r2, [r3, #24]
      break;
 80053a6:	e062      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fa32 	bl	8005818 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6999      	ldr	r1, [r3, #24]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	021a      	lsls	r2, r3, #8
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	619a      	str	r2, [r3, #24]
      break;
 80053e8:	e041      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fa87 	bl	8005904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0208 	orr.w	r2, r2, #8
 8005404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0204 	bic.w	r2, r2, #4
 8005414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69d9      	ldr	r1, [r3, #28]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	61da      	str	r2, [r3, #28]
      break;
 8005428:	e021      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68b9      	ldr	r1, [r7, #8]
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fadb 	bl	80059ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69d9      	ldr	r1, [r3, #28]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	021a      	lsls	r2, r3, #8
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	61da      	str	r2, [r3, #28]
      break;
 800546a:	e000      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800546c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_TIM_ConfigClockSource+0x18>
 800549c:	2302      	movs	r3, #2
 800549e:	e0a6      	b.n	80055ee <HAL_TIM_ConfigClockSource+0x166>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d067      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0x120>
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d80b      	bhi.n	80054f4 <HAL_TIM_ConfigClockSource+0x6c>
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d073      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x140>
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	d802      	bhi.n	80054ea <HAL_TIM_ConfigClockSource+0x62>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d06f      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80054e8:	e078      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	d06c      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x140>
 80054ee:	2b30      	cmp	r3, #48	; 0x30
 80054f0:	d06a      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80054f2:	e073      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054f4:	2b70      	cmp	r3, #112	; 0x70
 80054f6:	d00d      	beq.n	8005514 <HAL_TIM_ConfigClockSource+0x8c>
 80054f8:	2b70      	cmp	r3, #112	; 0x70
 80054fa:	d804      	bhi.n	8005506 <HAL_TIM_ConfigClockSource+0x7e>
 80054fc:	2b50      	cmp	r3, #80	; 0x50
 80054fe:	d033      	beq.n	8005568 <HAL_TIM_ConfigClockSource+0xe0>
 8005500:	2b60      	cmp	r3, #96	; 0x60
 8005502:	d041      	beq.n	8005588 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005504:	e06a      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550a:	d066      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x152>
 800550c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005510:	d017      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005512:	e063      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	6899      	ldr	r1, [r3, #8]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f000 fb32 	bl	8005b8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005536:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	609a      	str	r2, [r3, #8]
      break;
 8005540:	e04c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6899      	ldr	r1, [r3, #8]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f000 fb1b 	bl	8005b8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005564:	609a      	str	r2, [r3, #8]
      break;
 8005566:	e039      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	461a      	mov	r2, r3
 8005576:	f000 fa8f 	bl	8005a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2150      	movs	r1, #80	; 0x50
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fae8 	bl	8005b56 <TIM_ITRx_SetConfig>
      break;
 8005586:	e029      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6859      	ldr	r1, [r3, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	461a      	mov	r2, r3
 8005596:	f000 faae 	bl	8005af6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2160      	movs	r1, #96	; 0x60
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fad8 	bl	8005b56 <TIM_ITRx_SetConfig>
      break;
 80055a6:	e019      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	461a      	mov	r2, r3
 80055b6:	f000 fa6f 	bl	8005a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2140      	movs	r1, #64	; 0x40
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fac8 	bl	8005b56 <TIM_ITRx_SetConfig>
      break;
 80055c6:	e009      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 fabf 	bl	8005b56 <TIM_ITRx_SetConfig>
      break;
 80055d8:	e000      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80055da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a40      	ldr	r2, [pc, #256]	; (800570c <TIM_Base_SetConfig+0x114>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d013      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005616:	d00f      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a3d      	ldr	r2, [pc, #244]	; (8005710 <TIM_Base_SetConfig+0x118>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00b      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a3c      	ldr	r2, [pc, #240]	; (8005714 <TIM_Base_SetConfig+0x11c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d007      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a3b      	ldr	r2, [pc, #236]	; (8005718 <TIM_Base_SetConfig+0x120>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a3a      	ldr	r2, [pc, #232]	; (800571c <TIM_Base_SetConfig+0x124>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d108      	bne.n	800564a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2f      	ldr	r2, [pc, #188]	; (800570c <TIM_Base_SetConfig+0x114>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d02b      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005658:	d027      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2c      	ldr	r2, [pc, #176]	; (8005710 <TIM_Base_SetConfig+0x118>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d023      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a2b      	ldr	r2, [pc, #172]	; (8005714 <TIM_Base_SetConfig+0x11c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01f      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <TIM_Base_SetConfig+0x120>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01b      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a29      	ldr	r2, [pc, #164]	; (800571c <TIM_Base_SetConfig+0x124>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d017      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a28      	ldr	r2, [pc, #160]	; (8005720 <TIM_Base_SetConfig+0x128>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a27      	ldr	r2, [pc, #156]	; (8005724 <TIM_Base_SetConfig+0x12c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a26      	ldr	r2, [pc, #152]	; (8005728 <TIM_Base_SetConfig+0x130>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a25      	ldr	r2, [pc, #148]	; (800572c <TIM_Base_SetConfig+0x134>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a24      	ldr	r2, [pc, #144]	; (8005730 <TIM_Base_SetConfig+0x138>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a23      	ldr	r2, [pc, #140]	; (8005734 <TIM_Base_SetConfig+0x13c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a0a      	ldr	r2, [pc, #40]	; (800570c <TIM_Base_SetConfig+0x114>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d003      	beq.n	80056f0 <TIM_Base_SetConfig+0xf8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a0c      	ldr	r2, [pc, #48]	; (800571c <TIM_Base_SetConfig+0x124>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d103      	bne.n	80056f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	615a      	str	r2, [r3, #20]
}
 80056fe:	bf00      	nop
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40010000 	.word	0x40010000
 8005710:	40000400 	.word	0x40000400
 8005714:	40000800 	.word	0x40000800
 8005718:	40000c00 	.word	0x40000c00
 800571c:	40010400 	.word	0x40010400
 8005720:	40014000 	.word	0x40014000
 8005724:	40014400 	.word	0x40014400
 8005728:	40014800 	.word	0x40014800
 800572c:	40001800 	.word	0x40001800
 8005730:	40001c00 	.word	0x40001c00
 8005734:	40002000 	.word	0x40002000

08005738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f023 0201 	bic.w	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0303 	bic.w	r3, r3, #3
 800576e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f023 0302 	bic.w	r3, r3, #2
 8005780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a20      	ldr	r2, [pc, #128]	; (8005810 <TIM_OC1_SetConfig+0xd8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_OC1_SetConfig+0x64>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <TIM_OC1_SetConfig+0xdc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d10c      	bne.n	80057b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0308 	bic.w	r3, r3, #8
 80057a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f023 0304 	bic.w	r3, r3, #4
 80057b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a15      	ldr	r2, [pc, #84]	; (8005810 <TIM_OC1_SetConfig+0xd8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <TIM_OC1_SetConfig+0x8e>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a14      	ldr	r2, [pc, #80]	; (8005814 <TIM_OC1_SetConfig+0xdc>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d111      	bne.n	80057ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	621a      	str	r2, [r3, #32]
}
 8005804:	bf00      	nop
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	40010000 	.word	0x40010000
 8005814:	40010400 	.word	0x40010400

08005818 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f023 0210 	bic.w	r2, r3, #16
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f023 0320 	bic.w	r3, r3, #32
 8005862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a22      	ldr	r2, [pc, #136]	; (80058fc <TIM_OC2_SetConfig+0xe4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC2_SetConfig+0x68>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a21      	ldr	r2, [pc, #132]	; (8005900 <TIM_OC2_SetConfig+0xe8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d10d      	bne.n	800589c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800589a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a17      	ldr	r2, [pc, #92]	; (80058fc <TIM_OC2_SetConfig+0xe4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <TIM_OC2_SetConfig+0x94>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a16      	ldr	r2, [pc, #88]	; (8005900 <TIM_OC2_SetConfig+0xe8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d113      	bne.n	80058d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40010000 	.word	0x40010000
 8005900:	40010400 	.word	0x40010400

08005904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800594c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a21      	ldr	r2, [pc, #132]	; (80059e4 <TIM_OC3_SetConfig+0xe0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d003      	beq.n	800596a <TIM_OC3_SetConfig+0x66>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <TIM_OC3_SetConfig+0xe4>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d10d      	bne.n	8005986 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a16      	ldr	r2, [pc, #88]	; (80059e4 <TIM_OC3_SetConfig+0xe0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d003      	beq.n	8005996 <TIM_OC3_SetConfig+0x92>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <TIM_OC3_SetConfig+0xe4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d113      	bne.n	80059be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800599c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	621a      	str	r2, [r3, #32]
}
 80059d8:	bf00      	nop
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40010400 	.word	0x40010400

080059ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	021b      	lsls	r3, r3, #8
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	031b      	lsls	r3, r3, #12
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a12      	ldr	r2, [pc, #72]	; (8005a90 <TIM_OC4_SetConfig+0xa4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d003      	beq.n	8005a54 <TIM_OC4_SetConfig+0x68>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <TIM_OC4_SetConfig+0xa8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d109      	bne.n	8005a68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	019b      	lsls	r3, r3, #6
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	621a      	str	r2, [r3, #32]
}
 8005a82:	bf00      	nop
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40010400 	.word	0x40010400

08005a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0201 	bic.w	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f023 030a 	bic.w	r3, r3, #10
 8005ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	621a      	str	r2, [r3, #32]
}
 8005aea:	bf00      	nop
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b087      	sub	sp, #28
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f023 0210 	bic.w	r2, r3, #16
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	031b      	lsls	r3, r3, #12
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	621a      	str	r2, [r3, #32]
}
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f043 0307 	orr.w	r3, r3, #7
 8005b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	609a      	str	r2, [r3, #8]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	021a      	lsls	r2, r3, #8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	609a      	str	r2, [r3, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	2201      	movs	r2, #1
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1a      	ldr	r2, [r3, #32]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	401a      	ands	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a1a      	ldr	r2, [r3, #32]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	fa01 f303 	lsl.w	r3, r1, r3
 8005c04:	431a      	orrs	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
	...

08005c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e05a      	b.n	8005ce6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a21      	ldr	r2, [pc, #132]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d022      	beq.n	8005cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7c:	d01d      	beq.n	8005cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1d      	ldr	r2, [pc, #116]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d018      	beq.n	8005cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d013      	beq.n	8005cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1a      	ldr	r2, [pc, #104]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00e      	beq.n	8005cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a18      	ldr	r2, [pc, #96]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d009      	beq.n	8005cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d004      	beq.n	8005cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a15      	ldr	r2, [pc, #84]	; (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d10c      	bne.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800
 8005d00:	40000c00 	.word	0x40000c00
 8005d04:	40010400 	.word	0x40010400
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40001800 	.word	0x40001800

08005d10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e03d      	b.n	8005da8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e03f      	b.n	8005e46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fd fa9a 	bl	8003314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2224      	movs	r2, #36	; 0x24
 8005de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fb97 	bl	800652c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695a      	ldr	r2, [r3, #20]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b088      	sub	sp, #32
 8005e52:	af02      	add	r7, sp, #8
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	603b      	str	r3, [r7, #0]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	f040 8083 	bne.w	8005f76 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_UART_Transmit+0x2e>
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e07b      	b.n	8005f78 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_UART_Transmit+0x40>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e074      	b.n	8005f78 <HAL_UART_Transmit+0x12a>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2221      	movs	r2, #33	; 0x21
 8005ea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ea4:	f7fd fb74 	bl	8003590 <HAL_GetTick>
 8005ea8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	88fa      	ldrh	r2, [r7, #6]
 8005eae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005ebe:	e042      	b.n	8005f46 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed6:	d122      	bne.n	8005f1e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2180      	movs	r1, #128	; 0x80
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f9b6 	bl	8006254 <UART_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e042      	b.n	8005f78 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f04:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	3302      	adds	r3, #2
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	e017      	b.n	8005f46 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	e013      	b.n	8005f46 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	2180      	movs	r1, #128	; 0x80
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 f993 	bl	8006254 <UART_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e01f      	b.n	8005f78 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	60ba      	str	r2, [r7, #8]
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1b7      	bne.n	8005ec0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2200      	movs	r2, #0
 8005f58:	2140      	movs	r1, #64	; 0x40
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f97a 	bl	8006254 <UART_WaitOnFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e006      	b.n	8005f78 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	e000      	b.n	8005f78 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005f76:	2302      	movs	r3, #2
  }
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d140      	bne.n	800601c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <HAL_UART_Receive_IT+0x26>
 8005fa0:	88fb      	ldrh	r3, [r7, #6]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e039      	b.n	800601e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_UART_Receive_IT+0x38>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e032      	b.n	800601e <HAL_UART_Receive_IT+0x9e>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	88fa      	ldrh	r2, [r7, #6]
 8005fca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2222      	movs	r2, #34	; 0x22
 8005fdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695a      	ldr	r2, [r3, #20]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0220 	orr.w	r2, r2, #32
 8006016:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e000      	b.n	800601e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800604c:	2300      	movs	r3, #0
 800604e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10d      	bne.n	800607e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b00      	cmp	r3, #0
 800606a:	d008      	beq.n	800607e <HAL_UART_IRQHandler+0x52>
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f9d6 	bl	8006428 <UART_Receive_IT>
      return;
 800607c:	e0d1      	b.n	8006222 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 80b0 	beq.w	80061e6 <HAL_UART_IRQHandler+0x1ba>
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <HAL_UART_IRQHandler+0x70>
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 80a5 	beq.w	80061e6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_UART_IRQHandler+0x90>
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b4:	f043 0201 	orr.w	r2, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <HAL_UART_IRQHandler+0xb0>
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d4:	f043 0202 	orr.w	r2, r3, #2
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <HAL_UART_IRQHandler+0xd0>
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	f043 0204 	orr.w	r2, r3, #4
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00f      	beq.n	8006126 <HAL_UART_IRQHandler+0xfa>
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d104      	bne.n	800611a <HAL_UART_IRQHandler+0xee>
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	f043 0208 	orr.w	r2, r3, #8
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d078      	beq.n	8006220 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HAL_UART_IRQHandler+0x11c>
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f970 	bl	8006428 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	bf0c      	ite	eq
 8006156:	2301      	moveq	r3, #1
 8006158:	2300      	movne	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d102      	bne.n	8006170 <HAL_UART_IRQHandler+0x144>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d031      	beq.n	80061d4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8b9 	bl	80062e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	d123      	bne.n	80061cc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695a      	ldr	r2, [r3, #20]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006192:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006198:	2b00      	cmp	r3, #0
 800619a:	d013      	beq.n	80061c4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a0:	4a21      	ldr	r2, [pc, #132]	; (8006228 <HAL_UART_IRQHandler+0x1fc>)
 80061a2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fd ff0a 	bl	8003fc2 <HAL_DMA_Abort_IT>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d016      	beq.n	80061e2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061be:	4610      	mov	r0, r2
 80061c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c2:	e00e      	b.n	80061e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f83b 	bl	8006240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ca:	e00a      	b.n	80061e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f837 	bl	8006240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d2:	e006      	b.n	80061e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f833 	bl	8006240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80061e0:	e01e      	b.n	8006220 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e2:	bf00      	nop
    return;
 80061e4:	e01c      	b.n	8006220 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d008      	beq.n	8006202 <HAL_UART_IRQHandler+0x1d6>
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f8a6 	bl	800634c <UART_Transmit_IT>
    return;
 8006200:	e00f      	b.n	8006222 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <HAL_UART_IRQHandler+0x1f6>
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f8ee 	bl	80063f8 <UART_EndTransmit_IT>
    return;
 800621c:	bf00      	nop
 800621e:	e000      	b.n	8006222 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006220:	bf00      	nop
  }
}
 8006222:	3720      	adds	r7, #32
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	08006325 	.word	0x08006325

0800622c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	4613      	mov	r3, r2
 8006262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006264:	e02c      	b.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d028      	beq.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d007      	beq.n	8006284 <UART_WaitOnFlagUntilTimeout+0x30>
 8006274:	f7fd f98c 	bl	8003590 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	429a      	cmp	r2, r3
 8006282:	d21d      	bcs.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006292:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695a      	ldr	r2, [r3, #20]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0201 	bic.w	r2, r2, #1
 80062a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e00f      	b.n	80062e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4013      	ands	r3, r2
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bf0c      	ite	eq
 80062d0:	2301      	moveq	r3, #1
 80062d2:	2300      	movne	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d0c3      	beq.n	8006266 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695a      	ldr	r2, [r3, #20]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff ff7e 	bl	8006240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006344:	bf00      	nop
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b21      	cmp	r3, #33	; 0x21
 800635e:	d144      	bne.n	80063ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006368:	d11a      	bne.n	80063a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800637e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d105      	bne.n	8006394 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	1c9a      	adds	r2, r3, #2
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	621a      	str	r2, [r3, #32]
 8006392:	e00e      	b.n	80063b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	621a      	str	r2, [r3, #32]
 800639e:	e008      	b.n	80063b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	1c59      	adds	r1, r3, #1
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6211      	str	r1, [r2, #32]
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	4619      	mov	r1, r3
 80063c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10f      	bne.n	80063e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e000      	b.n	80063ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800640e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff ff07 	bl	800622c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b22      	cmp	r3, #34	; 0x22
 800643a:	d171      	bne.n	8006520 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006444:	d123      	bne.n	800648e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10e      	bne.n	8006472 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	b29b      	uxth	r3, r3
 800645c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	1c9a      	adds	r2, r3, #2
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	629a      	str	r2, [r3, #40]	; 0x28
 8006470:	e029      	b.n	80064c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	b29b      	uxth	r3, r3
 800647a:	b2db      	uxtb	r3, r3
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	629a      	str	r2, [r3, #40]	; 0x28
 800648c:	e01b      	b.n	80064c6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6858      	ldr	r0, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a0:	1c59      	adds	r1, r3, #1
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6291      	str	r1, [r2, #40]	; 0x28
 80064a6:	b2c2      	uxtb	r2, r0
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	e00c      	b.n	80064c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	1c58      	adds	r0, r3, #1
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	6288      	str	r0, [r1, #40]	; 0x28
 80064be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4619      	mov	r1, r3
 80064d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d120      	bne.n	800651c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0220 	bic.w	r2, r2, #32
 80064e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695a      	ldr	r2, [r3, #20]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0201 	bic.w	r2, r2, #1
 8006508:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fb fb8a 	bl	8001c2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	e002      	b.n	8006522 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	e000      	b.n	8006522 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006520:	2302      	movs	r3, #2
  }
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800652c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	4313      	orrs	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800656e:	f023 030c 	bic.w	r3, r3, #12
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	430b      	orrs	r3, r1
 800657a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800659a:	f040 818b 	bne.w	80068b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4ac1      	ldr	r2, [pc, #772]	; (80068a8 <UART_SetConfig+0x37c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d005      	beq.n	80065b4 <UART_SetConfig+0x88>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4abf      	ldr	r2, [pc, #764]	; (80068ac <UART_SetConfig+0x380>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	f040 80bd 	bne.w	800672e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065b4:	f7fe f92c 	bl	8004810 <HAL_RCC_GetPCLK2Freq>
 80065b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	461d      	mov	r5, r3
 80065be:	f04f 0600 	mov.w	r6, #0
 80065c2:	46a8      	mov	r8, r5
 80065c4:	46b1      	mov	r9, r6
 80065c6:	eb18 0308 	adds.w	r3, r8, r8
 80065ca:	eb49 0409 	adc.w	r4, r9, r9
 80065ce:	4698      	mov	r8, r3
 80065d0:	46a1      	mov	r9, r4
 80065d2:	eb18 0805 	adds.w	r8, r8, r5
 80065d6:	eb49 0906 	adc.w	r9, r9, r6
 80065da:	f04f 0100 	mov.w	r1, #0
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065ee:	4688      	mov	r8, r1
 80065f0:	4691      	mov	r9, r2
 80065f2:	eb18 0005 	adds.w	r0, r8, r5
 80065f6:	eb49 0106 	adc.w	r1, r9, r6
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	461d      	mov	r5, r3
 8006600:	f04f 0600 	mov.w	r6, #0
 8006604:	196b      	adds	r3, r5, r5
 8006606:	eb46 0406 	adc.w	r4, r6, r6
 800660a:	461a      	mov	r2, r3
 800660c:	4623      	mov	r3, r4
 800660e:	f7fa fb1b 	bl	8000c48 <__aeabi_uldivmod>
 8006612:	4603      	mov	r3, r0
 8006614:	460c      	mov	r4, r1
 8006616:	461a      	mov	r2, r3
 8006618:	4ba5      	ldr	r3, [pc, #660]	; (80068b0 <UART_SetConfig+0x384>)
 800661a:	fba3 2302 	umull	r2, r3, r3, r2
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	461d      	mov	r5, r3
 8006628:	f04f 0600 	mov.w	r6, #0
 800662c:	46a9      	mov	r9, r5
 800662e:	46b2      	mov	sl, r6
 8006630:	eb19 0309 	adds.w	r3, r9, r9
 8006634:	eb4a 040a 	adc.w	r4, sl, sl
 8006638:	4699      	mov	r9, r3
 800663a:	46a2      	mov	sl, r4
 800663c:	eb19 0905 	adds.w	r9, r9, r5
 8006640:	eb4a 0a06 	adc.w	sl, sl, r6
 8006644:	f04f 0100 	mov.w	r1, #0
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006650:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006654:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006658:	4689      	mov	r9, r1
 800665a:	4692      	mov	sl, r2
 800665c:	eb19 0005 	adds.w	r0, r9, r5
 8006660:	eb4a 0106 	adc.w	r1, sl, r6
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	461d      	mov	r5, r3
 800666a:	f04f 0600 	mov.w	r6, #0
 800666e:	196b      	adds	r3, r5, r5
 8006670:	eb46 0406 	adc.w	r4, r6, r6
 8006674:	461a      	mov	r2, r3
 8006676:	4623      	mov	r3, r4
 8006678:	f7fa fae6 	bl	8000c48 <__aeabi_uldivmod>
 800667c:	4603      	mov	r3, r0
 800667e:	460c      	mov	r4, r1
 8006680:	461a      	mov	r2, r3
 8006682:	4b8b      	ldr	r3, [pc, #556]	; (80068b0 <UART_SetConfig+0x384>)
 8006684:	fba3 1302 	umull	r1, r3, r3, r2
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	2164      	movs	r1, #100	; 0x64
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	3332      	adds	r3, #50	; 0x32
 8006696:	4a86      	ldr	r2, [pc, #536]	; (80068b0 <UART_SetConfig+0x384>)
 8006698:	fba2 2303 	umull	r2, r3, r2, r3
 800669c:	095b      	lsrs	r3, r3, #5
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066a4:	4498      	add	r8, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	461d      	mov	r5, r3
 80066aa:	f04f 0600 	mov.w	r6, #0
 80066ae:	46a9      	mov	r9, r5
 80066b0:	46b2      	mov	sl, r6
 80066b2:	eb19 0309 	adds.w	r3, r9, r9
 80066b6:	eb4a 040a 	adc.w	r4, sl, sl
 80066ba:	4699      	mov	r9, r3
 80066bc:	46a2      	mov	sl, r4
 80066be:	eb19 0905 	adds.w	r9, r9, r5
 80066c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80066c6:	f04f 0100 	mov.w	r1, #0
 80066ca:	f04f 0200 	mov.w	r2, #0
 80066ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066da:	4689      	mov	r9, r1
 80066dc:	4692      	mov	sl, r2
 80066de:	eb19 0005 	adds.w	r0, r9, r5
 80066e2:	eb4a 0106 	adc.w	r1, sl, r6
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	461d      	mov	r5, r3
 80066ec:	f04f 0600 	mov.w	r6, #0
 80066f0:	196b      	adds	r3, r5, r5
 80066f2:	eb46 0406 	adc.w	r4, r6, r6
 80066f6:	461a      	mov	r2, r3
 80066f8:	4623      	mov	r3, r4
 80066fa:	f7fa faa5 	bl	8000c48 <__aeabi_uldivmod>
 80066fe:	4603      	mov	r3, r0
 8006700:	460c      	mov	r4, r1
 8006702:	461a      	mov	r2, r3
 8006704:	4b6a      	ldr	r3, [pc, #424]	; (80068b0 <UART_SetConfig+0x384>)
 8006706:	fba3 1302 	umull	r1, r3, r3, r2
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	2164      	movs	r1, #100	; 0x64
 800670e:	fb01 f303 	mul.w	r3, r1, r3
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	3332      	adds	r3, #50	; 0x32
 8006718:	4a65      	ldr	r2, [pc, #404]	; (80068b0 <UART_SetConfig+0x384>)
 800671a:	fba2 2303 	umull	r2, r3, r2, r3
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	f003 0207 	and.w	r2, r3, #7
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4442      	add	r2, r8
 800672a:	609a      	str	r2, [r3, #8]
 800672c:	e26f      	b.n	8006c0e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800672e:	f7fe f85b 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8006732:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	461d      	mov	r5, r3
 8006738:	f04f 0600 	mov.w	r6, #0
 800673c:	46a8      	mov	r8, r5
 800673e:	46b1      	mov	r9, r6
 8006740:	eb18 0308 	adds.w	r3, r8, r8
 8006744:	eb49 0409 	adc.w	r4, r9, r9
 8006748:	4698      	mov	r8, r3
 800674a:	46a1      	mov	r9, r4
 800674c:	eb18 0805 	adds.w	r8, r8, r5
 8006750:	eb49 0906 	adc.w	r9, r9, r6
 8006754:	f04f 0100 	mov.w	r1, #0
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006760:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006764:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006768:	4688      	mov	r8, r1
 800676a:	4691      	mov	r9, r2
 800676c:	eb18 0005 	adds.w	r0, r8, r5
 8006770:	eb49 0106 	adc.w	r1, r9, r6
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	461d      	mov	r5, r3
 800677a:	f04f 0600 	mov.w	r6, #0
 800677e:	196b      	adds	r3, r5, r5
 8006780:	eb46 0406 	adc.w	r4, r6, r6
 8006784:	461a      	mov	r2, r3
 8006786:	4623      	mov	r3, r4
 8006788:	f7fa fa5e 	bl	8000c48 <__aeabi_uldivmod>
 800678c:	4603      	mov	r3, r0
 800678e:	460c      	mov	r4, r1
 8006790:	461a      	mov	r2, r3
 8006792:	4b47      	ldr	r3, [pc, #284]	; (80068b0 <UART_SetConfig+0x384>)
 8006794:	fba3 2302 	umull	r2, r3, r3, r2
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	461d      	mov	r5, r3
 80067a2:	f04f 0600 	mov.w	r6, #0
 80067a6:	46a9      	mov	r9, r5
 80067a8:	46b2      	mov	sl, r6
 80067aa:	eb19 0309 	adds.w	r3, r9, r9
 80067ae:	eb4a 040a 	adc.w	r4, sl, sl
 80067b2:	4699      	mov	r9, r3
 80067b4:	46a2      	mov	sl, r4
 80067b6:	eb19 0905 	adds.w	r9, r9, r5
 80067ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80067be:	f04f 0100 	mov.w	r1, #0
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067d2:	4689      	mov	r9, r1
 80067d4:	4692      	mov	sl, r2
 80067d6:	eb19 0005 	adds.w	r0, r9, r5
 80067da:	eb4a 0106 	adc.w	r1, sl, r6
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	461d      	mov	r5, r3
 80067e4:	f04f 0600 	mov.w	r6, #0
 80067e8:	196b      	adds	r3, r5, r5
 80067ea:	eb46 0406 	adc.w	r4, r6, r6
 80067ee:	461a      	mov	r2, r3
 80067f0:	4623      	mov	r3, r4
 80067f2:	f7fa fa29 	bl	8000c48 <__aeabi_uldivmod>
 80067f6:	4603      	mov	r3, r0
 80067f8:	460c      	mov	r4, r1
 80067fa:	461a      	mov	r2, r3
 80067fc:	4b2c      	ldr	r3, [pc, #176]	; (80068b0 <UART_SetConfig+0x384>)
 80067fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	2164      	movs	r1, #100	; 0x64
 8006806:	fb01 f303 	mul.w	r3, r1, r3
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	3332      	adds	r3, #50	; 0x32
 8006810:	4a27      	ldr	r2, [pc, #156]	; (80068b0 <UART_SetConfig+0x384>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800681e:	4498      	add	r8, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	461d      	mov	r5, r3
 8006824:	f04f 0600 	mov.w	r6, #0
 8006828:	46a9      	mov	r9, r5
 800682a:	46b2      	mov	sl, r6
 800682c:	eb19 0309 	adds.w	r3, r9, r9
 8006830:	eb4a 040a 	adc.w	r4, sl, sl
 8006834:	4699      	mov	r9, r3
 8006836:	46a2      	mov	sl, r4
 8006838:	eb19 0905 	adds.w	r9, r9, r5
 800683c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006840:	f04f 0100 	mov.w	r1, #0
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800684c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006850:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006854:	4689      	mov	r9, r1
 8006856:	4692      	mov	sl, r2
 8006858:	eb19 0005 	adds.w	r0, r9, r5
 800685c:	eb4a 0106 	adc.w	r1, sl, r6
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	461d      	mov	r5, r3
 8006866:	f04f 0600 	mov.w	r6, #0
 800686a:	196b      	adds	r3, r5, r5
 800686c:	eb46 0406 	adc.w	r4, r6, r6
 8006870:	461a      	mov	r2, r3
 8006872:	4623      	mov	r3, r4
 8006874:	f7fa f9e8 	bl	8000c48 <__aeabi_uldivmod>
 8006878:	4603      	mov	r3, r0
 800687a:	460c      	mov	r4, r1
 800687c:	461a      	mov	r2, r3
 800687e:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <UART_SetConfig+0x384>)
 8006880:	fba3 1302 	umull	r1, r3, r3, r2
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	2164      	movs	r1, #100	; 0x64
 8006888:	fb01 f303 	mul.w	r3, r1, r3
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	3332      	adds	r3, #50	; 0x32
 8006892:	4a07      	ldr	r2, [pc, #28]	; (80068b0 <UART_SetConfig+0x384>)
 8006894:	fba2 2303 	umull	r2, r3, r2, r3
 8006898:	095b      	lsrs	r3, r3, #5
 800689a:	f003 0207 	and.w	r2, r3, #7
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4442      	add	r2, r8
 80068a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80068a6:	e1b2      	b.n	8006c0e <UART_SetConfig+0x6e2>
 80068a8:	40011000 	.word	0x40011000
 80068ac:	40011400 	.word	0x40011400
 80068b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4ad7      	ldr	r2, [pc, #860]	; (8006c18 <UART_SetConfig+0x6ec>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d005      	beq.n	80068ca <UART_SetConfig+0x39e>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4ad6      	ldr	r2, [pc, #856]	; (8006c1c <UART_SetConfig+0x6f0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	f040 80d1 	bne.w	8006a6c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80068ca:	f7fd ffa1 	bl	8004810 <HAL_RCC_GetPCLK2Freq>
 80068ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	469a      	mov	sl, r3
 80068d4:	f04f 0b00 	mov.w	fp, #0
 80068d8:	46d0      	mov	r8, sl
 80068da:	46d9      	mov	r9, fp
 80068dc:	eb18 0308 	adds.w	r3, r8, r8
 80068e0:	eb49 0409 	adc.w	r4, r9, r9
 80068e4:	4698      	mov	r8, r3
 80068e6:	46a1      	mov	r9, r4
 80068e8:	eb18 080a 	adds.w	r8, r8, sl
 80068ec:	eb49 090b 	adc.w	r9, r9, fp
 80068f0:	f04f 0100 	mov.w	r1, #0
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006900:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006904:	4688      	mov	r8, r1
 8006906:	4691      	mov	r9, r2
 8006908:	eb1a 0508 	adds.w	r5, sl, r8
 800690c:	eb4b 0609 	adc.w	r6, fp, r9
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	4619      	mov	r1, r3
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	f04f 0400 	mov.w	r4, #0
 8006922:	0094      	lsls	r4, r2, #2
 8006924:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006928:	008b      	lsls	r3, r1, #2
 800692a:	461a      	mov	r2, r3
 800692c:	4623      	mov	r3, r4
 800692e:	4628      	mov	r0, r5
 8006930:	4631      	mov	r1, r6
 8006932:	f7fa f989 	bl	8000c48 <__aeabi_uldivmod>
 8006936:	4603      	mov	r3, r0
 8006938:	460c      	mov	r4, r1
 800693a:	461a      	mov	r2, r3
 800693c:	4bb8      	ldr	r3, [pc, #736]	; (8006c20 <UART_SetConfig+0x6f4>)
 800693e:	fba3 2302 	umull	r2, r3, r3, r2
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	469b      	mov	fp, r3
 800694c:	f04f 0c00 	mov.w	ip, #0
 8006950:	46d9      	mov	r9, fp
 8006952:	46e2      	mov	sl, ip
 8006954:	eb19 0309 	adds.w	r3, r9, r9
 8006958:	eb4a 040a 	adc.w	r4, sl, sl
 800695c:	4699      	mov	r9, r3
 800695e:	46a2      	mov	sl, r4
 8006960:	eb19 090b 	adds.w	r9, r9, fp
 8006964:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006968:	f04f 0100 	mov.w	r1, #0
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006974:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006978:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800697c:	4689      	mov	r9, r1
 800697e:	4692      	mov	sl, r2
 8006980:	eb1b 0509 	adds.w	r5, fp, r9
 8006984:	eb4c 060a 	adc.w	r6, ip, sl
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	4619      	mov	r1, r3
 800698e:	f04f 0200 	mov.w	r2, #0
 8006992:	f04f 0300 	mov.w	r3, #0
 8006996:	f04f 0400 	mov.w	r4, #0
 800699a:	0094      	lsls	r4, r2, #2
 800699c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069a0:	008b      	lsls	r3, r1, #2
 80069a2:	461a      	mov	r2, r3
 80069a4:	4623      	mov	r3, r4
 80069a6:	4628      	mov	r0, r5
 80069a8:	4631      	mov	r1, r6
 80069aa:	f7fa f94d 	bl	8000c48 <__aeabi_uldivmod>
 80069ae:	4603      	mov	r3, r0
 80069b0:	460c      	mov	r4, r1
 80069b2:	461a      	mov	r2, r3
 80069b4:	4b9a      	ldr	r3, [pc, #616]	; (8006c20 <UART_SetConfig+0x6f4>)
 80069b6:	fba3 1302 	umull	r1, r3, r3, r2
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	2164      	movs	r1, #100	; 0x64
 80069be:	fb01 f303 	mul.w	r3, r1, r3
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	3332      	adds	r3, #50	; 0x32
 80069c8:	4a95      	ldr	r2, [pc, #596]	; (8006c20 <UART_SetConfig+0x6f4>)
 80069ca:	fba2 2303 	umull	r2, r3, r2, r3
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069d4:	4498      	add	r8, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	469b      	mov	fp, r3
 80069da:	f04f 0c00 	mov.w	ip, #0
 80069de:	46d9      	mov	r9, fp
 80069e0:	46e2      	mov	sl, ip
 80069e2:	eb19 0309 	adds.w	r3, r9, r9
 80069e6:	eb4a 040a 	adc.w	r4, sl, sl
 80069ea:	4699      	mov	r9, r3
 80069ec:	46a2      	mov	sl, r4
 80069ee:	eb19 090b 	adds.w	r9, r9, fp
 80069f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069f6:	f04f 0100 	mov.w	r1, #0
 80069fa:	f04f 0200 	mov.w	r2, #0
 80069fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a0a:	4689      	mov	r9, r1
 8006a0c:	4692      	mov	sl, r2
 8006a0e:	eb1b 0509 	adds.w	r5, fp, r9
 8006a12:	eb4c 060a 	adc.w	r6, ip, sl
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	f04f 0400 	mov.w	r4, #0
 8006a28:	0094      	lsls	r4, r2, #2
 8006a2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a2e:	008b      	lsls	r3, r1, #2
 8006a30:	461a      	mov	r2, r3
 8006a32:	4623      	mov	r3, r4
 8006a34:	4628      	mov	r0, r5
 8006a36:	4631      	mov	r1, r6
 8006a38:	f7fa f906 	bl	8000c48 <__aeabi_uldivmod>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	461a      	mov	r2, r3
 8006a42:	4b77      	ldr	r3, [pc, #476]	; (8006c20 <UART_SetConfig+0x6f4>)
 8006a44:	fba3 1302 	umull	r1, r3, r3, r2
 8006a48:	095b      	lsrs	r3, r3, #5
 8006a4a:	2164      	movs	r1, #100	; 0x64
 8006a4c:	fb01 f303 	mul.w	r3, r1, r3
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	3332      	adds	r3, #50	; 0x32
 8006a56:	4a72      	ldr	r2, [pc, #456]	; (8006c20 <UART_SetConfig+0x6f4>)
 8006a58:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5c:	095b      	lsrs	r3, r3, #5
 8006a5e:	f003 020f 	and.w	r2, r3, #15
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4442      	add	r2, r8
 8006a68:	609a      	str	r2, [r3, #8]
 8006a6a:	e0d0      	b.n	8006c0e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a6c:	f7fd febc 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8006a70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	469a      	mov	sl, r3
 8006a76:	f04f 0b00 	mov.w	fp, #0
 8006a7a:	46d0      	mov	r8, sl
 8006a7c:	46d9      	mov	r9, fp
 8006a7e:	eb18 0308 	adds.w	r3, r8, r8
 8006a82:	eb49 0409 	adc.w	r4, r9, r9
 8006a86:	4698      	mov	r8, r3
 8006a88:	46a1      	mov	r9, r4
 8006a8a:	eb18 080a 	adds.w	r8, r8, sl
 8006a8e:	eb49 090b 	adc.w	r9, r9, fp
 8006a92:	f04f 0100 	mov.w	r1, #0
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006aa2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006aa6:	4688      	mov	r8, r1
 8006aa8:	4691      	mov	r9, r2
 8006aaa:	eb1a 0508 	adds.w	r5, sl, r8
 8006aae:	eb4b 0609 	adc.w	r6, fp, r9
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	f04f 0400 	mov.w	r4, #0
 8006ac4:	0094      	lsls	r4, r2, #2
 8006ac6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006aca:	008b      	lsls	r3, r1, #2
 8006acc:	461a      	mov	r2, r3
 8006ace:	4623      	mov	r3, r4
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	f7fa f8b8 	bl	8000c48 <__aeabi_uldivmod>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	460c      	mov	r4, r1
 8006adc:	461a      	mov	r2, r3
 8006ade:	4b50      	ldr	r3, [pc, #320]	; (8006c20 <UART_SetConfig+0x6f4>)
 8006ae0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ae4:	095b      	lsrs	r3, r3, #5
 8006ae6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	469b      	mov	fp, r3
 8006aee:	f04f 0c00 	mov.w	ip, #0
 8006af2:	46d9      	mov	r9, fp
 8006af4:	46e2      	mov	sl, ip
 8006af6:	eb19 0309 	adds.w	r3, r9, r9
 8006afa:	eb4a 040a 	adc.w	r4, sl, sl
 8006afe:	4699      	mov	r9, r3
 8006b00:	46a2      	mov	sl, r4
 8006b02:	eb19 090b 	adds.w	r9, r9, fp
 8006b06:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b0a:	f04f 0100 	mov.w	r1, #0
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b1e:	4689      	mov	r9, r1
 8006b20:	4692      	mov	sl, r2
 8006b22:	eb1b 0509 	adds.w	r5, fp, r9
 8006b26:	eb4c 060a 	adc.w	r6, ip, sl
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	f04f 0400 	mov.w	r4, #0
 8006b3c:	0094      	lsls	r4, r2, #2
 8006b3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b42:	008b      	lsls	r3, r1, #2
 8006b44:	461a      	mov	r2, r3
 8006b46:	4623      	mov	r3, r4
 8006b48:	4628      	mov	r0, r5
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	f7fa f87c 	bl	8000c48 <__aeabi_uldivmod>
 8006b50:	4603      	mov	r3, r0
 8006b52:	460c      	mov	r4, r1
 8006b54:	461a      	mov	r2, r3
 8006b56:	4b32      	ldr	r3, [pc, #200]	; (8006c20 <UART_SetConfig+0x6f4>)
 8006b58:	fba3 1302 	umull	r1, r3, r3, r2
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	2164      	movs	r1, #100	; 0x64
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	3332      	adds	r3, #50	; 0x32
 8006b6a:	4a2d      	ldr	r2, [pc, #180]	; (8006c20 <UART_SetConfig+0x6f4>)
 8006b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b76:	4498      	add	r8, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	469b      	mov	fp, r3
 8006b7c:	f04f 0c00 	mov.w	ip, #0
 8006b80:	46d9      	mov	r9, fp
 8006b82:	46e2      	mov	sl, ip
 8006b84:	eb19 0309 	adds.w	r3, r9, r9
 8006b88:	eb4a 040a 	adc.w	r4, sl, sl
 8006b8c:	4699      	mov	r9, r3
 8006b8e:	46a2      	mov	sl, r4
 8006b90:	eb19 090b 	adds.w	r9, r9, fp
 8006b94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b98:	f04f 0100 	mov.w	r1, #0
 8006b9c:	f04f 0200 	mov.w	r2, #0
 8006ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ba4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ba8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bac:	4689      	mov	r9, r1
 8006bae:	4692      	mov	sl, r2
 8006bb0:	eb1b 0509 	adds.w	r5, fp, r9
 8006bb4:	eb4c 060a 	adc.w	r6, ip, sl
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	f04f 0200 	mov.w	r2, #0
 8006bc2:	f04f 0300 	mov.w	r3, #0
 8006bc6:	f04f 0400 	mov.w	r4, #0
 8006bca:	0094      	lsls	r4, r2, #2
 8006bcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bd0:	008b      	lsls	r3, r1, #2
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	4623      	mov	r3, r4
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	4631      	mov	r1, r6
 8006bda:	f7fa f835 	bl	8000c48 <__aeabi_uldivmod>
 8006bde:	4603      	mov	r3, r0
 8006be0:	460c      	mov	r4, r1
 8006be2:	461a      	mov	r2, r3
 8006be4:	4b0e      	ldr	r3, [pc, #56]	; (8006c20 <UART_SetConfig+0x6f4>)
 8006be6:	fba3 1302 	umull	r1, r3, r3, r2
 8006bea:	095b      	lsrs	r3, r3, #5
 8006bec:	2164      	movs	r1, #100	; 0x64
 8006bee:	fb01 f303 	mul.w	r3, r1, r3
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	3332      	adds	r3, #50	; 0x32
 8006bf8:	4a09      	ldr	r2, [pc, #36]	; (8006c20 <UART_SetConfig+0x6f4>)
 8006bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	f003 020f 	and.w	r2, r3, #15
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4442      	add	r2, r8
 8006c0a:	609a      	str	r2, [r3, #8]
}
 8006c0c:	e7ff      	b.n	8006c0e <UART_SetConfig+0x6e2>
 8006c0e:	bf00      	nop
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c18:	40011000 	.word	0x40011000
 8006c1c:	40011400 	.word	0x40011400
 8006c20:	51eb851f 	.word	0x51eb851f

08006c24 <__cxa_pure_virtual>:
 8006c24:	b508      	push	{r3, lr}
 8006c26:	f000 f80d 	bl	8006c44 <_ZSt9terminatev>

08006c2a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006c2a:	b508      	push	{r3, lr}
 8006c2c:	4780      	blx	r0
 8006c2e:	f000 f80e 	bl	8006c4e <abort>
	...

08006c34 <_ZSt13get_terminatev>:
 8006c34:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <_ZSt13get_terminatev+0xc>)
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	f3bf 8f5b 	dmb	ish
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	20000030 	.word	0x20000030

08006c44 <_ZSt9terminatev>:
 8006c44:	b508      	push	{r3, lr}
 8006c46:	f7ff fff5 	bl	8006c34 <_ZSt13get_terminatev>
 8006c4a:	f7ff ffee 	bl	8006c2a <_ZN10__cxxabiv111__terminateEPFvvE>

08006c4e <abort>:
 8006c4e:	b508      	push	{r3, lr}
 8006c50:	2006      	movs	r0, #6
 8006c52:	f000 fd39 	bl	80076c8 <raise>
 8006c56:	2001      	movs	r0, #1
 8006c58:	f7fc f87c 	bl	8002d54 <_exit>

08006c5c <atof>:
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	f001 bb8f 	b.w	8008380 <strtod>

08006c62 <atoi>:
 8006c62:	220a      	movs	r2, #10
 8006c64:	2100      	movs	r1, #0
 8006c66:	f001 bc1b 	b.w	80084a0 <strtol>
	...

08006c6c <__errno>:
 8006c6c:	4b01      	ldr	r3, [pc, #4]	; (8006c74 <__errno+0x8>)
 8006c6e:	6818      	ldr	r0, [r3, #0]
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20000034 	.word	0x20000034

08006c78 <__libc_init_array>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	4e0d      	ldr	r6, [pc, #52]	; (8006cb0 <__libc_init_array+0x38>)
 8006c7c:	4c0d      	ldr	r4, [pc, #52]	; (8006cb4 <__libc_init_array+0x3c>)
 8006c7e:	1ba4      	subs	r4, r4, r6
 8006c80:	10a4      	asrs	r4, r4, #2
 8006c82:	2500      	movs	r5, #0
 8006c84:	42a5      	cmp	r5, r4
 8006c86:	d109      	bne.n	8006c9c <__libc_init_array+0x24>
 8006c88:	4e0b      	ldr	r6, [pc, #44]	; (8006cb8 <__libc_init_array+0x40>)
 8006c8a:	4c0c      	ldr	r4, [pc, #48]	; (8006cbc <__libc_init_array+0x44>)
 8006c8c:	f003 fbca 	bl	800a424 <_init>
 8006c90:	1ba4      	subs	r4, r4, r6
 8006c92:	10a4      	asrs	r4, r4, #2
 8006c94:	2500      	movs	r5, #0
 8006c96:	42a5      	cmp	r5, r4
 8006c98:	d105      	bne.n	8006ca6 <__libc_init_array+0x2e>
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ca0:	4798      	blx	r3
 8006ca2:	3501      	adds	r5, #1
 8006ca4:	e7ee      	b.n	8006c84 <__libc_init_array+0xc>
 8006ca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006caa:	4798      	blx	r3
 8006cac:	3501      	adds	r5, #1
 8006cae:	e7f2      	b.n	8006c96 <__libc_init_array+0x1e>
 8006cb0:	0800a7c8 	.word	0x0800a7c8
 8006cb4:	0800a7c8 	.word	0x0800a7c8
 8006cb8:	0800a7c8 	.word	0x0800a7c8
 8006cbc:	0800a7d0 	.word	0x0800a7d0

08006cc0 <memset>:
 8006cc0:	4402      	add	r2, r0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d100      	bne.n	8006cca <memset+0xa>
 8006cc8:	4770      	bx	lr
 8006cca:	f803 1b01 	strb.w	r1, [r3], #1
 8006cce:	e7f9      	b.n	8006cc4 <memset+0x4>

08006cd0 <_calloc_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	fb02 f401 	mul.w	r4, r2, r1
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	f000 f808 	bl	8006cec <_malloc_r>
 8006cdc:	4605      	mov	r5, r0
 8006cde:	b118      	cbz	r0, 8006ce8 <_calloc_r+0x18>
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	f7ff ffec 	bl	8006cc0 <memset>
 8006ce8:	4628      	mov	r0, r5
 8006cea:	bd38      	pop	{r3, r4, r5, pc}

08006cec <_malloc_r>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	1ccd      	adds	r5, r1, #3
 8006cf0:	f025 0503 	bic.w	r5, r5, #3
 8006cf4:	3508      	adds	r5, #8
 8006cf6:	2d0c      	cmp	r5, #12
 8006cf8:	bf38      	it	cc
 8006cfa:	250c      	movcc	r5, #12
 8006cfc:	2d00      	cmp	r5, #0
 8006cfe:	4606      	mov	r6, r0
 8006d00:	db01      	blt.n	8006d06 <_malloc_r+0x1a>
 8006d02:	42a9      	cmp	r1, r5
 8006d04:	d903      	bls.n	8006d0e <_malloc_r+0x22>
 8006d06:	230c      	movs	r3, #12
 8006d08:	6033      	str	r3, [r6, #0]
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	bd70      	pop	{r4, r5, r6, pc}
 8006d0e:	f002 fd82 	bl	8009816 <__malloc_lock>
 8006d12:	4a21      	ldr	r2, [pc, #132]	; (8006d98 <_malloc_r+0xac>)
 8006d14:	6814      	ldr	r4, [r2, #0]
 8006d16:	4621      	mov	r1, r4
 8006d18:	b991      	cbnz	r1, 8006d40 <_malloc_r+0x54>
 8006d1a:	4c20      	ldr	r4, [pc, #128]	; (8006d9c <_malloc_r+0xb0>)
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	b91b      	cbnz	r3, 8006d28 <_malloc_r+0x3c>
 8006d20:	4630      	mov	r0, r6
 8006d22:	f000 fc99 	bl	8007658 <_sbrk_r>
 8006d26:	6020      	str	r0, [r4, #0]
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f000 fc94 	bl	8007658 <_sbrk_r>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d124      	bne.n	8006d7e <_malloc_r+0x92>
 8006d34:	230c      	movs	r3, #12
 8006d36:	6033      	str	r3, [r6, #0]
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f002 fd6d 	bl	8009818 <__malloc_unlock>
 8006d3e:	e7e4      	b.n	8006d0a <_malloc_r+0x1e>
 8006d40:	680b      	ldr	r3, [r1, #0]
 8006d42:	1b5b      	subs	r3, r3, r5
 8006d44:	d418      	bmi.n	8006d78 <_malloc_r+0x8c>
 8006d46:	2b0b      	cmp	r3, #11
 8006d48:	d90f      	bls.n	8006d6a <_malloc_r+0x7e>
 8006d4a:	600b      	str	r3, [r1, #0]
 8006d4c:	50cd      	str	r5, [r1, r3]
 8006d4e:	18cc      	adds	r4, r1, r3
 8006d50:	4630      	mov	r0, r6
 8006d52:	f002 fd61 	bl	8009818 <__malloc_unlock>
 8006d56:	f104 000b 	add.w	r0, r4, #11
 8006d5a:	1d23      	adds	r3, r4, #4
 8006d5c:	f020 0007 	bic.w	r0, r0, #7
 8006d60:	1ac3      	subs	r3, r0, r3
 8006d62:	d0d3      	beq.n	8006d0c <_malloc_r+0x20>
 8006d64:	425a      	negs	r2, r3
 8006d66:	50e2      	str	r2, [r4, r3]
 8006d68:	e7d0      	b.n	8006d0c <_malloc_r+0x20>
 8006d6a:	428c      	cmp	r4, r1
 8006d6c:	684b      	ldr	r3, [r1, #4]
 8006d6e:	bf16      	itet	ne
 8006d70:	6063      	strne	r3, [r4, #4]
 8006d72:	6013      	streq	r3, [r2, #0]
 8006d74:	460c      	movne	r4, r1
 8006d76:	e7eb      	b.n	8006d50 <_malloc_r+0x64>
 8006d78:	460c      	mov	r4, r1
 8006d7a:	6849      	ldr	r1, [r1, #4]
 8006d7c:	e7cc      	b.n	8006d18 <_malloc_r+0x2c>
 8006d7e:	1cc4      	adds	r4, r0, #3
 8006d80:	f024 0403 	bic.w	r4, r4, #3
 8006d84:	42a0      	cmp	r0, r4
 8006d86:	d005      	beq.n	8006d94 <_malloc_r+0xa8>
 8006d88:	1a21      	subs	r1, r4, r0
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f000 fc64 	bl	8007658 <_sbrk_r>
 8006d90:	3001      	adds	r0, #1
 8006d92:	d0cf      	beq.n	8006d34 <_malloc_r+0x48>
 8006d94:	6025      	str	r5, [r4, #0]
 8006d96:	e7db      	b.n	8006d50 <_malloc_r+0x64>
 8006d98:	200002e4 	.word	0x200002e4
 8006d9c:	200002e8 	.word	0x200002e8

08006da0 <__cvt>:
 8006da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	ec55 4b10 	vmov	r4, r5, d0
 8006da8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006daa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006dae:	2d00      	cmp	r5, #0
 8006db0:	460e      	mov	r6, r1
 8006db2:	4691      	mov	r9, r2
 8006db4:	4619      	mov	r1, r3
 8006db6:	bfb8      	it	lt
 8006db8:	4622      	movlt	r2, r4
 8006dba:	462b      	mov	r3, r5
 8006dbc:	f027 0720 	bic.w	r7, r7, #32
 8006dc0:	bfbb      	ittet	lt
 8006dc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006dc6:	461d      	movlt	r5, r3
 8006dc8:	2300      	movge	r3, #0
 8006dca:	232d      	movlt	r3, #45	; 0x2d
 8006dcc:	bfb8      	it	lt
 8006dce:	4614      	movlt	r4, r2
 8006dd0:	2f46      	cmp	r7, #70	; 0x46
 8006dd2:	700b      	strb	r3, [r1, #0]
 8006dd4:	d004      	beq.n	8006de0 <__cvt+0x40>
 8006dd6:	2f45      	cmp	r7, #69	; 0x45
 8006dd8:	d100      	bne.n	8006ddc <__cvt+0x3c>
 8006dda:	3601      	adds	r6, #1
 8006ddc:	2102      	movs	r1, #2
 8006dde:	e000      	b.n	8006de2 <__cvt+0x42>
 8006de0:	2103      	movs	r1, #3
 8006de2:	ab03      	add	r3, sp, #12
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	ab02      	add	r3, sp, #8
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	4632      	mov	r2, r6
 8006dec:	4653      	mov	r3, sl
 8006dee:	ec45 4b10 	vmov	d0, r4, r5
 8006df2:	f001 fbf9 	bl	80085e8 <_dtoa_r>
 8006df6:	2f47      	cmp	r7, #71	; 0x47
 8006df8:	4680      	mov	r8, r0
 8006dfa:	d102      	bne.n	8006e02 <__cvt+0x62>
 8006dfc:	f019 0f01 	tst.w	r9, #1
 8006e00:	d026      	beq.n	8006e50 <__cvt+0xb0>
 8006e02:	2f46      	cmp	r7, #70	; 0x46
 8006e04:	eb08 0906 	add.w	r9, r8, r6
 8006e08:	d111      	bne.n	8006e2e <__cvt+0x8e>
 8006e0a:	f898 3000 	ldrb.w	r3, [r8]
 8006e0e:	2b30      	cmp	r3, #48	; 0x30
 8006e10:	d10a      	bne.n	8006e28 <__cvt+0x88>
 8006e12:	2200      	movs	r2, #0
 8006e14:	2300      	movs	r3, #0
 8006e16:	4620      	mov	r0, r4
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7f9 fe85 	bl	8000b28 <__aeabi_dcmpeq>
 8006e1e:	b918      	cbnz	r0, 8006e28 <__cvt+0x88>
 8006e20:	f1c6 0601 	rsb	r6, r6, #1
 8006e24:	f8ca 6000 	str.w	r6, [sl]
 8006e28:	f8da 3000 	ldr.w	r3, [sl]
 8006e2c:	4499      	add	r9, r3
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2300      	movs	r3, #0
 8006e32:	4620      	mov	r0, r4
 8006e34:	4629      	mov	r1, r5
 8006e36:	f7f9 fe77 	bl	8000b28 <__aeabi_dcmpeq>
 8006e3a:	b938      	cbnz	r0, 8006e4c <__cvt+0xac>
 8006e3c:	2230      	movs	r2, #48	; 0x30
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	454b      	cmp	r3, r9
 8006e42:	d205      	bcs.n	8006e50 <__cvt+0xb0>
 8006e44:	1c59      	adds	r1, r3, #1
 8006e46:	9103      	str	r1, [sp, #12]
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	e7f8      	b.n	8006e3e <__cvt+0x9e>
 8006e4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e54:	eba3 0308 	sub.w	r3, r3, r8
 8006e58:	4640      	mov	r0, r8
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	b004      	add	sp, #16
 8006e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e62 <__exponent>:
 8006e62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e64:	2900      	cmp	r1, #0
 8006e66:	4604      	mov	r4, r0
 8006e68:	bfba      	itte	lt
 8006e6a:	4249      	neglt	r1, r1
 8006e6c:	232d      	movlt	r3, #45	; 0x2d
 8006e6e:	232b      	movge	r3, #43	; 0x2b
 8006e70:	2909      	cmp	r1, #9
 8006e72:	f804 2b02 	strb.w	r2, [r4], #2
 8006e76:	7043      	strb	r3, [r0, #1]
 8006e78:	dd20      	ble.n	8006ebc <__exponent+0x5a>
 8006e7a:	f10d 0307 	add.w	r3, sp, #7
 8006e7e:	461f      	mov	r7, r3
 8006e80:	260a      	movs	r6, #10
 8006e82:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e86:	fb06 1115 	mls	r1, r6, r5, r1
 8006e8a:	3130      	adds	r1, #48	; 0x30
 8006e8c:	2d09      	cmp	r5, #9
 8006e8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e92:	f103 32ff 	add.w	r2, r3, #4294967295
 8006e96:	4629      	mov	r1, r5
 8006e98:	dc09      	bgt.n	8006eae <__exponent+0x4c>
 8006e9a:	3130      	adds	r1, #48	; 0x30
 8006e9c:	3b02      	subs	r3, #2
 8006e9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006ea2:	42bb      	cmp	r3, r7
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	d304      	bcc.n	8006eb2 <__exponent+0x50>
 8006ea8:	1a10      	subs	r0, r2, r0
 8006eaa:	b003      	add	sp, #12
 8006eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eae:	4613      	mov	r3, r2
 8006eb0:	e7e7      	b.n	8006e82 <__exponent+0x20>
 8006eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eb6:	f804 2b01 	strb.w	r2, [r4], #1
 8006eba:	e7f2      	b.n	8006ea2 <__exponent+0x40>
 8006ebc:	2330      	movs	r3, #48	; 0x30
 8006ebe:	4419      	add	r1, r3
 8006ec0:	7083      	strb	r3, [r0, #2]
 8006ec2:	1d02      	adds	r2, r0, #4
 8006ec4:	70c1      	strb	r1, [r0, #3]
 8006ec6:	e7ef      	b.n	8006ea8 <__exponent+0x46>

08006ec8 <_printf_float>:
 8006ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	b08d      	sub	sp, #52	; 0x34
 8006ece:	460c      	mov	r4, r1
 8006ed0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006ed4:	4616      	mov	r6, r2
 8006ed6:	461f      	mov	r7, r3
 8006ed8:	4605      	mov	r5, r0
 8006eda:	f002 fc69 	bl	80097b0 <_localeconv_r>
 8006ede:	6803      	ldr	r3, [r0, #0]
 8006ee0:	9304      	str	r3, [sp, #16]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7f9 f99e 	bl	8000224 <strlen>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	930a      	str	r3, [sp, #40]	; 0x28
 8006eec:	f8d8 3000 	ldr.w	r3, [r8]
 8006ef0:	9005      	str	r0, [sp, #20]
 8006ef2:	3307      	adds	r3, #7
 8006ef4:	f023 0307 	bic.w	r3, r3, #7
 8006ef8:	f103 0208 	add.w	r2, r3, #8
 8006efc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f00:	f8d4 b000 	ldr.w	fp, [r4]
 8006f04:	f8c8 2000 	str.w	r2, [r8]
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f10:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f14:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f18:	9307      	str	r3, [sp, #28]
 8006f1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f22:	4ba7      	ldr	r3, [pc, #668]	; (80071c0 <_printf_float+0x2f8>)
 8006f24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f28:	f7f9 fe30 	bl	8000b8c <__aeabi_dcmpun>
 8006f2c:	bb70      	cbnz	r0, 8006f8c <_printf_float+0xc4>
 8006f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f32:	4ba3      	ldr	r3, [pc, #652]	; (80071c0 <_printf_float+0x2f8>)
 8006f34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f38:	f7f9 fe0a 	bl	8000b50 <__aeabi_dcmple>
 8006f3c:	bb30      	cbnz	r0, 8006f8c <_printf_float+0xc4>
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2300      	movs	r3, #0
 8006f42:	4640      	mov	r0, r8
 8006f44:	4649      	mov	r1, r9
 8006f46:	f7f9 fdf9 	bl	8000b3c <__aeabi_dcmplt>
 8006f4a:	b110      	cbz	r0, 8006f52 <_printf_float+0x8a>
 8006f4c:	232d      	movs	r3, #45	; 0x2d
 8006f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f52:	4a9c      	ldr	r2, [pc, #624]	; (80071c4 <_printf_float+0x2fc>)
 8006f54:	4b9c      	ldr	r3, [pc, #624]	; (80071c8 <_printf_float+0x300>)
 8006f56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006f5a:	bf8c      	ite	hi
 8006f5c:	4690      	movhi	r8, r2
 8006f5e:	4698      	movls	r8, r3
 8006f60:	2303      	movs	r3, #3
 8006f62:	f02b 0204 	bic.w	r2, fp, #4
 8006f66:	6123      	str	r3, [r4, #16]
 8006f68:	6022      	str	r2, [r4, #0]
 8006f6a:	f04f 0900 	mov.w	r9, #0
 8006f6e:	9700      	str	r7, [sp, #0]
 8006f70:	4633      	mov	r3, r6
 8006f72:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f74:	4621      	mov	r1, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 f9e6 	bl	8007348 <_printf_common>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	f040 808d 	bne.w	800709c <_printf_float+0x1d4>
 8006f82:	f04f 30ff 	mov.w	r0, #4294967295
 8006f86:	b00d      	add	sp, #52	; 0x34
 8006f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8c:	4642      	mov	r2, r8
 8006f8e:	464b      	mov	r3, r9
 8006f90:	4640      	mov	r0, r8
 8006f92:	4649      	mov	r1, r9
 8006f94:	f7f9 fdfa 	bl	8000b8c <__aeabi_dcmpun>
 8006f98:	b110      	cbz	r0, 8006fa0 <_printf_float+0xd8>
 8006f9a:	4a8c      	ldr	r2, [pc, #560]	; (80071cc <_printf_float+0x304>)
 8006f9c:	4b8c      	ldr	r3, [pc, #560]	; (80071d0 <_printf_float+0x308>)
 8006f9e:	e7da      	b.n	8006f56 <_printf_float+0x8e>
 8006fa0:	6861      	ldr	r1, [r4, #4]
 8006fa2:	1c4b      	adds	r3, r1, #1
 8006fa4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006fa8:	a80a      	add	r0, sp, #40	; 0x28
 8006faa:	d13e      	bne.n	800702a <_printf_float+0x162>
 8006fac:	2306      	movs	r3, #6
 8006fae:	6063      	str	r3, [r4, #4]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006fb6:	ab09      	add	r3, sp, #36	; 0x24
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	ec49 8b10 	vmov	d0, r8, r9
 8006fbe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fc2:	6022      	str	r2, [r4, #0]
 8006fc4:	f8cd a004 	str.w	sl, [sp, #4]
 8006fc8:	6861      	ldr	r1, [r4, #4]
 8006fca:	4628      	mov	r0, r5
 8006fcc:	f7ff fee8 	bl	8006da0 <__cvt>
 8006fd0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006fd4:	2b47      	cmp	r3, #71	; 0x47
 8006fd6:	4680      	mov	r8, r0
 8006fd8:	d109      	bne.n	8006fee <_printf_float+0x126>
 8006fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fdc:	1cd8      	adds	r0, r3, #3
 8006fde:	db02      	blt.n	8006fe6 <_printf_float+0x11e>
 8006fe0:	6862      	ldr	r2, [r4, #4]
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	dd47      	ble.n	8007076 <_printf_float+0x1ae>
 8006fe6:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fea:	fa5f fa8a 	uxtb.w	sl, sl
 8006fee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006ff2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ff4:	d824      	bhi.n	8007040 <_printf_float+0x178>
 8006ff6:	3901      	subs	r1, #1
 8006ff8:	4652      	mov	r2, sl
 8006ffa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ffe:	9109      	str	r1, [sp, #36]	; 0x24
 8007000:	f7ff ff2f 	bl	8006e62 <__exponent>
 8007004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007006:	1813      	adds	r3, r2, r0
 8007008:	2a01      	cmp	r2, #1
 800700a:	4681      	mov	r9, r0
 800700c:	6123      	str	r3, [r4, #16]
 800700e:	dc02      	bgt.n	8007016 <_printf_float+0x14e>
 8007010:	6822      	ldr	r2, [r4, #0]
 8007012:	07d1      	lsls	r1, r2, #31
 8007014:	d501      	bpl.n	800701a <_printf_float+0x152>
 8007016:	3301      	adds	r3, #1
 8007018:	6123      	str	r3, [r4, #16]
 800701a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0a5      	beq.n	8006f6e <_printf_float+0xa6>
 8007022:	232d      	movs	r3, #45	; 0x2d
 8007024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007028:	e7a1      	b.n	8006f6e <_printf_float+0xa6>
 800702a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800702e:	f000 8177 	beq.w	8007320 <_printf_float+0x458>
 8007032:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007036:	d1bb      	bne.n	8006fb0 <_printf_float+0xe8>
 8007038:	2900      	cmp	r1, #0
 800703a:	d1b9      	bne.n	8006fb0 <_printf_float+0xe8>
 800703c:	2301      	movs	r3, #1
 800703e:	e7b6      	b.n	8006fae <_printf_float+0xe6>
 8007040:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007044:	d119      	bne.n	800707a <_printf_float+0x1b2>
 8007046:	2900      	cmp	r1, #0
 8007048:	6863      	ldr	r3, [r4, #4]
 800704a:	dd0c      	ble.n	8007066 <_printf_float+0x19e>
 800704c:	6121      	str	r1, [r4, #16]
 800704e:	b913      	cbnz	r3, 8007056 <_printf_float+0x18e>
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	07d2      	lsls	r2, r2, #31
 8007054:	d502      	bpl.n	800705c <_printf_float+0x194>
 8007056:	3301      	adds	r3, #1
 8007058:	440b      	add	r3, r1
 800705a:	6123      	str	r3, [r4, #16]
 800705c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800705e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007060:	f04f 0900 	mov.w	r9, #0
 8007064:	e7d9      	b.n	800701a <_printf_float+0x152>
 8007066:	b913      	cbnz	r3, 800706e <_printf_float+0x1a6>
 8007068:	6822      	ldr	r2, [r4, #0]
 800706a:	07d0      	lsls	r0, r2, #31
 800706c:	d501      	bpl.n	8007072 <_printf_float+0x1aa>
 800706e:	3302      	adds	r3, #2
 8007070:	e7f3      	b.n	800705a <_printf_float+0x192>
 8007072:	2301      	movs	r3, #1
 8007074:	e7f1      	b.n	800705a <_printf_float+0x192>
 8007076:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800707a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800707e:	4293      	cmp	r3, r2
 8007080:	db05      	blt.n	800708e <_printf_float+0x1c6>
 8007082:	6822      	ldr	r2, [r4, #0]
 8007084:	6123      	str	r3, [r4, #16]
 8007086:	07d1      	lsls	r1, r2, #31
 8007088:	d5e8      	bpl.n	800705c <_printf_float+0x194>
 800708a:	3301      	adds	r3, #1
 800708c:	e7e5      	b.n	800705a <_printf_float+0x192>
 800708e:	2b00      	cmp	r3, #0
 8007090:	bfd4      	ite	le
 8007092:	f1c3 0302 	rsble	r3, r3, #2
 8007096:	2301      	movgt	r3, #1
 8007098:	4413      	add	r3, r2
 800709a:	e7de      	b.n	800705a <_printf_float+0x192>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	055a      	lsls	r2, r3, #21
 80070a0:	d407      	bmi.n	80070b2 <_printf_float+0x1ea>
 80070a2:	6923      	ldr	r3, [r4, #16]
 80070a4:	4642      	mov	r2, r8
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	47b8      	blx	r7
 80070ac:	3001      	adds	r0, #1
 80070ae:	d12b      	bne.n	8007108 <_printf_float+0x240>
 80070b0:	e767      	b.n	8006f82 <_printf_float+0xba>
 80070b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80070b6:	f240 80dc 	bls.w	8007272 <_printf_float+0x3aa>
 80070ba:	2200      	movs	r2, #0
 80070bc:	2300      	movs	r3, #0
 80070be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070c2:	f7f9 fd31 	bl	8000b28 <__aeabi_dcmpeq>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d033      	beq.n	8007132 <_printf_float+0x26a>
 80070ca:	2301      	movs	r3, #1
 80070cc:	4a41      	ldr	r2, [pc, #260]	; (80071d4 <_printf_float+0x30c>)
 80070ce:	4631      	mov	r1, r6
 80070d0:	4628      	mov	r0, r5
 80070d2:	47b8      	blx	r7
 80070d4:	3001      	adds	r0, #1
 80070d6:	f43f af54 	beq.w	8006f82 <_printf_float+0xba>
 80070da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070de:	429a      	cmp	r2, r3
 80070e0:	db02      	blt.n	80070e8 <_printf_float+0x220>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	07d8      	lsls	r0, r3, #31
 80070e6:	d50f      	bpl.n	8007108 <_printf_float+0x240>
 80070e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	f43f af45 	beq.w	8006f82 <_printf_float+0xba>
 80070f8:	f04f 0800 	mov.w	r8, #0
 80070fc:	f104 091a 	add.w	r9, r4, #26
 8007100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007102:	3b01      	subs	r3, #1
 8007104:	4543      	cmp	r3, r8
 8007106:	dc09      	bgt.n	800711c <_printf_float+0x254>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	079b      	lsls	r3, r3, #30
 800710c:	f100 8103 	bmi.w	8007316 <_printf_float+0x44e>
 8007110:	68e0      	ldr	r0, [r4, #12]
 8007112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007114:	4298      	cmp	r0, r3
 8007116:	bfb8      	it	lt
 8007118:	4618      	movlt	r0, r3
 800711a:	e734      	b.n	8006f86 <_printf_float+0xbe>
 800711c:	2301      	movs	r3, #1
 800711e:	464a      	mov	r2, r9
 8007120:	4631      	mov	r1, r6
 8007122:	4628      	mov	r0, r5
 8007124:	47b8      	blx	r7
 8007126:	3001      	adds	r0, #1
 8007128:	f43f af2b 	beq.w	8006f82 <_printf_float+0xba>
 800712c:	f108 0801 	add.w	r8, r8, #1
 8007130:	e7e6      	b.n	8007100 <_printf_float+0x238>
 8007132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007134:	2b00      	cmp	r3, #0
 8007136:	dc2b      	bgt.n	8007190 <_printf_float+0x2c8>
 8007138:	2301      	movs	r3, #1
 800713a:	4a26      	ldr	r2, [pc, #152]	; (80071d4 <_printf_float+0x30c>)
 800713c:	4631      	mov	r1, r6
 800713e:	4628      	mov	r0, r5
 8007140:	47b8      	blx	r7
 8007142:	3001      	adds	r0, #1
 8007144:	f43f af1d 	beq.w	8006f82 <_printf_float+0xba>
 8007148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714a:	b923      	cbnz	r3, 8007156 <_printf_float+0x28e>
 800714c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714e:	b913      	cbnz	r3, 8007156 <_printf_float+0x28e>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	07d9      	lsls	r1, r3, #31
 8007154:	d5d8      	bpl.n	8007108 <_printf_float+0x240>
 8007156:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800715a:	4631      	mov	r1, r6
 800715c:	4628      	mov	r0, r5
 800715e:	47b8      	blx	r7
 8007160:	3001      	adds	r0, #1
 8007162:	f43f af0e 	beq.w	8006f82 <_printf_float+0xba>
 8007166:	f04f 0900 	mov.w	r9, #0
 800716a:	f104 0a1a 	add.w	sl, r4, #26
 800716e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007170:	425b      	negs	r3, r3
 8007172:	454b      	cmp	r3, r9
 8007174:	dc01      	bgt.n	800717a <_printf_float+0x2b2>
 8007176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007178:	e794      	b.n	80070a4 <_printf_float+0x1dc>
 800717a:	2301      	movs	r3, #1
 800717c:	4652      	mov	r2, sl
 800717e:	4631      	mov	r1, r6
 8007180:	4628      	mov	r0, r5
 8007182:	47b8      	blx	r7
 8007184:	3001      	adds	r0, #1
 8007186:	f43f aefc 	beq.w	8006f82 <_printf_float+0xba>
 800718a:	f109 0901 	add.w	r9, r9, #1
 800718e:	e7ee      	b.n	800716e <_printf_float+0x2a6>
 8007190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007194:	429a      	cmp	r2, r3
 8007196:	bfa8      	it	ge
 8007198:	461a      	movge	r2, r3
 800719a:	2a00      	cmp	r2, #0
 800719c:	4691      	mov	r9, r2
 800719e:	dd07      	ble.n	80071b0 <_printf_float+0x2e8>
 80071a0:	4613      	mov	r3, r2
 80071a2:	4631      	mov	r1, r6
 80071a4:	4642      	mov	r2, r8
 80071a6:	4628      	mov	r0, r5
 80071a8:	47b8      	blx	r7
 80071aa:	3001      	adds	r0, #1
 80071ac:	f43f aee9 	beq.w	8006f82 <_printf_float+0xba>
 80071b0:	f104 031a 	add.w	r3, r4, #26
 80071b4:	f04f 0b00 	mov.w	fp, #0
 80071b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071bc:	9306      	str	r3, [sp, #24]
 80071be:	e015      	b.n	80071ec <_printf_float+0x324>
 80071c0:	7fefffff 	.word	0x7fefffff
 80071c4:	0800a518 	.word	0x0800a518
 80071c8:	0800a514 	.word	0x0800a514
 80071cc:	0800a520 	.word	0x0800a520
 80071d0:	0800a51c 	.word	0x0800a51c
 80071d4:	0800a524 	.word	0x0800a524
 80071d8:	2301      	movs	r3, #1
 80071da:	9a06      	ldr	r2, [sp, #24]
 80071dc:	4631      	mov	r1, r6
 80071de:	4628      	mov	r0, r5
 80071e0:	47b8      	blx	r7
 80071e2:	3001      	adds	r0, #1
 80071e4:	f43f aecd 	beq.w	8006f82 <_printf_float+0xba>
 80071e8:	f10b 0b01 	add.w	fp, fp, #1
 80071ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80071f0:	ebaa 0309 	sub.w	r3, sl, r9
 80071f4:	455b      	cmp	r3, fp
 80071f6:	dcef      	bgt.n	80071d8 <_printf_float+0x310>
 80071f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071fc:	429a      	cmp	r2, r3
 80071fe:	44d0      	add	r8, sl
 8007200:	db15      	blt.n	800722e <_printf_float+0x366>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	07da      	lsls	r2, r3, #31
 8007206:	d412      	bmi.n	800722e <_printf_float+0x366>
 8007208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800720c:	eba3 020a 	sub.w	r2, r3, sl
 8007210:	eba3 0a01 	sub.w	sl, r3, r1
 8007214:	4592      	cmp	sl, r2
 8007216:	bfa8      	it	ge
 8007218:	4692      	movge	sl, r2
 800721a:	f1ba 0f00 	cmp.w	sl, #0
 800721e:	dc0e      	bgt.n	800723e <_printf_float+0x376>
 8007220:	f04f 0800 	mov.w	r8, #0
 8007224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007228:	f104 091a 	add.w	r9, r4, #26
 800722c:	e019      	b.n	8007262 <_printf_float+0x39a>
 800722e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007232:	4631      	mov	r1, r6
 8007234:	4628      	mov	r0, r5
 8007236:	47b8      	blx	r7
 8007238:	3001      	adds	r0, #1
 800723a:	d1e5      	bne.n	8007208 <_printf_float+0x340>
 800723c:	e6a1      	b.n	8006f82 <_printf_float+0xba>
 800723e:	4653      	mov	r3, sl
 8007240:	4642      	mov	r2, r8
 8007242:	4631      	mov	r1, r6
 8007244:	4628      	mov	r0, r5
 8007246:	47b8      	blx	r7
 8007248:	3001      	adds	r0, #1
 800724a:	d1e9      	bne.n	8007220 <_printf_float+0x358>
 800724c:	e699      	b.n	8006f82 <_printf_float+0xba>
 800724e:	2301      	movs	r3, #1
 8007250:	464a      	mov	r2, r9
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	47b8      	blx	r7
 8007258:	3001      	adds	r0, #1
 800725a:	f43f ae92 	beq.w	8006f82 <_printf_float+0xba>
 800725e:	f108 0801 	add.w	r8, r8, #1
 8007262:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	eba3 030a 	sub.w	r3, r3, sl
 800726c:	4543      	cmp	r3, r8
 800726e:	dcee      	bgt.n	800724e <_printf_float+0x386>
 8007270:	e74a      	b.n	8007108 <_printf_float+0x240>
 8007272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007274:	2a01      	cmp	r2, #1
 8007276:	dc01      	bgt.n	800727c <_printf_float+0x3b4>
 8007278:	07db      	lsls	r3, r3, #31
 800727a:	d53a      	bpl.n	80072f2 <_printf_float+0x42a>
 800727c:	2301      	movs	r3, #1
 800727e:	4642      	mov	r2, r8
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	f43f ae7b 	beq.w	8006f82 <_printf_float+0xba>
 800728c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007290:	4631      	mov	r1, r6
 8007292:	4628      	mov	r0, r5
 8007294:	47b8      	blx	r7
 8007296:	3001      	adds	r0, #1
 8007298:	f108 0801 	add.w	r8, r8, #1
 800729c:	f43f ae71 	beq.w	8006f82 <_printf_float+0xba>
 80072a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a2:	2200      	movs	r2, #0
 80072a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80072a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072ac:	2300      	movs	r3, #0
 80072ae:	f7f9 fc3b 	bl	8000b28 <__aeabi_dcmpeq>
 80072b2:	b9c8      	cbnz	r0, 80072e8 <_printf_float+0x420>
 80072b4:	4653      	mov	r3, sl
 80072b6:	4642      	mov	r2, r8
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	d10e      	bne.n	80072e0 <_printf_float+0x418>
 80072c2:	e65e      	b.n	8006f82 <_printf_float+0xba>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4652      	mov	r2, sl
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f ae57 	beq.w	8006f82 <_printf_float+0xba>
 80072d4:	f108 0801 	add.w	r8, r8, #1
 80072d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072da:	3b01      	subs	r3, #1
 80072dc:	4543      	cmp	r3, r8
 80072de:	dcf1      	bgt.n	80072c4 <_printf_float+0x3fc>
 80072e0:	464b      	mov	r3, r9
 80072e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072e6:	e6de      	b.n	80070a6 <_printf_float+0x1de>
 80072e8:	f04f 0800 	mov.w	r8, #0
 80072ec:	f104 0a1a 	add.w	sl, r4, #26
 80072f0:	e7f2      	b.n	80072d8 <_printf_float+0x410>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e7df      	b.n	80072b6 <_printf_float+0x3ee>
 80072f6:	2301      	movs	r3, #1
 80072f8:	464a      	mov	r2, r9
 80072fa:	4631      	mov	r1, r6
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b8      	blx	r7
 8007300:	3001      	adds	r0, #1
 8007302:	f43f ae3e 	beq.w	8006f82 <_printf_float+0xba>
 8007306:	f108 0801 	add.w	r8, r8, #1
 800730a:	68e3      	ldr	r3, [r4, #12]
 800730c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800730e:	1a9b      	subs	r3, r3, r2
 8007310:	4543      	cmp	r3, r8
 8007312:	dcf0      	bgt.n	80072f6 <_printf_float+0x42e>
 8007314:	e6fc      	b.n	8007110 <_printf_float+0x248>
 8007316:	f04f 0800 	mov.w	r8, #0
 800731a:	f104 0919 	add.w	r9, r4, #25
 800731e:	e7f4      	b.n	800730a <_printf_float+0x442>
 8007320:	2900      	cmp	r1, #0
 8007322:	f43f ae8b 	beq.w	800703c <_printf_float+0x174>
 8007326:	2300      	movs	r3, #0
 8007328:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800732c:	ab09      	add	r3, sp, #36	; 0x24
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	ec49 8b10 	vmov	d0, r8, r9
 8007334:	6022      	str	r2, [r4, #0]
 8007336:	f8cd a004 	str.w	sl, [sp, #4]
 800733a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800733e:	4628      	mov	r0, r5
 8007340:	f7ff fd2e 	bl	8006da0 <__cvt>
 8007344:	4680      	mov	r8, r0
 8007346:	e648      	b.n	8006fda <_printf_float+0x112>

08007348 <_printf_common>:
 8007348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800734c:	4691      	mov	r9, r2
 800734e:	461f      	mov	r7, r3
 8007350:	688a      	ldr	r2, [r1, #8]
 8007352:	690b      	ldr	r3, [r1, #16]
 8007354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007358:	4293      	cmp	r3, r2
 800735a:	bfb8      	it	lt
 800735c:	4613      	movlt	r3, r2
 800735e:	f8c9 3000 	str.w	r3, [r9]
 8007362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007366:	4606      	mov	r6, r0
 8007368:	460c      	mov	r4, r1
 800736a:	b112      	cbz	r2, 8007372 <_printf_common+0x2a>
 800736c:	3301      	adds	r3, #1
 800736e:	f8c9 3000 	str.w	r3, [r9]
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	0699      	lsls	r1, r3, #26
 8007376:	bf42      	ittt	mi
 8007378:	f8d9 3000 	ldrmi.w	r3, [r9]
 800737c:	3302      	addmi	r3, #2
 800737e:	f8c9 3000 	strmi.w	r3, [r9]
 8007382:	6825      	ldr	r5, [r4, #0]
 8007384:	f015 0506 	ands.w	r5, r5, #6
 8007388:	d107      	bne.n	800739a <_printf_common+0x52>
 800738a:	f104 0a19 	add.w	sl, r4, #25
 800738e:	68e3      	ldr	r3, [r4, #12]
 8007390:	f8d9 2000 	ldr.w	r2, [r9]
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	42ab      	cmp	r3, r5
 8007398:	dc28      	bgt.n	80073ec <_printf_common+0xa4>
 800739a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800739e:	6822      	ldr	r2, [r4, #0]
 80073a0:	3300      	adds	r3, #0
 80073a2:	bf18      	it	ne
 80073a4:	2301      	movne	r3, #1
 80073a6:	0692      	lsls	r2, r2, #26
 80073a8:	d42d      	bmi.n	8007406 <_printf_common+0xbe>
 80073aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073ae:	4639      	mov	r1, r7
 80073b0:	4630      	mov	r0, r6
 80073b2:	47c0      	blx	r8
 80073b4:	3001      	adds	r0, #1
 80073b6:	d020      	beq.n	80073fa <_printf_common+0xb2>
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	68e5      	ldr	r5, [r4, #12]
 80073bc:	f8d9 2000 	ldr.w	r2, [r9]
 80073c0:	f003 0306 	and.w	r3, r3, #6
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	bf08      	it	eq
 80073c8:	1aad      	subeq	r5, r5, r2
 80073ca:	68a3      	ldr	r3, [r4, #8]
 80073cc:	6922      	ldr	r2, [r4, #16]
 80073ce:	bf0c      	ite	eq
 80073d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073d4:	2500      	movne	r5, #0
 80073d6:	4293      	cmp	r3, r2
 80073d8:	bfc4      	itt	gt
 80073da:	1a9b      	subgt	r3, r3, r2
 80073dc:	18ed      	addgt	r5, r5, r3
 80073de:	f04f 0900 	mov.w	r9, #0
 80073e2:	341a      	adds	r4, #26
 80073e4:	454d      	cmp	r5, r9
 80073e6:	d11a      	bne.n	800741e <_printf_common+0xd6>
 80073e8:	2000      	movs	r0, #0
 80073ea:	e008      	b.n	80073fe <_printf_common+0xb6>
 80073ec:	2301      	movs	r3, #1
 80073ee:	4652      	mov	r2, sl
 80073f0:	4639      	mov	r1, r7
 80073f2:	4630      	mov	r0, r6
 80073f4:	47c0      	blx	r8
 80073f6:	3001      	adds	r0, #1
 80073f8:	d103      	bne.n	8007402 <_printf_common+0xba>
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295
 80073fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007402:	3501      	adds	r5, #1
 8007404:	e7c3      	b.n	800738e <_printf_common+0x46>
 8007406:	18e1      	adds	r1, r4, r3
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	2030      	movs	r0, #48	; 0x30
 800740c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007410:	4422      	add	r2, r4
 8007412:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800741a:	3302      	adds	r3, #2
 800741c:	e7c5      	b.n	80073aa <_printf_common+0x62>
 800741e:	2301      	movs	r3, #1
 8007420:	4622      	mov	r2, r4
 8007422:	4639      	mov	r1, r7
 8007424:	4630      	mov	r0, r6
 8007426:	47c0      	blx	r8
 8007428:	3001      	adds	r0, #1
 800742a:	d0e6      	beq.n	80073fa <_printf_common+0xb2>
 800742c:	f109 0901 	add.w	r9, r9, #1
 8007430:	e7d8      	b.n	80073e4 <_printf_common+0x9c>
	...

08007434 <_printf_i>:
 8007434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007438:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800743c:	460c      	mov	r4, r1
 800743e:	7e09      	ldrb	r1, [r1, #24]
 8007440:	b085      	sub	sp, #20
 8007442:	296e      	cmp	r1, #110	; 0x6e
 8007444:	4617      	mov	r7, r2
 8007446:	4606      	mov	r6, r0
 8007448:	4698      	mov	r8, r3
 800744a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800744c:	f000 80b3 	beq.w	80075b6 <_printf_i+0x182>
 8007450:	d822      	bhi.n	8007498 <_printf_i+0x64>
 8007452:	2963      	cmp	r1, #99	; 0x63
 8007454:	d036      	beq.n	80074c4 <_printf_i+0x90>
 8007456:	d80a      	bhi.n	800746e <_printf_i+0x3a>
 8007458:	2900      	cmp	r1, #0
 800745a:	f000 80b9 	beq.w	80075d0 <_printf_i+0x19c>
 800745e:	2958      	cmp	r1, #88	; 0x58
 8007460:	f000 8083 	beq.w	800756a <_printf_i+0x136>
 8007464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007468:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800746c:	e032      	b.n	80074d4 <_printf_i+0xa0>
 800746e:	2964      	cmp	r1, #100	; 0x64
 8007470:	d001      	beq.n	8007476 <_printf_i+0x42>
 8007472:	2969      	cmp	r1, #105	; 0x69
 8007474:	d1f6      	bne.n	8007464 <_printf_i+0x30>
 8007476:	6820      	ldr	r0, [r4, #0]
 8007478:	6813      	ldr	r3, [r2, #0]
 800747a:	0605      	lsls	r5, r0, #24
 800747c:	f103 0104 	add.w	r1, r3, #4
 8007480:	d52a      	bpl.n	80074d8 <_printf_i+0xa4>
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6011      	str	r1, [r2, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	da03      	bge.n	8007492 <_printf_i+0x5e>
 800748a:	222d      	movs	r2, #45	; 0x2d
 800748c:	425b      	negs	r3, r3
 800748e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007492:	486f      	ldr	r0, [pc, #444]	; (8007650 <_printf_i+0x21c>)
 8007494:	220a      	movs	r2, #10
 8007496:	e039      	b.n	800750c <_printf_i+0xd8>
 8007498:	2973      	cmp	r1, #115	; 0x73
 800749a:	f000 809d 	beq.w	80075d8 <_printf_i+0x1a4>
 800749e:	d808      	bhi.n	80074b2 <_printf_i+0x7e>
 80074a0:	296f      	cmp	r1, #111	; 0x6f
 80074a2:	d020      	beq.n	80074e6 <_printf_i+0xb2>
 80074a4:	2970      	cmp	r1, #112	; 0x70
 80074a6:	d1dd      	bne.n	8007464 <_printf_i+0x30>
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	f043 0320 	orr.w	r3, r3, #32
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	e003      	b.n	80074ba <_printf_i+0x86>
 80074b2:	2975      	cmp	r1, #117	; 0x75
 80074b4:	d017      	beq.n	80074e6 <_printf_i+0xb2>
 80074b6:	2978      	cmp	r1, #120	; 0x78
 80074b8:	d1d4      	bne.n	8007464 <_printf_i+0x30>
 80074ba:	2378      	movs	r3, #120	; 0x78
 80074bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074c0:	4864      	ldr	r0, [pc, #400]	; (8007654 <_printf_i+0x220>)
 80074c2:	e055      	b.n	8007570 <_printf_i+0x13c>
 80074c4:	6813      	ldr	r3, [r2, #0]
 80074c6:	1d19      	adds	r1, r3, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6011      	str	r1, [r2, #0]
 80074cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074d4:	2301      	movs	r3, #1
 80074d6:	e08c      	b.n	80075f2 <_printf_i+0x1be>
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6011      	str	r1, [r2, #0]
 80074dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074e0:	bf18      	it	ne
 80074e2:	b21b      	sxthne	r3, r3
 80074e4:	e7cf      	b.n	8007486 <_printf_i+0x52>
 80074e6:	6813      	ldr	r3, [r2, #0]
 80074e8:	6825      	ldr	r5, [r4, #0]
 80074ea:	1d18      	adds	r0, r3, #4
 80074ec:	6010      	str	r0, [r2, #0]
 80074ee:	0628      	lsls	r0, r5, #24
 80074f0:	d501      	bpl.n	80074f6 <_printf_i+0xc2>
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	e002      	b.n	80074fc <_printf_i+0xc8>
 80074f6:	0668      	lsls	r0, r5, #25
 80074f8:	d5fb      	bpl.n	80074f2 <_printf_i+0xbe>
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	4854      	ldr	r0, [pc, #336]	; (8007650 <_printf_i+0x21c>)
 80074fe:	296f      	cmp	r1, #111	; 0x6f
 8007500:	bf14      	ite	ne
 8007502:	220a      	movne	r2, #10
 8007504:	2208      	moveq	r2, #8
 8007506:	2100      	movs	r1, #0
 8007508:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800750c:	6865      	ldr	r5, [r4, #4]
 800750e:	60a5      	str	r5, [r4, #8]
 8007510:	2d00      	cmp	r5, #0
 8007512:	f2c0 8095 	blt.w	8007640 <_printf_i+0x20c>
 8007516:	6821      	ldr	r1, [r4, #0]
 8007518:	f021 0104 	bic.w	r1, r1, #4
 800751c:	6021      	str	r1, [r4, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d13d      	bne.n	800759e <_printf_i+0x16a>
 8007522:	2d00      	cmp	r5, #0
 8007524:	f040 808e 	bne.w	8007644 <_printf_i+0x210>
 8007528:	4665      	mov	r5, ip
 800752a:	2a08      	cmp	r2, #8
 800752c:	d10b      	bne.n	8007546 <_printf_i+0x112>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	07db      	lsls	r3, r3, #31
 8007532:	d508      	bpl.n	8007546 <_printf_i+0x112>
 8007534:	6923      	ldr	r3, [r4, #16]
 8007536:	6862      	ldr	r2, [r4, #4]
 8007538:	429a      	cmp	r2, r3
 800753a:	bfde      	ittt	le
 800753c:	2330      	movle	r3, #48	; 0x30
 800753e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007542:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007546:	ebac 0305 	sub.w	r3, ip, r5
 800754a:	6123      	str	r3, [r4, #16]
 800754c:	f8cd 8000 	str.w	r8, [sp]
 8007550:	463b      	mov	r3, r7
 8007552:	aa03      	add	r2, sp, #12
 8007554:	4621      	mov	r1, r4
 8007556:	4630      	mov	r0, r6
 8007558:	f7ff fef6 	bl	8007348 <_printf_common>
 800755c:	3001      	adds	r0, #1
 800755e:	d14d      	bne.n	80075fc <_printf_i+0x1c8>
 8007560:	f04f 30ff 	mov.w	r0, #4294967295
 8007564:	b005      	add	sp, #20
 8007566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800756a:	4839      	ldr	r0, [pc, #228]	; (8007650 <_printf_i+0x21c>)
 800756c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007570:	6813      	ldr	r3, [r2, #0]
 8007572:	6821      	ldr	r1, [r4, #0]
 8007574:	1d1d      	adds	r5, r3, #4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6015      	str	r5, [r2, #0]
 800757a:	060a      	lsls	r2, r1, #24
 800757c:	d50b      	bpl.n	8007596 <_printf_i+0x162>
 800757e:	07ca      	lsls	r2, r1, #31
 8007580:	bf44      	itt	mi
 8007582:	f041 0120 	orrmi.w	r1, r1, #32
 8007586:	6021      	strmi	r1, [r4, #0]
 8007588:	b91b      	cbnz	r3, 8007592 <_printf_i+0x15e>
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	f022 0220 	bic.w	r2, r2, #32
 8007590:	6022      	str	r2, [r4, #0]
 8007592:	2210      	movs	r2, #16
 8007594:	e7b7      	b.n	8007506 <_printf_i+0xd2>
 8007596:	064d      	lsls	r5, r1, #25
 8007598:	bf48      	it	mi
 800759a:	b29b      	uxthmi	r3, r3
 800759c:	e7ef      	b.n	800757e <_printf_i+0x14a>
 800759e:	4665      	mov	r5, ip
 80075a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80075a4:	fb02 3311 	mls	r3, r2, r1, r3
 80075a8:	5cc3      	ldrb	r3, [r0, r3]
 80075aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80075ae:	460b      	mov	r3, r1
 80075b0:	2900      	cmp	r1, #0
 80075b2:	d1f5      	bne.n	80075a0 <_printf_i+0x16c>
 80075b4:	e7b9      	b.n	800752a <_printf_i+0xf6>
 80075b6:	6813      	ldr	r3, [r2, #0]
 80075b8:	6825      	ldr	r5, [r4, #0]
 80075ba:	6961      	ldr	r1, [r4, #20]
 80075bc:	1d18      	adds	r0, r3, #4
 80075be:	6010      	str	r0, [r2, #0]
 80075c0:	0628      	lsls	r0, r5, #24
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	d501      	bpl.n	80075ca <_printf_i+0x196>
 80075c6:	6019      	str	r1, [r3, #0]
 80075c8:	e002      	b.n	80075d0 <_printf_i+0x19c>
 80075ca:	066a      	lsls	r2, r5, #25
 80075cc:	d5fb      	bpl.n	80075c6 <_printf_i+0x192>
 80075ce:	8019      	strh	r1, [r3, #0]
 80075d0:	2300      	movs	r3, #0
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	4665      	mov	r5, ip
 80075d6:	e7b9      	b.n	800754c <_printf_i+0x118>
 80075d8:	6813      	ldr	r3, [r2, #0]
 80075da:	1d19      	adds	r1, r3, #4
 80075dc:	6011      	str	r1, [r2, #0]
 80075de:	681d      	ldr	r5, [r3, #0]
 80075e0:	6862      	ldr	r2, [r4, #4]
 80075e2:	2100      	movs	r1, #0
 80075e4:	4628      	mov	r0, r5
 80075e6:	f7f8 fe2b 	bl	8000240 <memchr>
 80075ea:	b108      	cbz	r0, 80075f0 <_printf_i+0x1bc>
 80075ec:	1b40      	subs	r0, r0, r5
 80075ee:	6060      	str	r0, [r4, #4]
 80075f0:	6863      	ldr	r3, [r4, #4]
 80075f2:	6123      	str	r3, [r4, #16]
 80075f4:	2300      	movs	r3, #0
 80075f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075fa:	e7a7      	b.n	800754c <_printf_i+0x118>
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	462a      	mov	r2, r5
 8007600:	4639      	mov	r1, r7
 8007602:	4630      	mov	r0, r6
 8007604:	47c0      	blx	r8
 8007606:	3001      	adds	r0, #1
 8007608:	d0aa      	beq.n	8007560 <_printf_i+0x12c>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	079b      	lsls	r3, r3, #30
 800760e:	d413      	bmi.n	8007638 <_printf_i+0x204>
 8007610:	68e0      	ldr	r0, [r4, #12]
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	4298      	cmp	r0, r3
 8007616:	bfb8      	it	lt
 8007618:	4618      	movlt	r0, r3
 800761a:	e7a3      	b.n	8007564 <_printf_i+0x130>
 800761c:	2301      	movs	r3, #1
 800761e:	464a      	mov	r2, r9
 8007620:	4639      	mov	r1, r7
 8007622:	4630      	mov	r0, r6
 8007624:	47c0      	blx	r8
 8007626:	3001      	adds	r0, #1
 8007628:	d09a      	beq.n	8007560 <_printf_i+0x12c>
 800762a:	3501      	adds	r5, #1
 800762c:	68e3      	ldr	r3, [r4, #12]
 800762e:	9a03      	ldr	r2, [sp, #12]
 8007630:	1a9b      	subs	r3, r3, r2
 8007632:	42ab      	cmp	r3, r5
 8007634:	dcf2      	bgt.n	800761c <_printf_i+0x1e8>
 8007636:	e7eb      	b.n	8007610 <_printf_i+0x1dc>
 8007638:	2500      	movs	r5, #0
 800763a:	f104 0919 	add.w	r9, r4, #25
 800763e:	e7f5      	b.n	800762c <_printf_i+0x1f8>
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1ac      	bne.n	800759e <_printf_i+0x16a>
 8007644:	7803      	ldrb	r3, [r0, #0]
 8007646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800764a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800764e:	e76c      	b.n	800752a <_printf_i+0xf6>
 8007650:	0800a526 	.word	0x0800a526
 8007654:	0800a537 	.word	0x0800a537

08007658 <_sbrk_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4c06      	ldr	r4, [pc, #24]	; (8007674 <_sbrk_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4605      	mov	r5, r0
 8007660:	4608      	mov	r0, r1
 8007662:	6023      	str	r3, [r4, #0]
 8007664:	f7fb fb80 	bl	8002d68 <_sbrk>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_sbrk_r+0x1a>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	b103      	cbz	r3, 8007672 <_sbrk_r+0x1a>
 8007670:	602b      	str	r3, [r5, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	200004cc 	.word	0x200004cc

08007678 <_raise_r>:
 8007678:	291f      	cmp	r1, #31
 800767a:	b538      	push	{r3, r4, r5, lr}
 800767c:	4604      	mov	r4, r0
 800767e:	460d      	mov	r5, r1
 8007680:	d904      	bls.n	800768c <_raise_r+0x14>
 8007682:	2316      	movs	r3, #22
 8007684:	6003      	str	r3, [r0, #0]
 8007686:	f04f 30ff 	mov.w	r0, #4294967295
 800768a:	bd38      	pop	{r3, r4, r5, pc}
 800768c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800768e:	b112      	cbz	r2, 8007696 <_raise_r+0x1e>
 8007690:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007694:	b94b      	cbnz	r3, 80076aa <_raise_r+0x32>
 8007696:	4620      	mov	r0, r4
 8007698:	f000 f830 	bl	80076fc <_getpid_r>
 800769c:	462a      	mov	r2, r5
 800769e:	4601      	mov	r1, r0
 80076a0:	4620      	mov	r0, r4
 80076a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076a6:	f000 b817 	b.w	80076d8 <_kill_r>
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d00a      	beq.n	80076c4 <_raise_r+0x4c>
 80076ae:	1c59      	adds	r1, r3, #1
 80076b0:	d103      	bne.n	80076ba <_raise_r+0x42>
 80076b2:	2316      	movs	r3, #22
 80076b4:	6003      	str	r3, [r0, #0]
 80076b6:	2001      	movs	r0, #1
 80076b8:	e7e7      	b.n	800768a <_raise_r+0x12>
 80076ba:	2400      	movs	r4, #0
 80076bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076c0:	4628      	mov	r0, r5
 80076c2:	4798      	blx	r3
 80076c4:	2000      	movs	r0, #0
 80076c6:	e7e0      	b.n	800768a <_raise_r+0x12>

080076c8 <raise>:
 80076c8:	4b02      	ldr	r3, [pc, #8]	; (80076d4 <raise+0xc>)
 80076ca:	4601      	mov	r1, r0
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	f7ff bfd3 	b.w	8007678 <_raise_r>
 80076d2:	bf00      	nop
 80076d4:	20000034 	.word	0x20000034

080076d8 <_kill_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4c07      	ldr	r4, [pc, #28]	; (80076f8 <_kill_r+0x20>)
 80076dc:	2300      	movs	r3, #0
 80076de:	4605      	mov	r5, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	f7fb fb25 	bl	8002d34 <_kill>
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	d102      	bne.n	80076f4 <_kill_r+0x1c>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	b103      	cbz	r3, 80076f4 <_kill_r+0x1c>
 80076f2:	602b      	str	r3, [r5, #0]
 80076f4:	bd38      	pop	{r3, r4, r5, pc}
 80076f6:	bf00      	nop
 80076f8:	200004cc 	.word	0x200004cc

080076fc <_getpid_r>:
 80076fc:	f7fb bb12 	b.w	8002d24 <_getpid>

08007700 <siprintf>:
 8007700:	b40e      	push	{r1, r2, r3}
 8007702:	b500      	push	{lr}
 8007704:	b09c      	sub	sp, #112	; 0x70
 8007706:	ab1d      	add	r3, sp, #116	; 0x74
 8007708:	9002      	str	r0, [sp, #8]
 800770a:	9006      	str	r0, [sp, #24]
 800770c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007710:	4809      	ldr	r0, [pc, #36]	; (8007738 <siprintf+0x38>)
 8007712:	9107      	str	r1, [sp, #28]
 8007714:	9104      	str	r1, [sp, #16]
 8007716:	4909      	ldr	r1, [pc, #36]	; (800773c <siprintf+0x3c>)
 8007718:	f853 2b04 	ldr.w	r2, [r3], #4
 800771c:	9105      	str	r1, [sp, #20]
 800771e:	6800      	ldr	r0, [r0, #0]
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	a902      	add	r1, sp, #8
 8007724:	f002 fd20 	bl	800a168 <_svfiprintf_r>
 8007728:	9b02      	ldr	r3, [sp, #8]
 800772a:	2200      	movs	r2, #0
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	b01c      	add	sp, #112	; 0x70
 8007730:	f85d eb04 	ldr.w	lr, [sp], #4
 8007734:	b003      	add	sp, #12
 8007736:	4770      	bx	lr
 8007738:	20000034 	.word	0x20000034
 800773c:	ffff0208 	.word	0xffff0208

08007740 <strcat>:
 8007740:	b510      	push	{r4, lr}
 8007742:	4603      	mov	r3, r0
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	1c5c      	adds	r4, r3, #1
 8007748:	b93a      	cbnz	r2, 800775a <strcat+0x1a>
 800774a:	3b01      	subs	r3, #1
 800774c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007750:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007754:	2a00      	cmp	r2, #0
 8007756:	d1f9      	bne.n	800774c <strcat+0xc>
 8007758:	bd10      	pop	{r4, pc}
 800775a:	4623      	mov	r3, r4
 800775c:	e7f2      	b.n	8007744 <strcat+0x4>

0800775e <sulp>:
 800775e:	b570      	push	{r4, r5, r6, lr}
 8007760:	4604      	mov	r4, r0
 8007762:	460d      	mov	r5, r1
 8007764:	ec45 4b10 	vmov	d0, r4, r5
 8007768:	4616      	mov	r6, r2
 800776a:	f002 fb21 	bl	8009db0 <__ulp>
 800776e:	ec51 0b10 	vmov	r0, r1, d0
 8007772:	b17e      	cbz	r6, 8007794 <sulp+0x36>
 8007774:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007778:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800777c:	2b00      	cmp	r3, #0
 800777e:	dd09      	ble.n	8007794 <sulp+0x36>
 8007780:	051b      	lsls	r3, r3, #20
 8007782:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007786:	2400      	movs	r4, #0
 8007788:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800778c:	4622      	mov	r2, r4
 800778e:	462b      	mov	r3, r5
 8007790:	f7f8 ff62 	bl	8000658 <__aeabi_dmul>
 8007794:	bd70      	pop	{r4, r5, r6, pc}
	...

08007798 <_strtod_l>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	461f      	mov	r7, r3
 800779e:	b0a1      	sub	sp, #132	; 0x84
 80077a0:	2300      	movs	r3, #0
 80077a2:	4681      	mov	r9, r0
 80077a4:	4638      	mov	r0, r7
 80077a6:	460e      	mov	r6, r1
 80077a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80077aa:	931c      	str	r3, [sp, #112]	; 0x70
 80077ac:	f001 fffd 	bl	80097aa <__localeconv_l>
 80077b0:	4680      	mov	r8, r0
 80077b2:	6800      	ldr	r0, [r0, #0]
 80077b4:	f7f8 fd36 	bl	8000224 <strlen>
 80077b8:	f04f 0a00 	mov.w	sl, #0
 80077bc:	4604      	mov	r4, r0
 80077be:	f04f 0b00 	mov.w	fp, #0
 80077c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80077c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077c6:	781a      	ldrb	r2, [r3, #0]
 80077c8:	2a0d      	cmp	r2, #13
 80077ca:	d832      	bhi.n	8007832 <_strtod_l+0x9a>
 80077cc:	2a09      	cmp	r2, #9
 80077ce:	d236      	bcs.n	800783e <_strtod_l+0xa6>
 80077d0:	2a00      	cmp	r2, #0
 80077d2:	d03e      	beq.n	8007852 <_strtod_l+0xba>
 80077d4:	2300      	movs	r3, #0
 80077d6:	930d      	str	r3, [sp, #52]	; 0x34
 80077d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80077da:	782b      	ldrb	r3, [r5, #0]
 80077dc:	2b30      	cmp	r3, #48	; 0x30
 80077de:	f040 80ac 	bne.w	800793a <_strtod_l+0x1a2>
 80077e2:	786b      	ldrb	r3, [r5, #1]
 80077e4:	2b58      	cmp	r3, #88	; 0x58
 80077e6:	d001      	beq.n	80077ec <_strtod_l+0x54>
 80077e8:	2b78      	cmp	r3, #120	; 0x78
 80077ea:	d167      	bne.n	80078bc <_strtod_l+0x124>
 80077ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ee:	9301      	str	r3, [sp, #4]
 80077f0:	ab1c      	add	r3, sp, #112	; 0x70
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	9702      	str	r7, [sp, #8]
 80077f6:	ab1d      	add	r3, sp, #116	; 0x74
 80077f8:	4a88      	ldr	r2, [pc, #544]	; (8007a1c <_strtod_l+0x284>)
 80077fa:	a91b      	add	r1, sp, #108	; 0x6c
 80077fc:	4648      	mov	r0, r9
 80077fe:	f001 fcfa 	bl	80091f6 <__gethex>
 8007802:	f010 0407 	ands.w	r4, r0, #7
 8007806:	4606      	mov	r6, r0
 8007808:	d005      	beq.n	8007816 <_strtod_l+0x7e>
 800780a:	2c06      	cmp	r4, #6
 800780c:	d12b      	bne.n	8007866 <_strtod_l+0xce>
 800780e:	3501      	adds	r5, #1
 8007810:	2300      	movs	r3, #0
 8007812:	951b      	str	r5, [sp, #108]	; 0x6c
 8007814:	930d      	str	r3, [sp, #52]	; 0x34
 8007816:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007818:	2b00      	cmp	r3, #0
 800781a:	f040 859a 	bne.w	8008352 <_strtod_l+0xbba>
 800781e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007820:	b1e3      	cbz	r3, 800785c <_strtod_l+0xc4>
 8007822:	4652      	mov	r2, sl
 8007824:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007828:	ec43 2b10 	vmov	d0, r2, r3
 800782c:	b021      	add	sp, #132	; 0x84
 800782e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007832:	2a2b      	cmp	r2, #43	; 0x2b
 8007834:	d015      	beq.n	8007862 <_strtod_l+0xca>
 8007836:	2a2d      	cmp	r2, #45	; 0x2d
 8007838:	d004      	beq.n	8007844 <_strtod_l+0xac>
 800783a:	2a20      	cmp	r2, #32
 800783c:	d1ca      	bne.n	80077d4 <_strtod_l+0x3c>
 800783e:	3301      	adds	r3, #1
 8007840:	931b      	str	r3, [sp, #108]	; 0x6c
 8007842:	e7bf      	b.n	80077c4 <_strtod_l+0x2c>
 8007844:	2201      	movs	r2, #1
 8007846:	920d      	str	r2, [sp, #52]	; 0x34
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	921b      	str	r2, [sp, #108]	; 0x6c
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1c2      	bne.n	80077d8 <_strtod_l+0x40>
 8007852:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007854:	961b      	str	r6, [sp, #108]	; 0x6c
 8007856:	2b00      	cmp	r3, #0
 8007858:	f040 8579 	bne.w	800834e <_strtod_l+0xbb6>
 800785c:	4652      	mov	r2, sl
 800785e:	465b      	mov	r3, fp
 8007860:	e7e2      	b.n	8007828 <_strtod_l+0x90>
 8007862:	2200      	movs	r2, #0
 8007864:	e7ef      	b.n	8007846 <_strtod_l+0xae>
 8007866:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007868:	b13a      	cbz	r2, 800787a <_strtod_l+0xe2>
 800786a:	2135      	movs	r1, #53	; 0x35
 800786c:	a81e      	add	r0, sp, #120	; 0x78
 800786e:	f002 fb97 	bl	8009fa0 <__copybits>
 8007872:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007874:	4648      	mov	r0, r9
 8007876:	f002 f804 	bl	8009882 <_Bfree>
 800787a:	3c01      	subs	r4, #1
 800787c:	2c04      	cmp	r4, #4
 800787e:	d806      	bhi.n	800788e <_strtod_l+0xf6>
 8007880:	e8df f004 	tbb	[pc, r4]
 8007884:	1714030a 	.word	0x1714030a
 8007888:	0a          	.byte	0x0a
 8007889:	00          	.byte	0x00
 800788a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800788e:	0730      	lsls	r0, r6, #28
 8007890:	d5c1      	bpl.n	8007816 <_strtod_l+0x7e>
 8007892:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007896:	e7be      	b.n	8007816 <_strtod_l+0x7e>
 8007898:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800789c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800789e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80078a2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80078a6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80078aa:	e7f0      	b.n	800788e <_strtod_l+0xf6>
 80078ac:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007a20 <_strtod_l+0x288>
 80078b0:	e7ed      	b.n	800788e <_strtod_l+0xf6>
 80078b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80078b6:	f04f 3aff 	mov.w	sl, #4294967295
 80078ba:	e7e8      	b.n	800788e <_strtod_l+0xf6>
 80078bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078be:	1c5a      	adds	r2, r3, #1
 80078c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80078c2:	785b      	ldrb	r3, [r3, #1]
 80078c4:	2b30      	cmp	r3, #48	; 0x30
 80078c6:	d0f9      	beq.n	80078bc <_strtod_l+0x124>
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0a4      	beq.n	8007816 <_strtod_l+0x7e>
 80078cc:	2301      	movs	r3, #1
 80078ce:	2500      	movs	r5, #0
 80078d0:	9306      	str	r3, [sp, #24]
 80078d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078d4:	9308      	str	r3, [sp, #32]
 80078d6:	9507      	str	r5, [sp, #28]
 80078d8:	9505      	str	r5, [sp, #20]
 80078da:	220a      	movs	r2, #10
 80078dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80078de:	7807      	ldrb	r7, [r0, #0]
 80078e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80078e4:	b2d9      	uxtb	r1, r3
 80078e6:	2909      	cmp	r1, #9
 80078e8:	d929      	bls.n	800793e <_strtod_l+0x1a6>
 80078ea:	4622      	mov	r2, r4
 80078ec:	f8d8 1000 	ldr.w	r1, [r8]
 80078f0:	f002 fd32 	bl	800a358 <strncmp>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d031      	beq.n	800795c <_strtod_l+0x1c4>
 80078f8:	2000      	movs	r0, #0
 80078fa:	9c05      	ldr	r4, [sp, #20]
 80078fc:	9004      	str	r0, [sp, #16]
 80078fe:	463b      	mov	r3, r7
 8007900:	4602      	mov	r2, r0
 8007902:	2b65      	cmp	r3, #101	; 0x65
 8007904:	d001      	beq.n	800790a <_strtod_l+0x172>
 8007906:	2b45      	cmp	r3, #69	; 0x45
 8007908:	d114      	bne.n	8007934 <_strtod_l+0x19c>
 800790a:	b924      	cbnz	r4, 8007916 <_strtod_l+0x17e>
 800790c:	b910      	cbnz	r0, 8007914 <_strtod_l+0x17c>
 800790e:	9b06      	ldr	r3, [sp, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d09e      	beq.n	8007852 <_strtod_l+0xba>
 8007914:	2400      	movs	r4, #0
 8007916:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007918:	1c73      	adds	r3, r6, #1
 800791a:	931b      	str	r3, [sp, #108]	; 0x6c
 800791c:	7873      	ldrb	r3, [r6, #1]
 800791e:	2b2b      	cmp	r3, #43	; 0x2b
 8007920:	d078      	beq.n	8007a14 <_strtod_l+0x27c>
 8007922:	2b2d      	cmp	r3, #45	; 0x2d
 8007924:	d070      	beq.n	8007a08 <_strtod_l+0x270>
 8007926:	f04f 0c00 	mov.w	ip, #0
 800792a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800792e:	2f09      	cmp	r7, #9
 8007930:	d97c      	bls.n	8007a2c <_strtod_l+0x294>
 8007932:	961b      	str	r6, [sp, #108]	; 0x6c
 8007934:	f04f 0e00 	mov.w	lr, #0
 8007938:	e09a      	b.n	8007a70 <_strtod_l+0x2d8>
 800793a:	2300      	movs	r3, #0
 800793c:	e7c7      	b.n	80078ce <_strtod_l+0x136>
 800793e:	9905      	ldr	r1, [sp, #20]
 8007940:	2908      	cmp	r1, #8
 8007942:	bfdd      	ittte	le
 8007944:	9907      	ldrle	r1, [sp, #28]
 8007946:	fb02 3301 	mlale	r3, r2, r1, r3
 800794a:	9307      	strle	r3, [sp, #28]
 800794c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007950:	9b05      	ldr	r3, [sp, #20]
 8007952:	3001      	adds	r0, #1
 8007954:	3301      	adds	r3, #1
 8007956:	9305      	str	r3, [sp, #20]
 8007958:	901b      	str	r0, [sp, #108]	; 0x6c
 800795a:	e7bf      	b.n	80078dc <_strtod_l+0x144>
 800795c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800795e:	191a      	adds	r2, r3, r4
 8007960:	921b      	str	r2, [sp, #108]	; 0x6c
 8007962:	9a05      	ldr	r2, [sp, #20]
 8007964:	5d1b      	ldrb	r3, [r3, r4]
 8007966:	2a00      	cmp	r2, #0
 8007968:	d037      	beq.n	80079da <_strtod_l+0x242>
 800796a:	9c05      	ldr	r4, [sp, #20]
 800796c:	4602      	mov	r2, r0
 800796e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007972:	2909      	cmp	r1, #9
 8007974:	d913      	bls.n	800799e <_strtod_l+0x206>
 8007976:	2101      	movs	r1, #1
 8007978:	9104      	str	r1, [sp, #16]
 800797a:	e7c2      	b.n	8007902 <_strtod_l+0x16a>
 800797c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	921b      	str	r2, [sp, #108]	; 0x6c
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	3001      	adds	r0, #1
 8007986:	2b30      	cmp	r3, #48	; 0x30
 8007988:	d0f8      	beq.n	800797c <_strtod_l+0x1e4>
 800798a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800798e:	2a08      	cmp	r2, #8
 8007990:	f200 84e4 	bhi.w	800835c <_strtod_l+0xbc4>
 8007994:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007996:	9208      	str	r2, [sp, #32]
 8007998:	4602      	mov	r2, r0
 800799a:	2000      	movs	r0, #0
 800799c:	4604      	mov	r4, r0
 800799e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80079a2:	f100 0101 	add.w	r1, r0, #1
 80079a6:	d012      	beq.n	80079ce <_strtod_l+0x236>
 80079a8:	440a      	add	r2, r1
 80079aa:	eb00 0c04 	add.w	ip, r0, r4
 80079ae:	4621      	mov	r1, r4
 80079b0:	270a      	movs	r7, #10
 80079b2:	458c      	cmp	ip, r1
 80079b4:	d113      	bne.n	80079de <_strtod_l+0x246>
 80079b6:	1821      	adds	r1, r4, r0
 80079b8:	2908      	cmp	r1, #8
 80079ba:	f104 0401 	add.w	r4, r4, #1
 80079be:	4404      	add	r4, r0
 80079c0:	dc19      	bgt.n	80079f6 <_strtod_l+0x25e>
 80079c2:	9b07      	ldr	r3, [sp, #28]
 80079c4:	210a      	movs	r1, #10
 80079c6:	fb01 e303 	mla	r3, r1, r3, lr
 80079ca:	9307      	str	r3, [sp, #28]
 80079cc:	2100      	movs	r1, #0
 80079ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079d0:	1c58      	adds	r0, r3, #1
 80079d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80079d4:	785b      	ldrb	r3, [r3, #1]
 80079d6:	4608      	mov	r0, r1
 80079d8:	e7c9      	b.n	800796e <_strtod_l+0x1d6>
 80079da:	9805      	ldr	r0, [sp, #20]
 80079dc:	e7d3      	b.n	8007986 <_strtod_l+0x1ee>
 80079de:	2908      	cmp	r1, #8
 80079e0:	f101 0101 	add.w	r1, r1, #1
 80079e4:	dc03      	bgt.n	80079ee <_strtod_l+0x256>
 80079e6:	9b07      	ldr	r3, [sp, #28]
 80079e8:	437b      	muls	r3, r7
 80079ea:	9307      	str	r3, [sp, #28]
 80079ec:	e7e1      	b.n	80079b2 <_strtod_l+0x21a>
 80079ee:	2910      	cmp	r1, #16
 80079f0:	bfd8      	it	le
 80079f2:	437d      	mulle	r5, r7
 80079f4:	e7dd      	b.n	80079b2 <_strtod_l+0x21a>
 80079f6:	2c10      	cmp	r4, #16
 80079f8:	bfdc      	itt	le
 80079fa:	210a      	movle	r1, #10
 80079fc:	fb01 e505 	mlale	r5, r1, r5, lr
 8007a00:	e7e4      	b.n	80079cc <_strtod_l+0x234>
 8007a02:	2301      	movs	r3, #1
 8007a04:	9304      	str	r3, [sp, #16]
 8007a06:	e781      	b.n	800790c <_strtod_l+0x174>
 8007a08:	f04f 0c01 	mov.w	ip, #1
 8007a0c:	1cb3      	adds	r3, r6, #2
 8007a0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a10:	78b3      	ldrb	r3, [r6, #2]
 8007a12:	e78a      	b.n	800792a <_strtod_l+0x192>
 8007a14:	f04f 0c00 	mov.w	ip, #0
 8007a18:	e7f8      	b.n	8007a0c <_strtod_l+0x274>
 8007a1a:	bf00      	nop
 8007a1c:	0800a548 	.word	0x0800a548
 8007a20:	7ff00000 	.word	0x7ff00000
 8007a24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a26:	1c5f      	adds	r7, r3, #1
 8007a28:	971b      	str	r7, [sp, #108]	; 0x6c
 8007a2a:	785b      	ldrb	r3, [r3, #1]
 8007a2c:	2b30      	cmp	r3, #48	; 0x30
 8007a2e:	d0f9      	beq.n	8007a24 <_strtod_l+0x28c>
 8007a30:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007a34:	2f08      	cmp	r7, #8
 8007a36:	f63f af7d 	bhi.w	8007934 <_strtod_l+0x19c>
 8007a3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007a3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a40:	930a      	str	r3, [sp, #40]	; 0x28
 8007a42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a44:	1c5f      	adds	r7, r3, #1
 8007a46:	971b      	str	r7, [sp, #108]	; 0x6c
 8007a48:	785b      	ldrb	r3, [r3, #1]
 8007a4a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007a4e:	f1b8 0f09 	cmp.w	r8, #9
 8007a52:	d937      	bls.n	8007ac4 <_strtod_l+0x32c>
 8007a54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a56:	1a7f      	subs	r7, r7, r1
 8007a58:	2f08      	cmp	r7, #8
 8007a5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007a5e:	dc37      	bgt.n	8007ad0 <_strtod_l+0x338>
 8007a60:	45be      	cmp	lr, r7
 8007a62:	bfa8      	it	ge
 8007a64:	46be      	movge	lr, r7
 8007a66:	f1bc 0f00 	cmp.w	ip, #0
 8007a6a:	d001      	beq.n	8007a70 <_strtod_l+0x2d8>
 8007a6c:	f1ce 0e00 	rsb	lr, lr, #0
 8007a70:	2c00      	cmp	r4, #0
 8007a72:	d151      	bne.n	8007b18 <_strtod_l+0x380>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	f47f aece 	bne.w	8007816 <_strtod_l+0x7e>
 8007a7a:	9a06      	ldr	r2, [sp, #24]
 8007a7c:	2a00      	cmp	r2, #0
 8007a7e:	f47f aeca 	bne.w	8007816 <_strtod_l+0x7e>
 8007a82:	9a04      	ldr	r2, [sp, #16]
 8007a84:	2a00      	cmp	r2, #0
 8007a86:	f47f aee4 	bne.w	8007852 <_strtod_l+0xba>
 8007a8a:	2b4e      	cmp	r3, #78	; 0x4e
 8007a8c:	d027      	beq.n	8007ade <_strtod_l+0x346>
 8007a8e:	dc21      	bgt.n	8007ad4 <_strtod_l+0x33c>
 8007a90:	2b49      	cmp	r3, #73	; 0x49
 8007a92:	f47f aede 	bne.w	8007852 <_strtod_l+0xba>
 8007a96:	49a0      	ldr	r1, [pc, #640]	; (8007d18 <_strtod_l+0x580>)
 8007a98:	a81b      	add	r0, sp, #108	; 0x6c
 8007a9a:	f001 fddf 	bl	800965c <__match>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f43f aed7 	beq.w	8007852 <_strtod_l+0xba>
 8007aa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aa6:	499d      	ldr	r1, [pc, #628]	; (8007d1c <_strtod_l+0x584>)
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	a81b      	add	r0, sp, #108	; 0x6c
 8007aac:	931b      	str	r3, [sp, #108]	; 0x6c
 8007aae:	f001 fdd5 	bl	800965c <__match>
 8007ab2:	b910      	cbnz	r0, 8007aba <_strtod_l+0x322>
 8007ab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	931b      	str	r3, [sp, #108]	; 0x6c
 8007aba:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007d30 <_strtod_l+0x598>
 8007abe:	f04f 0a00 	mov.w	sl, #0
 8007ac2:	e6a8      	b.n	8007816 <_strtod_l+0x7e>
 8007ac4:	210a      	movs	r1, #10
 8007ac6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007aca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007ace:	e7b8      	b.n	8007a42 <_strtod_l+0x2aa>
 8007ad0:	46be      	mov	lr, r7
 8007ad2:	e7c8      	b.n	8007a66 <_strtod_l+0x2ce>
 8007ad4:	2b69      	cmp	r3, #105	; 0x69
 8007ad6:	d0de      	beq.n	8007a96 <_strtod_l+0x2fe>
 8007ad8:	2b6e      	cmp	r3, #110	; 0x6e
 8007ada:	f47f aeba 	bne.w	8007852 <_strtod_l+0xba>
 8007ade:	4990      	ldr	r1, [pc, #576]	; (8007d20 <_strtod_l+0x588>)
 8007ae0:	a81b      	add	r0, sp, #108	; 0x6c
 8007ae2:	f001 fdbb 	bl	800965c <__match>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	f43f aeb3 	beq.w	8007852 <_strtod_l+0xba>
 8007aec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b28      	cmp	r3, #40	; 0x28
 8007af2:	d10e      	bne.n	8007b12 <_strtod_l+0x37a>
 8007af4:	aa1e      	add	r2, sp, #120	; 0x78
 8007af6:	498b      	ldr	r1, [pc, #556]	; (8007d24 <_strtod_l+0x58c>)
 8007af8:	a81b      	add	r0, sp, #108	; 0x6c
 8007afa:	f001 fdc3 	bl	8009684 <__hexnan>
 8007afe:	2805      	cmp	r0, #5
 8007b00:	d107      	bne.n	8007b12 <_strtod_l+0x37a>
 8007b02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b04:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007b08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007b0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007b10:	e681      	b.n	8007816 <_strtod_l+0x7e>
 8007b12:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007d38 <_strtod_l+0x5a0>
 8007b16:	e7d2      	b.n	8007abe <_strtod_l+0x326>
 8007b18:	ebae 0302 	sub.w	r3, lr, r2
 8007b1c:	9306      	str	r3, [sp, #24]
 8007b1e:	9b05      	ldr	r3, [sp, #20]
 8007b20:	9807      	ldr	r0, [sp, #28]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bf08      	it	eq
 8007b26:	4623      	moveq	r3, r4
 8007b28:	2c10      	cmp	r4, #16
 8007b2a:	9305      	str	r3, [sp, #20]
 8007b2c:	46a0      	mov	r8, r4
 8007b2e:	bfa8      	it	ge
 8007b30:	f04f 0810 	movge.w	r8, #16
 8007b34:	f7f8 fd16 	bl	8000564 <__aeabi_ui2d>
 8007b38:	2c09      	cmp	r4, #9
 8007b3a:	4682      	mov	sl, r0
 8007b3c:	468b      	mov	fp, r1
 8007b3e:	dc13      	bgt.n	8007b68 <_strtod_l+0x3d0>
 8007b40:	9b06      	ldr	r3, [sp, #24]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f43f ae67 	beq.w	8007816 <_strtod_l+0x7e>
 8007b48:	9b06      	ldr	r3, [sp, #24]
 8007b4a:	dd7a      	ble.n	8007c42 <_strtod_l+0x4aa>
 8007b4c:	2b16      	cmp	r3, #22
 8007b4e:	dc61      	bgt.n	8007c14 <_strtod_l+0x47c>
 8007b50:	4a75      	ldr	r2, [pc, #468]	; (8007d28 <_strtod_l+0x590>)
 8007b52:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007b56:	e9de 0100 	ldrd	r0, r1, [lr]
 8007b5a:	4652      	mov	r2, sl
 8007b5c:	465b      	mov	r3, fp
 8007b5e:	f7f8 fd7b 	bl	8000658 <__aeabi_dmul>
 8007b62:	4682      	mov	sl, r0
 8007b64:	468b      	mov	fp, r1
 8007b66:	e656      	b.n	8007816 <_strtod_l+0x7e>
 8007b68:	4b6f      	ldr	r3, [pc, #444]	; (8007d28 <_strtod_l+0x590>)
 8007b6a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007b6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007b72:	f7f8 fd71 	bl	8000658 <__aeabi_dmul>
 8007b76:	4606      	mov	r6, r0
 8007b78:	4628      	mov	r0, r5
 8007b7a:	460f      	mov	r7, r1
 8007b7c:	f7f8 fcf2 	bl	8000564 <__aeabi_ui2d>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4630      	mov	r0, r6
 8007b86:	4639      	mov	r1, r7
 8007b88:	f7f8 fbb0 	bl	80002ec <__adddf3>
 8007b8c:	2c0f      	cmp	r4, #15
 8007b8e:	4682      	mov	sl, r0
 8007b90:	468b      	mov	fp, r1
 8007b92:	ddd5      	ble.n	8007b40 <_strtod_l+0x3a8>
 8007b94:	9b06      	ldr	r3, [sp, #24]
 8007b96:	eba4 0808 	sub.w	r8, r4, r8
 8007b9a:	4498      	add	r8, r3
 8007b9c:	f1b8 0f00 	cmp.w	r8, #0
 8007ba0:	f340 8096 	ble.w	8007cd0 <_strtod_l+0x538>
 8007ba4:	f018 030f 	ands.w	r3, r8, #15
 8007ba8:	d00a      	beq.n	8007bc0 <_strtod_l+0x428>
 8007baa:	495f      	ldr	r1, [pc, #380]	; (8007d28 <_strtod_l+0x590>)
 8007bac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bb0:	4652      	mov	r2, sl
 8007bb2:	465b      	mov	r3, fp
 8007bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb8:	f7f8 fd4e 	bl	8000658 <__aeabi_dmul>
 8007bbc:	4682      	mov	sl, r0
 8007bbe:	468b      	mov	fp, r1
 8007bc0:	f038 080f 	bics.w	r8, r8, #15
 8007bc4:	d073      	beq.n	8007cae <_strtod_l+0x516>
 8007bc6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007bca:	dd47      	ble.n	8007c5c <_strtod_l+0x4c4>
 8007bcc:	2400      	movs	r4, #0
 8007bce:	46a0      	mov	r8, r4
 8007bd0:	9407      	str	r4, [sp, #28]
 8007bd2:	9405      	str	r4, [sp, #20]
 8007bd4:	2322      	movs	r3, #34	; 0x22
 8007bd6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007d30 <_strtod_l+0x598>
 8007bda:	f8c9 3000 	str.w	r3, [r9]
 8007bde:	f04f 0a00 	mov.w	sl, #0
 8007be2:	9b07      	ldr	r3, [sp, #28]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f43f ae16 	beq.w	8007816 <_strtod_l+0x7e>
 8007bea:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007bec:	4648      	mov	r0, r9
 8007bee:	f001 fe48 	bl	8009882 <_Bfree>
 8007bf2:	9905      	ldr	r1, [sp, #20]
 8007bf4:	4648      	mov	r0, r9
 8007bf6:	f001 fe44 	bl	8009882 <_Bfree>
 8007bfa:	4641      	mov	r1, r8
 8007bfc:	4648      	mov	r0, r9
 8007bfe:	f001 fe40 	bl	8009882 <_Bfree>
 8007c02:	9907      	ldr	r1, [sp, #28]
 8007c04:	4648      	mov	r0, r9
 8007c06:	f001 fe3c 	bl	8009882 <_Bfree>
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4648      	mov	r0, r9
 8007c0e:	f001 fe38 	bl	8009882 <_Bfree>
 8007c12:	e600      	b.n	8007816 <_strtod_l+0x7e>
 8007c14:	9a06      	ldr	r2, [sp, #24]
 8007c16:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	dbba      	blt.n	8007b94 <_strtod_l+0x3fc>
 8007c1e:	4d42      	ldr	r5, [pc, #264]	; (8007d28 <_strtod_l+0x590>)
 8007c20:	f1c4 040f 	rsb	r4, r4, #15
 8007c24:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007c28:	4652      	mov	r2, sl
 8007c2a:	465b      	mov	r3, fp
 8007c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c30:	f7f8 fd12 	bl	8000658 <__aeabi_dmul>
 8007c34:	9b06      	ldr	r3, [sp, #24]
 8007c36:	1b1c      	subs	r4, r3, r4
 8007c38:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007c3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c40:	e78d      	b.n	8007b5e <_strtod_l+0x3c6>
 8007c42:	f113 0f16 	cmn.w	r3, #22
 8007c46:	dba5      	blt.n	8007b94 <_strtod_l+0x3fc>
 8007c48:	4a37      	ldr	r2, [pc, #220]	; (8007d28 <_strtod_l+0x590>)
 8007c4a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007c4e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007c52:	4650      	mov	r0, sl
 8007c54:	4659      	mov	r1, fp
 8007c56:	f7f8 fe29 	bl	80008ac <__aeabi_ddiv>
 8007c5a:	e782      	b.n	8007b62 <_strtod_l+0x3ca>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4e33      	ldr	r6, [pc, #204]	; (8007d2c <_strtod_l+0x594>)
 8007c60:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007c64:	4650      	mov	r0, sl
 8007c66:	4659      	mov	r1, fp
 8007c68:	461d      	mov	r5, r3
 8007c6a:	f1b8 0f01 	cmp.w	r8, #1
 8007c6e:	dc21      	bgt.n	8007cb4 <_strtod_l+0x51c>
 8007c70:	b10b      	cbz	r3, 8007c76 <_strtod_l+0x4de>
 8007c72:	4682      	mov	sl, r0
 8007c74:	468b      	mov	fp, r1
 8007c76:	4b2d      	ldr	r3, [pc, #180]	; (8007d2c <_strtod_l+0x594>)
 8007c78:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007c7c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007c80:	4652      	mov	r2, sl
 8007c82:	465b      	mov	r3, fp
 8007c84:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007c88:	f7f8 fce6 	bl	8000658 <__aeabi_dmul>
 8007c8c:	4b28      	ldr	r3, [pc, #160]	; (8007d30 <_strtod_l+0x598>)
 8007c8e:	460a      	mov	r2, r1
 8007c90:	400b      	ands	r3, r1
 8007c92:	4928      	ldr	r1, [pc, #160]	; (8007d34 <_strtod_l+0x59c>)
 8007c94:	428b      	cmp	r3, r1
 8007c96:	4682      	mov	sl, r0
 8007c98:	d898      	bhi.n	8007bcc <_strtod_l+0x434>
 8007c9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c9e:	428b      	cmp	r3, r1
 8007ca0:	bf86      	itte	hi
 8007ca2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007d3c <_strtod_l+0x5a4>
 8007ca6:	f04f 3aff 	movhi.w	sl, #4294967295
 8007caa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007cae:	2300      	movs	r3, #0
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	e077      	b.n	8007da4 <_strtod_l+0x60c>
 8007cb4:	f018 0f01 	tst.w	r8, #1
 8007cb8:	d006      	beq.n	8007cc8 <_strtod_l+0x530>
 8007cba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc2:	f7f8 fcc9 	bl	8000658 <__aeabi_dmul>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	3501      	adds	r5, #1
 8007cca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007cce:	e7cc      	b.n	8007c6a <_strtod_l+0x4d2>
 8007cd0:	d0ed      	beq.n	8007cae <_strtod_l+0x516>
 8007cd2:	f1c8 0800 	rsb	r8, r8, #0
 8007cd6:	f018 020f 	ands.w	r2, r8, #15
 8007cda:	d00a      	beq.n	8007cf2 <_strtod_l+0x55a>
 8007cdc:	4b12      	ldr	r3, [pc, #72]	; (8007d28 <_strtod_l+0x590>)
 8007cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 fddf 	bl	80008ac <__aeabi_ddiv>
 8007cee:	4682      	mov	sl, r0
 8007cf0:	468b      	mov	fp, r1
 8007cf2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007cf6:	d0da      	beq.n	8007cae <_strtod_l+0x516>
 8007cf8:	f1b8 0f1f 	cmp.w	r8, #31
 8007cfc:	dd20      	ble.n	8007d40 <_strtod_l+0x5a8>
 8007cfe:	2400      	movs	r4, #0
 8007d00:	46a0      	mov	r8, r4
 8007d02:	9407      	str	r4, [sp, #28]
 8007d04:	9405      	str	r4, [sp, #20]
 8007d06:	2322      	movs	r3, #34	; 0x22
 8007d08:	f04f 0a00 	mov.w	sl, #0
 8007d0c:	f04f 0b00 	mov.w	fp, #0
 8007d10:	f8c9 3000 	str.w	r3, [r9]
 8007d14:	e765      	b.n	8007be2 <_strtod_l+0x44a>
 8007d16:	bf00      	nop
 8007d18:	0800a519 	.word	0x0800a519
 8007d1c:	0800a59b 	.word	0x0800a59b
 8007d20:	0800a521 	.word	0x0800a521
 8007d24:	0800a55c 	.word	0x0800a55c
 8007d28:	0800a5d8 	.word	0x0800a5d8
 8007d2c:	0800a5b0 	.word	0x0800a5b0
 8007d30:	7ff00000 	.word	0x7ff00000
 8007d34:	7ca00000 	.word	0x7ca00000
 8007d38:	fff80000 	.word	0xfff80000
 8007d3c:	7fefffff 	.word	0x7fefffff
 8007d40:	f018 0310 	ands.w	r3, r8, #16
 8007d44:	bf18      	it	ne
 8007d46:	236a      	movne	r3, #106	; 0x6a
 8007d48:	4da0      	ldr	r5, [pc, #640]	; (8007fcc <_strtod_l+0x834>)
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	4650      	mov	r0, sl
 8007d4e:	4659      	mov	r1, fp
 8007d50:	2300      	movs	r3, #0
 8007d52:	f1b8 0f00 	cmp.w	r8, #0
 8007d56:	f300 810a 	bgt.w	8007f6e <_strtod_l+0x7d6>
 8007d5a:	b10b      	cbz	r3, 8007d60 <_strtod_l+0x5c8>
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	468b      	mov	fp, r1
 8007d60:	9b04      	ldr	r3, [sp, #16]
 8007d62:	b1bb      	cbz	r3, 8007d94 <_strtod_l+0x5fc>
 8007d64:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007d68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	4659      	mov	r1, fp
 8007d70:	dd10      	ble.n	8007d94 <_strtod_l+0x5fc>
 8007d72:	2b1f      	cmp	r3, #31
 8007d74:	f340 8107 	ble.w	8007f86 <_strtod_l+0x7ee>
 8007d78:	2b34      	cmp	r3, #52	; 0x34
 8007d7a:	bfde      	ittt	le
 8007d7c:	3b20      	suble	r3, #32
 8007d7e:	f04f 32ff 	movle.w	r2, #4294967295
 8007d82:	fa02 f303 	lslle.w	r3, r2, r3
 8007d86:	f04f 0a00 	mov.w	sl, #0
 8007d8a:	bfcc      	ite	gt
 8007d8c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007d90:	ea03 0b01 	andle.w	fp, r3, r1
 8007d94:	2200      	movs	r2, #0
 8007d96:	2300      	movs	r3, #0
 8007d98:	4650      	mov	r0, sl
 8007d9a:	4659      	mov	r1, fp
 8007d9c:	f7f8 fec4 	bl	8000b28 <__aeabi_dcmpeq>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d1ac      	bne.n	8007cfe <_strtod_l+0x566>
 8007da4:	9b07      	ldr	r3, [sp, #28]
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	9a05      	ldr	r2, [sp, #20]
 8007daa:	9908      	ldr	r1, [sp, #32]
 8007dac:	4623      	mov	r3, r4
 8007dae:	4648      	mov	r0, r9
 8007db0:	f001 fdb9 	bl	8009926 <__s2b>
 8007db4:	9007      	str	r0, [sp, #28]
 8007db6:	2800      	cmp	r0, #0
 8007db8:	f43f af08 	beq.w	8007bcc <_strtod_l+0x434>
 8007dbc:	9a06      	ldr	r2, [sp, #24]
 8007dbe:	9b06      	ldr	r3, [sp, #24]
 8007dc0:	2a00      	cmp	r2, #0
 8007dc2:	f1c3 0300 	rsb	r3, r3, #0
 8007dc6:	bfa8      	it	ge
 8007dc8:	2300      	movge	r3, #0
 8007dca:	930e      	str	r3, [sp, #56]	; 0x38
 8007dcc:	2400      	movs	r4, #0
 8007dce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007dd2:	9316      	str	r3, [sp, #88]	; 0x58
 8007dd4:	46a0      	mov	r8, r4
 8007dd6:	9b07      	ldr	r3, [sp, #28]
 8007dd8:	4648      	mov	r0, r9
 8007dda:	6859      	ldr	r1, [r3, #4]
 8007ddc:	f001 fd1d 	bl	800981a <_Balloc>
 8007de0:	9005      	str	r0, [sp, #20]
 8007de2:	2800      	cmp	r0, #0
 8007de4:	f43f aef6 	beq.w	8007bd4 <_strtod_l+0x43c>
 8007de8:	9b07      	ldr	r3, [sp, #28]
 8007dea:	691a      	ldr	r2, [r3, #16]
 8007dec:	3202      	adds	r2, #2
 8007dee:	f103 010c 	add.w	r1, r3, #12
 8007df2:	0092      	lsls	r2, r2, #2
 8007df4:	300c      	adds	r0, #12
 8007df6:	f001 fd03 	bl	8009800 <memcpy>
 8007dfa:	aa1e      	add	r2, sp, #120	; 0x78
 8007dfc:	a91d      	add	r1, sp, #116	; 0x74
 8007dfe:	ec4b ab10 	vmov	d0, sl, fp
 8007e02:	4648      	mov	r0, r9
 8007e04:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007e08:	f002 f848 	bl	8009e9c <__d2b>
 8007e0c:	901c      	str	r0, [sp, #112]	; 0x70
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f43f aee0 	beq.w	8007bd4 <_strtod_l+0x43c>
 8007e14:	2101      	movs	r1, #1
 8007e16:	4648      	mov	r0, r9
 8007e18:	f001 fe11 	bl	8009a3e <__i2b>
 8007e1c:	4680      	mov	r8, r0
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f43f aed8 	beq.w	8007bd4 <_strtod_l+0x43c>
 8007e24:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007e26:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007e28:	2e00      	cmp	r6, #0
 8007e2a:	bfab      	itete	ge
 8007e2c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007e2e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007e30:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007e32:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007e34:	bfac      	ite	ge
 8007e36:	18f7      	addge	r7, r6, r3
 8007e38:	1b9d      	sublt	r5, r3, r6
 8007e3a:	9b04      	ldr	r3, [sp, #16]
 8007e3c:	1af6      	subs	r6, r6, r3
 8007e3e:	4416      	add	r6, r2
 8007e40:	4b63      	ldr	r3, [pc, #396]	; (8007fd0 <_strtod_l+0x838>)
 8007e42:	3e01      	subs	r6, #1
 8007e44:	429e      	cmp	r6, r3
 8007e46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007e4a:	f280 80af 	bge.w	8007fac <_strtod_l+0x814>
 8007e4e:	1b9b      	subs	r3, r3, r6
 8007e50:	2b1f      	cmp	r3, #31
 8007e52:	eba2 0203 	sub.w	r2, r2, r3
 8007e56:	f04f 0101 	mov.w	r1, #1
 8007e5a:	f300 809b 	bgt.w	8007f94 <_strtod_l+0x7fc>
 8007e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e62:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e64:	2300      	movs	r3, #0
 8007e66:	930a      	str	r3, [sp, #40]	; 0x28
 8007e68:	18be      	adds	r6, r7, r2
 8007e6a:	9b04      	ldr	r3, [sp, #16]
 8007e6c:	42b7      	cmp	r7, r6
 8007e6e:	4415      	add	r5, r2
 8007e70:	441d      	add	r5, r3
 8007e72:	463b      	mov	r3, r7
 8007e74:	bfa8      	it	ge
 8007e76:	4633      	movge	r3, r6
 8007e78:	42ab      	cmp	r3, r5
 8007e7a:	bfa8      	it	ge
 8007e7c:	462b      	movge	r3, r5
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bfc2      	ittt	gt
 8007e82:	1af6      	subgt	r6, r6, r3
 8007e84:	1aed      	subgt	r5, r5, r3
 8007e86:	1aff      	subgt	r7, r7, r3
 8007e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e8a:	b1bb      	cbz	r3, 8007ebc <_strtod_l+0x724>
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	461a      	mov	r2, r3
 8007e90:	4648      	mov	r0, r9
 8007e92:	f001 fe73 	bl	8009b7c <__pow5mult>
 8007e96:	4680      	mov	r8, r0
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	f43f ae9b 	beq.w	8007bd4 <_strtod_l+0x43c>
 8007e9e:	4601      	mov	r1, r0
 8007ea0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ea2:	4648      	mov	r0, r9
 8007ea4:	f001 fdd4 	bl	8009a50 <__multiply>
 8007ea8:	900c      	str	r0, [sp, #48]	; 0x30
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	f43f ae92 	beq.w	8007bd4 <_strtod_l+0x43c>
 8007eb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007eb2:	4648      	mov	r0, r9
 8007eb4:	f001 fce5 	bl	8009882 <_Bfree>
 8007eb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eba:	931c      	str	r3, [sp, #112]	; 0x70
 8007ebc:	2e00      	cmp	r6, #0
 8007ebe:	dc7a      	bgt.n	8007fb6 <_strtod_l+0x81e>
 8007ec0:	9b06      	ldr	r3, [sp, #24]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	dd08      	ble.n	8007ed8 <_strtod_l+0x740>
 8007ec6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007ec8:	9905      	ldr	r1, [sp, #20]
 8007eca:	4648      	mov	r0, r9
 8007ecc:	f001 fe56 	bl	8009b7c <__pow5mult>
 8007ed0:	9005      	str	r0, [sp, #20]
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	f43f ae7e 	beq.w	8007bd4 <_strtod_l+0x43c>
 8007ed8:	2d00      	cmp	r5, #0
 8007eda:	dd08      	ble.n	8007eee <_strtod_l+0x756>
 8007edc:	462a      	mov	r2, r5
 8007ede:	9905      	ldr	r1, [sp, #20]
 8007ee0:	4648      	mov	r0, r9
 8007ee2:	f001 fe99 	bl	8009c18 <__lshift>
 8007ee6:	9005      	str	r0, [sp, #20]
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	f43f ae73 	beq.w	8007bd4 <_strtod_l+0x43c>
 8007eee:	2f00      	cmp	r7, #0
 8007ef0:	dd08      	ble.n	8007f04 <_strtod_l+0x76c>
 8007ef2:	4641      	mov	r1, r8
 8007ef4:	463a      	mov	r2, r7
 8007ef6:	4648      	mov	r0, r9
 8007ef8:	f001 fe8e 	bl	8009c18 <__lshift>
 8007efc:	4680      	mov	r8, r0
 8007efe:	2800      	cmp	r0, #0
 8007f00:	f43f ae68 	beq.w	8007bd4 <_strtod_l+0x43c>
 8007f04:	9a05      	ldr	r2, [sp, #20]
 8007f06:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f08:	4648      	mov	r0, r9
 8007f0a:	f001 fef3 	bl	8009cf4 <__mdiff>
 8007f0e:	4604      	mov	r4, r0
 8007f10:	2800      	cmp	r0, #0
 8007f12:	f43f ae5f 	beq.w	8007bd4 <_strtod_l+0x43c>
 8007f16:	68c3      	ldr	r3, [r0, #12]
 8007f18:	930c      	str	r3, [sp, #48]	; 0x30
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60c3      	str	r3, [r0, #12]
 8007f1e:	4641      	mov	r1, r8
 8007f20:	f001 fece 	bl	8009cc0 <__mcmp>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	da55      	bge.n	8007fd4 <_strtod_l+0x83c>
 8007f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f2a:	b9e3      	cbnz	r3, 8007f66 <_strtod_l+0x7ce>
 8007f2c:	f1ba 0f00 	cmp.w	sl, #0
 8007f30:	d119      	bne.n	8007f66 <_strtod_l+0x7ce>
 8007f32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f36:	b9b3      	cbnz	r3, 8007f66 <_strtod_l+0x7ce>
 8007f38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f3c:	0d1b      	lsrs	r3, r3, #20
 8007f3e:	051b      	lsls	r3, r3, #20
 8007f40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007f44:	d90f      	bls.n	8007f66 <_strtod_l+0x7ce>
 8007f46:	6963      	ldr	r3, [r4, #20]
 8007f48:	b913      	cbnz	r3, 8007f50 <_strtod_l+0x7b8>
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	dd0a      	ble.n	8007f66 <_strtod_l+0x7ce>
 8007f50:	4621      	mov	r1, r4
 8007f52:	2201      	movs	r2, #1
 8007f54:	4648      	mov	r0, r9
 8007f56:	f001 fe5f 	bl	8009c18 <__lshift>
 8007f5a:	4641      	mov	r1, r8
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	f001 feaf 	bl	8009cc0 <__mcmp>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	dc67      	bgt.n	8008036 <_strtod_l+0x89e>
 8007f66:	9b04      	ldr	r3, [sp, #16]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d171      	bne.n	8008050 <_strtod_l+0x8b8>
 8007f6c:	e63d      	b.n	8007bea <_strtod_l+0x452>
 8007f6e:	f018 0f01 	tst.w	r8, #1
 8007f72:	d004      	beq.n	8007f7e <_strtod_l+0x7e6>
 8007f74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f78:	f7f8 fb6e 	bl	8000658 <__aeabi_dmul>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007f82:	3508      	adds	r5, #8
 8007f84:	e6e5      	b.n	8007d52 <_strtod_l+0x5ba>
 8007f86:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8e:	ea03 0a0a 	and.w	sl, r3, sl
 8007f92:	e6ff      	b.n	8007d94 <_strtod_l+0x5fc>
 8007f94:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007f98:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007f9c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007fa0:	36e2      	adds	r6, #226	; 0xe2
 8007fa2:	fa01 f306 	lsl.w	r3, r1, r6
 8007fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8007fa8:	910f      	str	r1, [sp, #60]	; 0x3c
 8007faa:	e75d      	b.n	8007e68 <_strtod_l+0x6d0>
 8007fac:	2300      	movs	r3, #0
 8007fae:	930a      	str	r3, [sp, #40]	; 0x28
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fb4:	e758      	b.n	8007e68 <_strtod_l+0x6d0>
 8007fb6:	4632      	mov	r2, r6
 8007fb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007fba:	4648      	mov	r0, r9
 8007fbc:	f001 fe2c 	bl	8009c18 <__lshift>
 8007fc0:	901c      	str	r0, [sp, #112]	; 0x70
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	f47f af7c 	bne.w	8007ec0 <_strtod_l+0x728>
 8007fc8:	e604      	b.n	8007bd4 <_strtod_l+0x43c>
 8007fca:	bf00      	nop
 8007fcc:	0800a570 	.word	0x0800a570
 8007fd0:	fffffc02 	.word	0xfffffc02
 8007fd4:	465d      	mov	r5, fp
 8007fd6:	f040 8086 	bne.w	80080e6 <_strtod_l+0x94e>
 8007fda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fe0:	b32a      	cbz	r2, 800802e <_strtod_l+0x896>
 8007fe2:	4aaf      	ldr	r2, [pc, #700]	; (80082a0 <_strtod_l+0xb08>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d153      	bne.n	8008090 <_strtod_l+0x8f8>
 8007fe8:	9b04      	ldr	r3, [sp, #16]
 8007fea:	4650      	mov	r0, sl
 8007fec:	b1d3      	cbz	r3, 8008024 <_strtod_l+0x88c>
 8007fee:	4aad      	ldr	r2, [pc, #692]	; (80082a4 <_strtod_l+0xb0c>)
 8007ff0:	402a      	ands	r2, r5
 8007ff2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007ff6:	f04f 31ff 	mov.w	r1, #4294967295
 8007ffa:	d816      	bhi.n	800802a <_strtod_l+0x892>
 8007ffc:	0d12      	lsrs	r2, r2, #20
 8007ffe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008002:	fa01 f303 	lsl.w	r3, r1, r3
 8008006:	4298      	cmp	r0, r3
 8008008:	d142      	bne.n	8008090 <_strtod_l+0x8f8>
 800800a:	4ba7      	ldr	r3, [pc, #668]	; (80082a8 <_strtod_l+0xb10>)
 800800c:	429d      	cmp	r5, r3
 800800e:	d102      	bne.n	8008016 <_strtod_l+0x87e>
 8008010:	3001      	adds	r0, #1
 8008012:	f43f addf 	beq.w	8007bd4 <_strtod_l+0x43c>
 8008016:	4ba3      	ldr	r3, [pc, #652]	; (80082a4 <_strtod_l+0xb0c>)
 8008018:	402b      	ands	r3, r5
 800801a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800801e:	f04f 0a00 	mov.w	sl, #0
 8008022:	e7a0      	b.n	8007f66 <_strtod_l+0x7ce>
 8008024:	f04f 33ff 	mov.w	r3, #4294967295
 8008028:	e7ed      	b.n	8008006 <_strtod_l+0x86e>
 800802a:	460b      	mov	r3, r1
 800802c:	e7eb      	b.n	8008006 <_strtod_l+0x86e>
 800802e:	bb7b      	cbnz	r3, 8008090 <_strtod_l+0x8f8>
 8008030:	f1ba 0f00 	cmp.w	sl, #0
 8008034:	d12c      	bne.n	8008090 <_strtod_l+0x8f8>
 8008036:	9904      	ldr	r1, [sp, #16]
 8008038:	4a9a      	ldr	r2, [pc, #616]	; (80082a4 <_strtod_l+0xb0c>)
 800803a:	465b      	mov	r3, fp
 800803c:	b1f1      	cbz	r1, 800807c <_strtod_l+0x8e4>
 800803e:	ea02 010b 	and.w	r1, r2, fp
 8008042:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008046:	dc19      	bgt.n	800807c <_strtod_l+0x8e4>
 8008048:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800804c:	f77f ae5b 	ble.w	8007d06 <_strtod_l+0x56e>
 8008050:	4a96      	ldr	r2, [pc, #600]	; (80082ac <_strtod_l+0xb14>)
 8008052:	2300      	movs	r3, #0
 8008054:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008058:	4650      	mov	r0, sl
 800805a:	4659      	mov	r1, fp
 800805c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008060:	f7f8 fafa 	bl	8000658 <__aeabi_dmul>
 8008064:	4682      	mov	sl, r0
 8008066:	468b      	mov	fp, r1
 8008068:	2900      	cmp	r1, #0
 800806a:	f47f adbe 	bne.w	8007bea <_strtod_l+0x452>
 800806e:	2800      	cmp	r0, #0
 8008070:	f47f adbb 	bne.w	8007bea <_strtod_l+0x452>
 8008074:	2322      	movs	r3, #34	; 0x22
 8008076:	f8c9 3000 	str.w	r3, [r9]
 800807a:	e5b6      	b.n	8007bea <_strtod_l+0x452>
 800807c:	4013      	ands	r3, r2
 800807e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008082:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008086:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800808a:	f04f 3aff 	mov.w	sl, #4294967295
 800808e:	e76a      	b.n	8007f66 <_strtod_l+0x7ce>
 8008090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008092:	b193      	cbz	r3, 80080ba <_strtod_l+0x922>
 8008094:	422b      	tst	r3, r5
 8008096:	f43f af66 	beq.w	8007f66 <_strtod_l+0x7ce>
 800809a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800809c:	9a04      	ldr	r2, [sp, #16]
 800809e:	4650      	mov	r0, sl
 80080a0:	4659      	mov	r1, fp
 80080a2:	b173      	cbz	r3, 80080c2 <_strtod_l+0x92a>
 80080a4:	f7ff fb5b 	bl	800775e <sulp>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080b0:	f7f8 f91c 	bl	80002ec <__adddf3>
 80080b4:	4682      	mov	sl, r0
 80080b6:	468b      	mov	fp, r1
 80080b8:	e755      	b.n	8007f66 <_strtod_l+0x7ce>
 80080ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080bc:	ea13 0f0a 	tst.w	r3, sl
 80080c0:	e7e9      	b.n	8008096 <_strtod_l+0x8fe>
 80080c2:	f7ff fb4c 	bl	800775e <sulp>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080ce:	f7f8 f90b 	bl	80002e8 <__aeabi_dsub>
 80080d2:	2200      	movs	r2, #0
 80080d4:	2300      	movs	r3, #0
 80080d6:	4682      	mov	sl, r0
 80080d8:	468b      	mov	fp, r1
 80080da:	f7f8 fd25 	bl	8000b28 <__aeabi_dcmpeq>
 80080de:	2800      	cmp	r0, #0
 80080e0:	f47f ae11 	bne.w	8007d06 <_strtod_l+0x56e>
 80080e4:	e73f      	b.n	8007f66 <_strtod_l+0x7ce>
 80080e6:	4641      	mov	r1, r8
 80080e8:	4620      	mov	r0, r4
 80080ea:	f001 ff26 	bl	8009f3a <__ratio>
 80080ee:	ec57 6b10 	vmov	r6, r7, d0
 80080f2:	2200      	movs	r2, #0
 80080f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080f8:	ee10 0a10 	vmov	r0, s0
 80080fc:	4639      	mov	r1, r7
 80080fe:	f7f8 fd27 	bl	8000b50 <__aeabi_dcmple>
 8008102:	2800      	cmp	r0, #0
 8008104:	d077      	beq.n	80081f6 <_strtod_l+0xa5e>
 8008106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008108:	2b00      	cmp	r3, #0
 800810a:	d04a      	beq.n	80081a2 <_strtod_l+0xa0a>
 800810c:	4b68      	ldr	r3, [pc, #416]	; (80082b0 <_strtod_l+0xb18>)
 800810e:	2200      	movs	r2, #0
 8008110:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008114:	4f66      	ldr	r7, [pc, #408]	; (80082b0 <_strtod_l+0xb18>)
 8008116:	2600      	movs	r6, #0
 8008118:	4b62      	ldr	r3, [pc, #392]	; (80082a4 <_strtod_l+0xb0c>)
 800811a:	402b      	ands	r3, r5
 800811c:	930f      	str	r3, [sp, #60]	; 0x3c
 800811e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008120:	4b64      	ldr	r3, [pc, #400]	; (80082b4 <_strtod_l+0xb1c>)
 8008122:	429a      	cmp	r2, r3
 8008124:	f040 80ce 	bne.w	80082c4 <_strtod_l+0xb2c>
 8008128:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800812c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008130:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008134:	ec4b ab10 	vmov	d0, sl, fp
 8008138:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800813c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008140:	f001 fe36 	bl	8009db0 <__ulp>
 8008144:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008148:	ec53 2b10 	vmov	r2, r3, d0
 800814c:	f7f8 fa84 	bl	8000658 <__aeabi_dmul>
 8008150:	4652      	mov	r2, sl
 8008152:	465b      	mov	r3, fp
 8008154:	f7f8 f8ca 	bl	80002ec <__adddf3>
 8008158:	460b      	mov	r3, r1
 800815a:	4952      	ldr	r1, [pc, #328]	; (80082a4 <_strtod_l+0xb0c>)
 800815c:	4a56      	ldr	r2, [pc, #344]	; (80082b8 <_strtod_l+0xb20>)
 800815e:	4019      	ands	r1, r3
 8008160:	4291      	cmp	r1, r2
 8008162:	4682      	mov	sl, r0
 8008164:	d95b      	bls.n	800821e <_strtod_l+0xa86>
 8008166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008168:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800816c:	4293      	cmp	r3, r2
 800816e:	d103      	bne.n	8008178 <_strtod_l+0x9e0>
 8008170:	9b08      	ldr	r3, [sp, #32]
 8008172:	3301      	adds	r3, #1
 8008174:	f43f ad2e 	beq.w	8007bd4 <_strtod_l+0x43c>
 8008178:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80082a8 <_strtod_l+0xb10>
 800817c:	f04f 3aff 	mov.w	sl, #4294967295
 8008180:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008182:	4648      	mov	r0, r9
 8008184:	f001 fb7d 	bl	8009882 <_Bfree>
 8008188:	9905      	ldr	r1, [sp, #20]
 800818a:	4648      	mov	r0, r9
 800818c:	f001 fb79 	bl	8009882 <_Bfree>
 8008190:	4641      	mov	r1, r8
 8008192:	4648      	mov	r0, r9
 8008194:	f001 fb75 	bl	8009882 <_Bfree>
 8008198:	4621      	mov	r1, r4
 800819a:	4648      	mov	r0, r9
 800819c:	f001 fb71 	bl	8009882 <_Bfree>
 80081a0:	e619      	b.n	8007dd6 <_strtod_l+0x63e>
 80081a2:	f1ba 0f00 	cmp.w	sl, #0
 80081a6:	d11a      	bne.n	80081de <_strtod_l+0xa46>
 80081a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081ac:	b9eb      	cbnz	r3, 80081ea <_strtod_l+0xa52>
 80081ae:	2200      	movs	r2, #0
 80081b0:	4b3f      	ldr	r3, [pc, #252]	; (80082b0 <_strtod_l+0xb18>)
 80081b2:	4630      	mov	r0, r6
 80081b4:	4639      	mov	r1, r7
 80081b6:	f7f8 fcc1 	bl	8000b3c <__aeabi_dcmplt>
 80081ba:	b9c8      	cbnz	r0, 80081f0 <_strtod_l+0xa58>
 80081bc:	4630      	mov	r0, r6
 80081be:	4639      	mov	r1, r7
 80081c0:	2200      	movs	r2, #0
 80081c2:	4b3e      	ldr	r3, [pc, #248]	; (80082bc <_strtod_l+0xb24>)
 80081c4:	f7f8 fa48 	bl	8000658 <__aeabi_dmul>
 80081c8:	4606      	mov	r6, r0
 80081ca:	460f      	mov	r7, r1
 80081cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80081d0:	9618      	str	r6, [sp, #96]	; 0x60
 80081d2:	9319      	str	r3, [sp, #100]	; 0x64
 80081d4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80081d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80081dc:	e79c      	b.n	8008118 <_strtod_l+0x980>
 80081de:	f1ba 0f01 	cmp.w	sl, #1
 80081e2:	d102      	bne.n	80081ea <_strtod_l+0xa52>
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	f43f ad8e 	beq.w	8007d06 <_strtod_l+0x56e>
 80081ea:	2200      	movs	r2, #0
 80081ec:	4b34      	ldr	r3, [pc, #208]	; (80082c0 <_strtod_l+0xb28>)
 80081ee:	e78f      	b.n	8008110 <_strtod_l+0x978>
 80081f0:	2600      	movs	r6, #0
 80081f2:	4f32      	ldr	r7, [pc, #200]	; (80082bc <_strtod_l+0xb24>)
 80081f4:	e7ea      	b.n	80081cc <_strtod_l+0xa34>
 80081f6:	4b31      	ldr	r3, [pc, #196]	; (80082bc <_strtod_l+0xb24>)
 80081f8:	4630      	mov	r0, r6
 80081fa:	4639      	mov	r1, r7
 80081fc:	2200      	movs	r2, #0
 80081fe:	f7f8 fa2b 	bl	8000658 <__aeabi_dmul>
 8008202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008204:	4606      	mov	r6, r0
 8008206:	460f      	mov	r7, r1
 8008208:	b933      	cbnz	r3, 8008218 <_strtod_l+0xa80>
 800820a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800820e:	9010      	str	r0, [sp, #64]	; 0x40
 8008210:	9311      	str	r3, [sp, #68]	; 0x44
 8008212:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008216:	e7df      	b.n	80081d8 <_strtod_l+0xa40>
 8008218:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800821c:	e7f9      	b.n	8008212 <_strtod_l+0xa7a>
 800821e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008222:	9b04      	ldr	r3, [sp, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1ab      	bne.n	8008180 <_strtod_l+0x9e8>
 8008228:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800822c:	0d1b      	lsrs	r3, r3, #20
 800822e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008230:	051b      	lsls	r3, r3, #20
 8008232:	429a      	cmp	r2, r3
 8008234:	465d      	mov	r5, fp
 8008236:	d1a3      	bne.n	8008180 <_strtod_l+0x9e8>
 8008238:	4639      	mov	r1, r7
 800823a:	4630      	mov	r0, r6
 800823c:	f7f8 fcbc 	bl	8000bb8 <__aeabi_d2iz>
 8008240:	f7f8 f9a0 	bl	8000584 <__aeabi_i2d>
 8008244:	460b      	mov	r3, r1
 8008246:	4602      	mov	r2, r0
 8008248:	4639      	mov	r1, r7
 800824a:	4630      	mov	r0, r6
 800824c:	f7f8 f84c 	bl	80002e8 <__aeabi_dsub>
 8008250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008252:	4606      	mov	r6, r0
 8008254:	460f      	mov	r7, r1
 8008256:	b933      	cbnz	r3, 8008266 <_strtod_l+0xace>
 8008258:	f1ba 0f00 	cmp.w	sl, #0
 800825c:	d103      	bne.n	8008266 <_strtod_l+0xace>
 800825e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008262:	2d00      	cmp	r5, #0
 8008264:	d06d      	beq.n	8008342 <_strtod_l+0xbaa>
 8008266:	a30a      	add	r3, pc, #40	; (adr r3, 8008290 <_strtod_l+0xaf8>)
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	4630      	mov	r0, r6
 800826e:	4639      	mov	r1, r7
 8008270:	f7f8 fc64 	bl	8000b3c <__aeabi_dcmplt>
 8008274:	2800      	cmp	r0, #0
 8008276:	f47f acb8 	bne.w	8007bea <_strtod_l+0x452>
 800827a:	a307      	add	r3, pc, #28	; (adr r3, 8008298 <_strtod_l+0xb00>)
 800827c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008280:	4630      	mov	r0, r6
 8008282:	4639      	mov	r1, r7
 8008284:	f7f8 fc78 	bl	8000b78 <__aeabi_dcmpgt>
 8008288:	2800      	cmp	r0, #0
 800828a:	f43f af79 	beq.w	8008180 <_strtod_l+0x9e8>
 800828e:	e4ac      	b.n	8007bea <_strtod_l+0x452>
 8008290:	94a03595 	.word	0x94a03595
 8008294:	3fdfffff 	.word	0x3fdfffff
 8008298:	35afe535 	.word	0x35afe535
 800829c:	3fe00000 	.word	0x3fe00000
 80082a0:	000fffff 	.word	0x000fffff
 80082a4:	7ff00000 	.word	0x7ff00000
 80082a8:	7fefffff 	.word	0x7fefffff
 80082ac:	39500000 	.word	0x39500000
 80082b0:	3ff00000 	.word	0x3ff00000
 80082b4:	7fe00000 	.word	0x7fe00000
 80082b8:	7c9fffff 	.word	0x7c9fffff
 80082bc:	3fe00000 	.word	0x3fe00000
 80082c0:	bff00000 	.word	0xbff00000
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	b333      	cbz	r3, 8008316 <_strtod_l+0xb7e>
 80082c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082ca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082ce:	d822      	bhi.n	8008316 <_strtod_l+0xb7e>
 80082d0:	a327      	add	r3, pc, #156	; (adr r3, 8008370 <_strtod_l+0xbd8>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	4630      	mov	r0, r6
 80082d8:	4639      	mov	r1, r7
 80082da:	f7f8 fc39 	bl	8000b50 <__aeabi_dcmple>
 80082de:	b1a0      	cbz	r0, 800830a <_strtod_l+0xb72>
 80082e0:	4639      	mov	r1, r7
 80082e2:	4630      	mov	r0, r6
 80082e4:	f7f8 fc90 	bl	8000c08 <__aeabi_d2uiz>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	bf08      	it	eq
 80082ec:	2001      	moveq	r0, #1
 80082ee:	f7f8 f939 	bl	8000564 <__aeabi_ui2d>
 80082f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082f4:	4606      	mov	r6, r0
 80082f6:	460f      	mov	r7, r1
 80082f8:	bb03      	cbnz	r3, 800833c <_strtod_l+0xba4>
 80082fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082fe:	9012      	str	r0, [sp, #72]	; 0x48
 8008300:	9313      	str	r3, [sp, #76]	; 0x4c
 8008302:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008306:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800830a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800830c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800830e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	930b      	str	r3, [sp, #44]	; 0x2c
 8008316:	ed9d 0b08 	vldr	d0, [sp, #32]
 800831a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800831e:	f001 fd47 	bl	8009db0 <__ulp>
 8008322:	4650      	mov	r0, sl
 8008324:	ec53 2b10 	vmov	r2, r3, d0
 8008328:	4659      	mov	r1, fp
 800832a:	f7f8 f995 	bl	8000658 <__aeabi_dmul>
 800832e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008332:	f7f7 ffdb 	bl	80002ec <__adddf3>
 8008336:	4682      	mov	sl, r0
 8008338:	468b      	mov	fp, r1
 800833a:	e772      	b.n	8008222 <_strtod_l+0xa8a>
 800833c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008340:	e7df      	b.n	8008302 <_strtod_l+0xb6a>
 8008342:	a30d      	add	r3, pc, #52	; (adr r3, 8008378 <_strtod_l+0xbe0>)
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	f7f8 fbf8 	bl	8000b3c <__aeabi_dcmplt>
 800834c:	e79c      	b.n	8008288 <_strtod_l+0xaf0>
 800834e:	2300      	movs	r3, #0
 8008350:	930d      	str	r3, [sp, #52]	; 0x34
 8008352:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008354:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	f7ff ba61 	b.w	800781e <_strtod_l+0x86>
 800835c:	2b65      	cmp	r3, #101	; 0x65
 800835e:	f04f 0200 	mov.w	r2, #0
 8008362:	f43f ab4e 	beq.w	8007a02 <_strtod_l+0x26a>
 8008366:	2101      	movs	r1, #1
 8008368:	4614      	mov	r4, r2
 800836a:	9104      	str	r1, [sp, #16]
 800836c:	f7ff bacb 	b.w	8007906 <_strtod_l+0x16e>
 8008370:	ffc00000 	.word	0xffc00000
 8008374:	41dfffff 	.word	0x41dfffff
 8008378:	94a03595 	.word	0x94a03595
 800837c:	3fcfffff 	.word	0x3fcfffff

08008380 <strtod>:
 8008380:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <strtod+0x20>)
 8008382:	4a08      	ldr	r2, [pc, #32]	; (80083a4 <strtod+0x24>)
 8008384:	b410      	push	{r4}
 8008386:	681c      	ldr	r4, [r3, #0]
 8008388:	6a23      	ldr	r3, [r4, #32]
 800838a:	2b00      	cmp	r3, #0
 800838c:	bf08      	it	eq
 800838e:	4613      	moveq	r3, r2
 8008390:	460a      	mov	r2, r1
 8008392:	4601      	mov	r1, r0
 8008394:	4620      	mov	r0, r4
 8008396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800839a:	f7ff b9fd 	b.w	8007798 <_strtod_l>
 800839e:	bf00      	nop
 80083a0:	20000034 	.word	0x20000034
 80083a4:	20000098 	.word	0x20000098

080083a8 <_strtol_l.isra.0>:
 80083a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083ac:	4680      	mov	r8, r0
 80083ae:	4689      	mov	r9, r1
 80083b0:	4692      	mov	sl, r2
 80083b2:	461e      	mov	r6, r3
 80083b4:	460f      	mov	r7, r1
 80083b6:	463d      	mov	r5, r7
 80083b8:	9808      	ldr	r0, [sp, #32]
 80083ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083be:	f001 f9f1 	bl	80097a4 <__locale_ctype_ptr_l>
 80083c2:	4420      	add	r0, r4
 80083c4:	7843      	ldrb	r3, [r0, #1]
 80083c6:	f013 0308 	ands.w	r3, r3, #8
 80083ca:	d132      	bne.n	8008432 <_strtol_l.isra.0+0x8a>
 80083cc:	2c2d      	cmp	r4, #45	; 0x2d
 80083ce:	d132      	bne.n	8008436 <_strtol_l.isra.0+0x8e>
 80083d0:	787c      	ldrb	r4, [r7, #1]
 80083d2:	1cbd      	adds	r5, r7, #2
 80083d4:	2201      	movs	r2, #1
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	d05d      	beq.n	8008496 <_strtol_l.isra.0+0xee>
 80083da:	2e10      	cmp	r6, #16
 80083dc:	d109      	bne.n	80083f2 <_strtol_l.isra.0+0x4a>
 80083de:	2c30      	cmp	r4, #48	; 0x30
 80083e0:	d107      	bne.n	80083f2 <_strtol_l.isra.0+0x4a>
 80083e2:	782b      	ldrb	r3, [r5, #0]
 80083e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80083e8:	2b58      	cmp	r3, #88	; 0x58
 80083ea:	d14f      	bne.n	800848c <_strtol_l.isra.0+0xe4>
 80083ec:	786c      	ldrb	r4, [r5, #1]
 80083ee:	2610      	movs	r6, #16
 80083f0:	3502      	adds	r5, #2
 80083f2:	2a00      	cmp	r2, #0
 80083f4:	bf14      	ite	ne
 80083f6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80083fa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80083fe:	2700      	movs	r7, #0
 8008400:	fbb1 fcf6 	udiv	ip, r1, r6
 8008404:	4638      	mov	r0, r7
 8008406:	fb06 1e1c 	mls	lr, r6, ip, r1
 800840a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800840e:	2b09      	cmp	r3, #9
 8008410:	d817      	bhi.n	8008442 <_strtol_l.isra.0+0x9a>
 8008412:	461c      	mov	r4, r3
 8008414:	42a6      	cmp	r6, r4
 8008416:	dd23      	ble.n	8008460 <_strtol_l.isra.0+0xb8>
 8008418:	1c7b      	adds	r3, r7, #1
 800841a:	d007      	beq.n	800842c <_strtol_l.isra.0+0x84>
 800841c:	4584      	cmp	ip, r0
 800841e:	d31c      	bcc.n	800845a <_strtol_l.isra.0+0xb2>
 8008420:	d101      	bne.n	8008426 <_strtol_l.isra.0+0x7e>
 8008422:	45a6      	cmp	lr, r4
 8008424:	db19      	blt.n	800845a <_strtol_l.isra.0+0xb2>
 8008426:	fb00 4006 	mla	r0, r0, r6, r4
 800842a:	2701      	movs	r7, #1
 800842c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008430:	e7eb      	b.n	800840a <_strtol_l.isra.0+0x62>
 8008432:	462f      	mov	r7, r5
 8008434:	e7bf      	b.n	80083b6 <_strtol_l.isra.0+0xe>
 8008436:	2c2b      	cmp	r4, #43	; 0x2b
 8008438:	bf04      	itt	eq
 800843a:	1cbd      	addeq	r5, r7, #2
 800843c:	787c      	ldrbeq	r4, [r7, #1]
 800843e:	461a      	mov	r2, r3
 8008440:	e7c9      	b.n	80083d6 <_strtol_l.isra.0+0x2e>
 8008442:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008446:	2b19      	cmp	r3, #25
 8008448:	d801      	bhi.n	800844e <_strtol_l.isra.0+0xa6>
 800844a:	3c37      	subs	r4, #55	; 0x37
 800844c:	e7e2      	b.n	8008414 <_strtol_l.isra.0+0x6c>
 800844e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008452:	2b19      	cmp	r3, #25
 8008454:	d804      	bhi.n	8008460 <_strtol_l.isra.0+0xb8>
 8008456:	3c57      	subs	r4, #87	; 0x57
 8008458:	e7dc      	b.n	8008414 <_strtol_l.isra.0+0x6c>
 800845a:	f04f 37ff 	mov.w	r7, #4294967295
 800845e:	e7e5      	b.n	800842c <_strtol_l.isra.0+0x84>
 8008460:	1c7b      	adds	r3, r7, #1
 8008462:	d108      	bne.n	8008476 <_strtol_l.isra.0+0xce>
 8008464:	2322      	movs	r3, #34	; 0x22
 8008466:	f8c8 3000 	str.w	r3, [r8]
 800846a:	4608      	mov	r0, r1
 800846c:	f1ba 0f00 	cmp.w	sl, #0
 8008470:	d107      	bne.n	8008482 <_strtol_l.isra.0+0xda>
 8008472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008476:	b102      	cbz	r2, 800847a <_strtol_l.isra.0+0xd2>
 8008478:	4240      	negs	r0, r0
 800847a:	f1ba 0f00 	cmp.w	sl, #0
 800847e:	d0f8      	beq.n	8008472 <_strtol_l.isra.0+0xca>
 8008480:	b10f      	cbz	r7, 8008486 <_strtol_l.isra.0+0xde>
 8008482:	f105 39ff 	add.w	r9, r5, #4294967295
 8008486:	f8ca 9000 	str.w	r9, [sl]
 800848a:	e7f2      	b.n	8008472 <_strtol_l.isra.0+0xca>
 800848c:	2430      	movs	r4, #48	; 0x30
 800848e:	2e00      	cmp	r6, #0
 8008490:	d1af      	bne.n	80083f2 <_strtol_l.isra.0+0x4a>
 8008492:	2608      	movs	r6, #8
 8008494:	e7ad      	b.n	80083f2 <_strtol_l.isra.0+0x4a>
 8008496:	2c30      	cmp	r4, #48	; 0x30
 8008498:	d0a3      	beq.n	80083e2 <_strtol_l.isra.0+0x3a>
 800849a:	260a      	movs	r6, #10
 800849c:	e7a9      	b.n	80083f2 <_strtol_l.isra.0+0x4a>
	...

080084a0 <strtol>:
 80084a0:	4b08      	ldr	r3, [pc, #32]	; (80084c4 <strtol+0x24>)
 80084a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084a4:	681c      	ldr	r4, [r3, #0]
 80084a6:	4d08      	ldr	r5, [pc, #32]	; (80084c8 <strtol+0x28>)
 80084a8:	6a23      	ldr	r3, [r4, #32]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	bf08      	it	eq
 80084ae:	462b      	moveq	r3, r5
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	4613      	mov	r3, r2
 80084b4:	460a      	mov	r2, r1
 80084b6:	4601      	mov	r1, r0
 80084b8:	4620      	mov	r0, r4
 80084ba:	f7ff ff75 	bl	80083a8 <_strtol_l.isra.0>
 80084be:	b003      	add	sp, #12
 80084c0:	bd30      	pop	{r4, r5, pc}
 80084c2:	bf00      	nop
 80084c4:	20000034 	.word	0x20000034
 80084c8:	20000098 	.word	0x20000098

080084cc <quorem>:
 80084cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	6903      	ldr	r3, [r0, #16]
 80084d2:	690c      	ldr	r4, [r1, #16]
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	4680      	mov	r8, r0
 80084d8:	f2c0 8082 	blt.w	80085e0 <quorem+0x114>
 80084dc:	3c01      	subs	r4, #1
 80084de:	f101 0714 	add.w	r7, r1, #20
 80084e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80084e6:	f100 0614 	add.w	r6, r0, #20
 80084ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80084ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80084f2:	eb06 030c 	add.w	r3, r6, ip
 80084f6:	3501      	adds	r5, #1
 80084f8:	eb07 090c 	add.w	r9, r7, ip
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8008502:	b395      	cbz	r5, 800856a <quorem+0x9e>
 8008504:	f04f 0a00 	mov.w	sl, #0
 8008508:	4638      	mov	r0, r7
 800850a:	46b6      	mov	lr, r6
 800850c:	46d3      	mov	fp, sl
 800850e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008512:	b293      	uxth	r3, r2
 8008514:	fb05 a303 	mla	r3, r5, r3, sl
 8008518:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800851c:	b29b      	uxth	r3, r3
 800851e:	ebab 0303 	sub.w	r3, fp, r3
 8008522:	0c12      	lsrs	r2, r2, #16
 8008524:	f8de b000 	ldr.w	fp, [lr]
 8008528:	fb05 a202 	mla	r2, r5, r2, sl
 800852c:	fa13 f38b 	uxtah	r3, r3, fp
 8008530:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008534:	fa1f fb82 	uxth.w	fp, r2
 8008538:	f8de 2000 	ldr.w	r2, [lr]
 800853c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008540:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008544:	b29b      	uxth	r3, r3
 8008546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800854a:	4581      	cmp	r9, r0
 800854c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008550:	f84e 3b04 	str.w	r3, [lr], #4
 8008554:	d2db      	bcs.n	800850e <quorem+0x42>
 8008556:	f856 300c 	ldr.w	r3, [r6, ip]
 800855a:	b933      	cbnz	r3, 800856a <quorem+0x9e>
 800855c:	9b01      	ldr	r3, [sp, #4]
 800855e:	3b04      	subs	r3, #4
 8008560:	429e      	cmp	r6, r3
 8008562:	461a      	mov	r2, r3
 8008564:	d330      	bcc.n	80085c8 <quorem+0xfc>
 8008566:	f8c8 4010 	str.w	r4, [r8, #16]
 800856a:	4640      	mov	r0, r8
 800856c:	f001 fba8 	bl	8009cc0 <__mcmp>
 8008570:	2800      	cmp	r0, #0
 8008572:	db25      	blt.n	80085c0 <quorem+0xf4>
 8008574:	3501      	adds	r5, #1
 8008576:	4630      	mov	r0, r6
 8008578:	f04f 0c00 	mov.w	ip, #0
 800857c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008580:	f8d0 e000 	ldr.w	lr, [r0]
 8008584:	b293      	uxth	r3, r2
 8008586:	ebac 0303 	sub.w	r3, ip, r3
 800858a:	0c12      	lsrs	r2, r2, #16
 800858c:	fa13 f38e 	uxtah	r3, r3, lr
 8008590:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008594:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008598:	b29b      	uxth	r3, r3
 800859a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800859e:	45b9      	cmp	r9, r7
 80085a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80085a4:	f840 3b04 	str.w	r3, [r0], #4
 80085a8:	d2e8      	bcs.n	800857c <quorem+0xb0>
 80085aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80085ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80085b2:	b92a      	cbnz	r2, 80085c0 <quorem+0xf4>
 80085b4:	3b04      	subs	r3, #4
 80085b6:	429e      	cmp	r6, r3
 80085b8:	461a      	mov	r2, r3
 80085ba:	d30b      	bcc.n	80085d4 <quorem+0x108>
 80085bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80085c0:	4628      	mov	r0, r5
 80085c2:	b003      	add	sp, #12
 80085c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c8:	6812      	ldr	r2, [r2, #0]
 80085ca:	3b04      	subs	r3, #4
 80085cc:	2a00      	cmp	r2, #0
 80085ce:	d1ca      	bne.n	8008566 <quorem+0x9a>
 80085d0:	3c01      	subs	r4, #1
 80085d2:	e7c5      	b.n	8008560 <quorem+0x94>
 80085d4:	6812      	ldr	r2, [r2, #0]
 80085d6:	3b04      	subs	r3, #4
 80085d8:	2a00      	cmp	r2, #0
 80085da:	d1ef      	bne.n	80085bc <quorem+0xf0>
 80085dc:	3c01      	subs	r4, #1
 80085de:	e7ea      	b.n	80085b6 <quorem+0xea>
 80085e0:	2000      	movs	r0, #0
 80085e2:	e7ee      	b.n	80085c2 <quorem+0xf6>
 80085e4:	0000      	movs	r0, r0
	...

080085e8 <_dtoa_r>:
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	ec57 6b10 	vmov	r6, r7, d0
 80085f0:	b097      	sub	sp, #92	; 0x5c
 80085f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085f4:	9106      	str	r1, [sp, #24]
 80085f6:	4604      	mov	r4, r0
 80085f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80085fa:	9312      	str	r3, [sp, #72]	; 0x48
 80085fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008600:	e9cd 6700 	strd	r6, r7, [sp]
 8008604:	b93d      	cbnz	r5, 8008616 <_dtoa_r+0x2e>
 8008606:	2010      	movs	r0, #16
 8008608:	f001 f8e0 	bl	80097cc <malloc>
 800860c:	6260      	str	r0, [r4, #36]	; 0x24
 800860e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008612:	6005      	str	r5, [r0, #0]
 8008614:	60c5      	str	r5, [r0, #12]
 8008616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008618:	6819      	ldr	r1, [r3, #0]
 800861a:	b151      	cbz	r1, 8008632 <_dtoa_r+0x4a>
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	604a      	str	r2, [r1, #4]
 8008620:	2301      	movs	r3, #1
 8008622:	4093      	lsls	r3, r2
 8008624:	608b      	str	r3, [r1, #8]
 8008626:	4620      	mov	r0, r4
 8008628:	f001 f92b 	bl	8009882 <_Bfree>
 800862c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	1e3b      	subs	r3, r7, #0
 8008634:	bfbb      	ittet	lt
 8008636:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800863a:	9301      	strlt	r3, [sp, #4]
 800863c:	2300      	movge	r3, #0
 800863e:	2201      	movlt	r2, #1
 8008640:	bfac      	ite	ge
 8008642:	f8c8 3000 	strge.w	r3, [r8]
 8008646:	f8c8 2000 	strlt.w	r2, [r8]
 800864a:	4baf      	ldr	r3, [pc, #700]	; (8008908 <_dtoa_r+0x320>)
 800864c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008650:	ea33 0308 	bics.w	r3, r3, r8
 8008654:	d114      	bne.n	8008680 <_dtoa_r+0x98>
 8008656:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008658:	f242 730f 	movw	r3, #9999	; 0x270f
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	9b00      	ldr	r3, [sp, #0]
 8008660:	b923      	cbnz	r3, 800866c <_dtoa_r+0x84>
 8008662:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008666:	2800      	cmp	r0, #0
 8008668:	f000 8542 	beq.w	80090f0 <_dtoa_r+0xb08>
 800866c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800866e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800891c <_dtoa_r+0x334>
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 8544 	beq.w	8009100 <_dtoa_r+0xb18>
 8008678:	f10b 0303 	add.w	r3, fp, #3
 800867c:	f000 bd3e 	b.w	80090fc <_dtoa_r+0xb14>
 8008680:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008684:	2200      	movs	r2, #0
 8008686:	2300      	movs	r3, #0
 8008688:	4630      	mov	r0, r6
 800868a:	4639      	mov	r1, r7
 800868c:	f7f8 fa4c 	bl	8000b28 <__aeabi_dcmpeq>
 8008690:	4681      	mov	r9, r0
 8008692:	b168      	cbz	r0, 80086b0 <_dtoa_r+0xc8>
 8008694:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008696:	2301      	movs	r3, #1
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 8524 	beq.w	80090ea <_dtoa_r+0xb02>
 80086a2:	4b9a      	ldr	r3, [pc, #616]	; (800890c <_dtoa_r+0x324>)
 80086a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	f000 bd28 	b.w	8009100 <_dtoa_r+0xb18>
 80086b0:	aa14      	add	r2, sp, #80	; 0x50
 80086b2:	a915      	add	r1, sp, #84	; 0x54
 80086b4:	ec47 6b10 	vmov	d0, r6, r7
 80086b8:	4620      	mov	r0, r4
 80086ba:	f001 fbef 	bl	8009e9c <__d2b>
 80086be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80086c2:	9004      	str	r0, [sp, #16]
 80086c4:	2d00      	cmp	r5, #0
 80086c6:	d07c      	beq.n	80087c2 <_dtoa_r+0x1da>
 80086c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80086d0:	46b2      	mov	sl, r6
 80086d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80086d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80086de:	2200      	movs	r2, #0
 80086e0:	4b8b      	ldr	r3, [pc, #556]	; (8008910 <_dtoa_r+0x328>)
 80086e2:	4650      	mov	r0, sl
 80086e4:	4659      	mov	r1, fp
 80086e6:	f7f7 fdff 	bl	80002e8 <__aeabi_dsub>
 80086ea:	a381      	add	r3, pc, #516	; (adr r3, 80088f0 <_dtoa_r+0x308>)
 80086ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f0:	f7f7 ffb2 	bl	8000658 <__aeabi_dmul>
 80086f4:	a380      	add	r3, pc, #512	; (adr r3, 80088f8 <_dtoa_r+0x310>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f7f7 fdf7 	bl	80002ec <__adddf3>
 80086fe:	4606      	mov	r6, r0
 8008700:	4628      	mov	r0, r5
 8008702:	460f      	mov	r7, r1
 8008704:	f7f7 ff3e 	bl	8000584 <__aeabi_i2d>
 8008708:	a37d      	add	r3, pc, #500	; (adr r3, 8008900 <_dtoa_r+0x318>)
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	f7f7 ffa3 	bl	8000658 <__aeabi_dmul>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4630      	mov	r0, r6
 8008718:	4639      	mov	r1, r7
 800871a:	f7f7 fde7 	bl	80002ec <__adddf3>
 800871e:	4606      	mov	r6, r0
 8008720:	460f      	mov	r7, r1
 8008722:	f7f8 fa49 	bl	8000bb8 <__aeabi_d2iz>
 8008726:	2200      	movs	r2, #0
 8008728:	4682      	mov	sl, r0
 800872a:	2300      	movs	r3, #0
 800872c:	4630      	mov	r0, r6
 800872e:	4639      	mov	r1, r7
 8008730:	f7f8 fa04 	bl	8000b3c <__aeabi_dcmplt>
 8008734:	b148      	cbz	r0, 800874a <_dtoa_r+0x162>
 8008736:	4650      	mov	r0, sl
 8008738:	f7f7 ff24 	bl	8000584 <__aeabi_i2d>
 800873c:	4632      	mov	r2, r6
 800873e:	463b      	mov	r3, r7
 8008740:	f7f8 f9f2 	bl	8000b28 <__aeabi_dcmpeq>
 8008744:	b908      	cbnz	r0, 800874a <_dtoa_r+0x162>
 8008746:	f10a 3aff 	add.w	sl, sl, #4294967295
 800874a:	f1ba 0f16 	cmp.w	sl, #22
 800874e:	d859      	bhi.n	8008804 <_dtoa_r+0x21c>
 8008750:	4970      	ldr	r1, [pc, #448]	; (8008914 <_dtoa_r+0x32c>)
 8008752:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008756:	e9dd 2300 	ldrd	r2, r3, [sp]
 800875a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800875e:	f7f8 fa0b 	bl	8000b78 <__aeabi_dcmpgt>
 8008762:	2800      	cmp	r0, #0
 8008764:	d050      	beq.n	8008808 <_dtoa_r+0x220>
 8008766:	f10a 3aff 	add.w	sl, sl, #4294967295
 800876a:	2300      	movs	r3, #0
 800876c:	930f      	str	r3, [sp, #60]	; 0x3c
 800876e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008770:	1b5d      	subs	r5, r3, r5
 8008772:	f1b5 0801 	subs.w	r8, r5, #1
 8008776:	bf49      	itett	mi
 8008778:	f1c5 0301 	rsbmi	r3, r5, #1
 800877c:	2300      	movpl	r3, #0
 800877e:	9305      	strmi	r3, [sp, #20]
 8008780:	f04f 0800 	movmi.w	r8, #0
 8008784:	bf58      	it	pl
 8008786:	9305      	strpl	r3, [sp, #20]
 8008788:	f1ba 0f00 	cmp.w	sl, #0
 800878c:	db3e      	blt.n	800880c <_dtoa_r+0x224>
 800878e:	2300      	movs	r3, #0
 8008790:	44d0      	add	r8, sl
 8008792:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008796:	9307      	str	r3, [sp, #28]
 8008798:	9b06      	ldr	r3, [sp, #24]
 800879a:	2b09      	cmp	r3, #9
 800879c:	f200 8090 	bhi.w	80088c0 <_dtoa_r+0x2d8>
 80087a0:	2b05      	cmp	r3, #5
 80087a2:	bfc4      	itt	gt
 80087a4:	3b04      	subgt	r3, #4
 80087a6:	9306      	strgt	r3, [sp, #24]
 80087a8:	9b06      	ldr	r3, [sp, #24]
 80087aa:	f1a3 0302 	sub.w	r3, r3, #2
 80087ae:	bfcc      	ite	gt
 80087b0:	2500      	movgt	r5, #0
 80087b2:	2501      	movle	r5, #1
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	f200 808f 	bhi.w	80088d8 <_dtoa_r+0x2f0>
 80087ba:	e8df f003 	tbb	[pc, r3]
 80087be:	7f7d      	.short	0x7f7d
 80087c0:	7131      	.short	0x7131
 80087c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80087c6:	441d      	add	r5, r3
 80087c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80087cc:	2820      	cmp	r0, #32
 80087ce:	dd13      	ble.n	80087f8 <_dtoa_r+0x210>
 80087d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80087d4:	9b00      	ldr	r3, [sp, #0]
 80087d6:	fa08 f800 	lsl.w	r8, r8, r0
 80087da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80087de:	fa23 f000 	lsr.w	r0, r3, r0
 80087e2:	ea48 0000 	orr.w	r0, r8, r0
 80087e6:	f7f7 febd 	bl	8000564 <__aeabi_ui2d>
 80087ea:	2301      	movs	r3, #1
 80087ec:	4682      	mov	sl, r0
 80087ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80087f2:	3d01      	subs	r5, #1
 80087f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80087f6:	e772      	b.n	80086de <_dtoa_r+0xf6>
 80087f8:	9b00      	ldr	r3, [sp, #0]
 80087fa:	f1c0 0020 	rsb	r0, r0, #32
 80087fe:	fa03 f000 	lsl.w	r0, r3, r0
 8008802:	e7f0      	b.n	80087e6 <_dtoa_r+0x1fe>
 8008804:	2301      	movs	r3, #1
 8008806:	e7b1      	b.n	800876c <_dtoa_r+0x184>
 8008808:	900f      	str	r0, [sp, #60]	; 0x3c
 800880a:	e7b0      	b.n	800876e <_dtoa_r+0x186>
 800880c:	9b05      	ldr	r3, [sp, #20]
 800880e:	eba3 030a 	sub.w	r3, r3, sl
 8008812:	9305      	str	r3, [sp, #20]
 8008814:	f1ca 0300 	rsb	r3, sl, #0
 8008818:	9307      	str	r3, [sp, #28]
 800881a:	2300      	movs	r3, #0
 800881c:	930e      	str	r3, [sp, #56]	; 0x38
 800881e:	e7bb      	b.n	8008798 <_dtoa_r+0x1b0>
 8008820:	2301      	movs	r3, #1
 8008822:	930a      	str	r3, [sp, #40]	; 0x28
 8008824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008826:	2b00      	cmp	r3, #0
 8008828:	dd59      	ble.n	80088de <_dtoa_r+0x2f6>
 800882a:	9302      	str	r3, [sp, #8]
 800882c:	4699      	mov	r9, r3
 800882e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008830:	2200      	movs	r2, #0
 8008832:	6072      	str	r2, [r6, #4]
 8008834:	2204      	movs	r2, #4
 8008836:	f102 0014 	add.w	r0, r2, #20
 800883a:	4298      	cmp	r0, r3
 800883c:	6871      	ldr	r1, [r6, #4]
 800883e:	d953      	bls.n	80088e8 <_dtoa_r+0x300>
 8008840:	4620      	mov	r0, r4
 8008842:	f000 ffea 	bl	800981a <_Balloc>
 8008846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008848:	6030      	str	r0, [r6, #0]
 800884a:	f1b9 0f0e 	cmp.w	r9, #14
 800884e:	f8d3 b000 	ldr.w	fp, [r3]
 8008852:	f200 80e6 	bhi.w	8008a22 <_dtoa_r+0x43a>
 8008856:	2d00      	cmp	r5, #0
 8008858:	f000 80e3 	beq.w	8008a22 <_dtoa_r+0x43a>
 800885c:	ed9d 7b00 	vldr	d7, [sp]
 8008860:	f1ba 0f00 	cmp.w	sl, #0
 8008864:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008868:	dd74      	ble.n	8008954 <_dtoa_r+0x36c>
 800886a:	4a2a      	ldr	r2, [pc, #168]	; (8008914 <_dtoa_r+0x32c>)
 800886c:	f00a 030f 	and.w	r3, sl, #15
 8008870:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008874:	ed93 7b00 	vldr	d7, [r3]
 8008878:	ea4f 162a 	mov.w	r6, sl, asr #4
 800887c:	06f0      	lsls	r0, r6, #27
 800887e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008882:	d565      	bpl.n	8008950 <_dtoa_r+0x368>
 8008884:	4b24      	ldr	r3, [pc, #144]	; (8008918 <_dtoa_r+0x330>)
 8008886:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800888a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800888e:	f7f8 f80d 	bl	80008ac <__aeabi_ddiv>
 8008892:	e9cd 0100 	strd	r0, r1, [sp]
 8008896:	f006 060f 	and.w	r6, r6, #15
 800889a:	2503      	movs	r5, #3
 800889c:	4f1e      	ldr	r7, [pc, #120]	; (8008918 <_dtoa_r+0x330>)
 800889e:	e04c      	b.n	800893a <_dtoa_r+0x352>
 80088a0:	2301      	movs	r3, #1
 80088a2:	930a      	str	r3, [sp, #40]	; 0x28
 80088a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a6:	4453      	add	r3, sl
 80088a8:	f103 0901 	add.w	r9, r3, #1
 80088ac:	9302      	str	r3, [sp, #8]
 80088ae:	464b      	mov	r3, r9
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	bfb8      	it	lt
 80088b4:	2301      	movlt	r3, #1
 80088b6:	e7ba      	b.n	800882e <_dtoa_r+0x246>
 80088b8:	2300      	movs	r3, #0
 80088ba:	e7b2      	b.n	8008822 <_dtoa_r+0x23a>
 80088bc:	2300      	movs	r3, #0
 80088be:	e7f0      	b.n	80088a2 <_dtoa_r+0x2ba>
 80088c0:	2501      	movs	r5, #1
 80088c2:	2300      	movs	r3, #0
 80088c4:	9306      	str	r3, [sp, #24]
 80088c6:	950a      	str	r5, [sp, #40]	; 0x28
 80088c8:	f04f 33ff 	mov.w	r3, #4294967295
 80088cc:	9302      	str	r3, [sp, #8]
 80088ce:	4699      	mov	r9, r3
 80088d0:	2200      	movs	r2, #0
 80088d2:	2312      	movs	r3, #18
 80088d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80088d6:	e7aa      	b.n	800882e <_dtoa_r+0x246>
 80088d8:	2301      	movs	r3, #1
 80088da:	930a      	str	r3, [sp, #40]	; 0x28
 80088dc:	e7f4      	b.n	80088c8 <_dtoa_r+0x2e0>
 80088de:	2301      	movs	r3, #1
 80088e0:	9302      	str	r3, [sp, #8]
 80088e2:	4699      	mov	r9, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	e7f5      	b.n	80088d4 <_dtoa_r+0x2ec>
 80088e8:	3101      	adds	r1, #1
 80088ea:	6071      	str	r1, [r6, #4]
 80088ec:	0052      	lsls	r2, r2, #1
 80088ee:	e7a2      	b.n	8008836 <_dtoa_r+0x24e>
 80088f0:	636f4361 	.word	0x636f4361
 80088f4:	3fd287a7 	.word	0x3fd287a7
 80088f8:	8b60c8b3 	.word	0x8b60c8b3
 80088fc:	3fc68a28 	.word	0x3fc68a28
 8008900:	509f79fb 	.word	0x509f79fb
 8008904:	3fd34413 	.word	0x3fd34413
 8008908:	7ff00000 	.word	0x7ff00000
 800890c:	0800a525 	.word	0x0800a525
 8008910:	3ff80000 	.word	0x3ff80000
 8008914:	0800a5d8 	.word	0x0800a5d8
 8008918:	0800a5b0 	.word	0x0800a5b0
 800891c:	0800a5a1 	.word	0x0800a5a1
 8008920:	07f1      	lsls	r1, r6, #31
 8008922:	d508      	bpl.n	8008936 <_dtoa_r+0x34e>
 8008924:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800892c:	f7f7 fe94 	bl	8000658 <__aeabi_dmul>
 8008930:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008934:	3501      	adds	r5, #1
 8008936:	1076      	asrs	r6, r6, #1
 8008938:	3708      	adds	r7, #8
 800893a:	2e00      	cmp	r6, #0
 800893c:	d1f0      	bne.n	8008920 <_dtoa_r+0x338>
 800893e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008942:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008946:	f7f7 ffb1 	bl	80008ac <__aeabi_ddiv>
 800894a:	e9cd 0100 	strd	r0, r1, [sp]
 800894e:	e01a      	b.n	8008986 <_dtoa_r+0x39e>
 8008950:	2502      	movs	r5, #2
 8008952:	e7a3      	b.n	800889c <_dtoa_r+0x2b4>
 8008954:	f000 80a0 	beq.w	8008a98 <_dtoa_r+0x4b0>
 8008958:	f1ca 0600 	rsb	r6, sl, #0
 800895c:	4b9f      	ldr	r3, [pc, #636]	; (8008bdc <_dtoa_r+0x5f4>)
 800895e:	4fa0      	ldr	r7, [pc, #640]	; (8008be0 <_dtoa_r+0x5f8>)
 8008960:	f006 020f 	and.w	r2, r6, #15
 8008964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008970:	f7f7 fe72 	bl	8000658 <__aeabi_dmul>
 8008974:	e9cd 0100 	strd	r0, r1, [sp]
 8008978:	1136      	asrs	r6, r6, #4
 800897a:	2300      	movs	r3, #0
 800897c:	2502      	movs	r5, #2
 800897e:	2e00      	cmp	r6, #0
 8008980:	d17f      	bne.n	8008a82 <_dtoa_r+0x49a>
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e1      	bne.n	800894a <_dtoa_r+0x362>
 8008986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 8087 	beq.w	8008a9c <_dtoa_r+0x4b4>
 800898e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008992:	2200      	movs	r2, #0
 8008994:	4b93      	ldr	r3, [pc, #588]	; (8008be4 <_dtoa_r+0x5fc>)
 8008996:	4630      	mov	r0, r6
 8008998:	4639      	mov	r1, r7
 800899a:	f7f8 f8cf 	bl	8000b3c <__aeabi_dcmplt>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d07c      	beq.n	8008a9c <_dtoa_r+0x4b4>
 80089a2:	f1b9 0f00 	cmp.w	r9, #0
 80089a6:	d079      	beq.n	8008a9c <_dtoa_r+0x4b4>
 80089a8:	9b02      	ldr	r3, [sp, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	dd35      	ble.n	8008a1a <_dtoa_r+0x432>
 80089ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80089b2:	9308      	str	r3, [sp, #32]
 80089b4:	4639      	mov	r1, r7
 80089b6:	2200      	movs	r2, #0
 80089b8:	4b8b      	ldr	r3, [pc, #556]	; (8008be8 <_dtoa_r+0x600>)
 80089ba:	4630      	mov	r0, r6
 80089bc:	f7f7 fe4c 	bl	8000658 <__aeabi_dmul>
 80089c0:	e9cd 0100 	strd	r0, r1, [sp]
 80089c4:	9f02      	ldr	r7, [sp, #8]
 80089c6:	3501      	adds	r5, #1
 80089c8:	4628      	mov	r0, r5
 80089ca:	f7f7 fddb 	bl	8000584 <__aeabi_i2d>
 80089ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089d2:	f7f7 fe41 	bl	8000658 <__aeabi_dmul>
 80089d6:	2200      	movs	r2, #0
 80089d8:	4b84      	ldr	r3, [pc, #528]	; (8008bec <_dtoa_r+0x604>)
 80089da:	f7f7 fc87 	bl	80002ec <__adddf3>
 80089de:	4605      	mov	r5, r0
 80089e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80089e4:	2f00      	cmp	r7, #0
 80089e6:	d15d      	bne.n	8008aa4 <_dtoa_r+0x4bc>
 80089e8:	2200      	movs	r2, #0
 80089ea:	4b81      	ldr	r3, [pc, #516]	; (8008bf0 <_dtoa_r+0x608>)
 80089ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089f0:	f7f7 fc7a 	bl	80002e8 <__aeabi_dsub>
 80089f4:	462a      	mov	r2, r5
 80089f6:	4633      	mov	r3, r6
 80089f8:	e9cd 0100 	strd	r0, r1, [sp]
 80089fc:	f7f8 f8bc 	bl	8000b78 <__aeabi_dcmpgt>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	f040 8288 	bne.w	8008f16 <_dtoa_r+0x92e>
 8008a06:	462a      	mov	r2, r5
 8008a08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008a0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a10:	f7f8 f894 	bl	8000b3c <__aeabi_dcmplt>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	f040 827c 	bne.w	8008f12 <_dtoa_r+0x92a>
 8008a1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a1e:	e9cd 2300 	strd	r2, r3, [sp]
 8008a22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f2c0 8150 	blt.w	8008cca <_dtoa_r+0x6e2>
 8008a2a:	f1ba 0f0e 	cmp.w	sl, #14
 8008a2e:	f300 814c 	bgt.w	8008cca <_dtoa_r+0x6e2>
 8008a32:	4b6a      	ldr	r3, [pc, #424]	; (8008bdc <_dtoa_r+0x5f4>)
 8008a34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a38:	ed93 7b00 	vldr	d7, [r3]
 8008a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a44:	f280 80d8 	bge.w	8008bf8 <_dtoa_r+0x610>
 8008a48:	f1b9 0f00 	cmp.w	r9, #0
 8008a4c:	f300 80d4 	bgt.w	8008bf8 <_dtoa_r+0x610>
 8008a50:	f040 825e 	bne.w	8008f10 <_dtoa_r+0x928>
 8008a54:	2200      	movs	r2, #0
 8008a56:	4b66      	ldr	r3, [pc, #408]	; (8008bf0 <_dtoa_r+0x608>)
 8008a58:	ec51 0b17 	vmov	r0, r1, d7
 8008a5c:	f7f7 fdfc 	bl	8000658 <__aeabi_dmul>
 8008a60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a64:	f7f8 f87e 	bl	8000b64 <__aeabi_dcmpge>
 8008a68:	464f      	mov	r7, r9
 8008a6a:	464e      	mov	r6, r9
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	f040 8234 	bne.w	8008eda <_dtoa_r+0x8f2>
 8008a72:	2331      	movs	r3, #49	; 0x31
 8008a74:	f10b 0501 	add.w	r5, fp, #1
 8008a78:	f88b 3000 	strb.w	r3, [fp]
 8008a7c:	f10a 0a01 	add.w	sl, sl, #1
 8008a80:	e22f      	b.n	8008ee2 <_dtoa_r+0x8fa>
 8008a82:	07f2      	lsls	r2, r6, #31
 8008a84:	d505      	bpl.n	8008a92 <_dtoa_r+0x4aa>
 8008a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a8a:	f7f7 fde5 	bl	8000658 <__aeabi_dmul>
 8008a8e:	3501      	adds	r5, #1
 8008a90:	2301      	movs	r3, #1
 8008a92:	1076      	asrs	r6, r6, #1
 8008a94:	3708      	adds	r7, #8
 8008a96:	e772      	b.n	800897e <_dtoa_r+0x396>
 8008a98:	2502      	movs	r5, #2
 8008a9a:	e774      	b.n	8008986 <_dtoa_r+0x39e>
 8008a9c:	f8cd a020 	str.w	sl, [sp, #32]
 8008aa0:	464f      	mov	r7, r9
 8008aa2:	e791      	b.n	80089c8 <_dtoa_r+0x3e0>
 8008aa4:	4b4d      	ldr	r3, [pc, #308]	; (8008bdc <_dtoa_r+0x5f4>)
 8008aa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008aaa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d047      	beq.n	8008b44 <_dtoa_r+0x55c>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	2000      	movs	r0, #0
 8008aba:	494e      	ldr	r1, [pc, #312]	; (8008bf4 <_dtoa_r+0x60c>)
 8008abc:	f7f7 fef6 	bl	80008ac <__aeabi_ddiv>
 8008ac0:	462a      	mov	r2, r5
 8008ac2:	4633      	mov	r3, r6
 8008ac4:	f7f7 fc10 	bl	80002e8 <__aeabi_dsub>
 8008ac8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008acc:	465d      	mov	r5, fp
 8008ace:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ad2:	f7f8 f871 	bl	8000bb8 <__aeabi_d2iz>
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	f7f7 fd54 	bl	8000584 <__aeabi_i2d>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ae4:	f7f7 fc00 	bl	80002e8 <__aeabi_dsub>
 8008ae8:	3630      	adds	r6, #48	; 0x30
 8008aea:	f805 6b01 	strb.w	r6, [r5], #1
 8008aee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008af2:	e9cd 0100 	strd	r0, r1, [sp]
 8008af6:	f7f8 f821 	bl	8000b3c <__aeabi_dcmplt>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d163      	bne.n	8008bc6 <_dtoa_r+0x5de>
 8008afe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b02:	2000      	movs	r0, #0
 8008b04:	4937      	ldr	r1, [pc, #220]	; (8008be4 <_dtoa_r+0x5fc>)
 8008b06:	f7f7 fbef 	bl	80002e8 <__aeabi_dsub>
 8008b0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008b0e:	f7f8 f815 	bl	8000b3c <__aeabi_dcmplt>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	f040 80b7 	bne.w	8008c86 <_dtoa_r+0x69e>
 8008b18:	eba5 030b 	sub.w	r3, r5, fp
 8008b1c:	429f      	cmp	r7, r3
 8008b1e:	f77f af7c 	ble.w	8008a1a <_dtoa_r+0x432>
 8008b22:	2200      	movs	r2, #0
 8008b24:	4b30      	ldr	r3, [pc, #192]	; (8008be8 <_dtoa_r+0x600>)
 8008b26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b2a:	f7f7 fd95 	bl	8000658 <__aeabi_dmul>
 8008b2e:	2200      	movs	r2, #0
 8008b30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b34:	4b2c      	ldr	r3, [pc, #176]	; (8008be8 <_dtoa_r+0x600>)
 8008b36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b3a:	f7f7 fd8d 	bl	8000658 <__aeabi_dmul>
 8008b3e:	e9cd 0100 	strd	r0, r1, [sp]
 8008b42:	e7c4      	b.n	8008ace <_dtoa_r+0x4e6>
 8008b44:	462a      	mov	r2, r5
 8008b46:	4633      	mov	r3, r6
 8008b48:	f7f7 fd86 	bl	8000658 <__aeabi_dmul>
 8008b4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b50:	eb0b 0507 	add.w	r5, fp, r7
 8008b54:	465e      	mov	r6, fp
 8008b56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b5a:	f7f8 f82d 	bl	8000bb8 <__aeabi_d2iz>
 8008b5e:	4607      	mov	r7, r0
 8008b60:	f7f7 fd10 	bl	8000584 <__aeabi_i2d>
 8008b64:	3730      	adds	r7, #48	; 0x30
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b6e:	f7f7 fbbb 	bl	80002e8 <__aeabi_dsub>
 8008b72:	f806 7b01 	strb.w	r7, [r6], #1
 8008b76:	42ae      	cmp	r6, r5
 8008b78:	e9cd 0100 	strd	r0, r1, [sp]
 8008b7c:	f04f 0200 	mov.w	r2, #0
 8008b80:	d126      	bne.n	8008bd0 <_dtoa_r+0x5e8>
 8008b82:	4b1c      	ldr	r3, [pc, #112]	; (8008bf4 <_dtoa_r+0x60c>)
 8008b84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b88:	f7f7 fbb0 	bl	80002ec <__adddf3>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b94:	f7f7 fff0 	bl	8000b78 <__aeabi_dcmpgt>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d174      	bne.n	8008c86 <_dtoa_r+0x69e>
 8008b9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	4914      	ldr	r1, [pc, #80]	; (8008bf4 <_dtoa_r+0x60c>)
 8008ba4:	f7f7 fba0 	bl	80002e8 <__aeabi_dsub>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bb0:	f7f7 ffc4 	bl	8000b3c <__aeabi_dcmplt>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	f43f af30 	beq.w	8008a1a <_dtoa_r+0x432>
 8008bba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bbe:	2b30      	cmp	r3, #48	; 0x30
 8008bc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8008bc4:	d002      	beq.n	8008bcc <_dtoa_r+0x5e4>
 8008bc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008bca:	e04a      	b.n	8008c62 <_dtoa_r+0x67a>
 8008bcc:	4615      	mov	r5, r2
 8008bce:	e7f4      	b.n	8008bba <_dtoa_r+0x5d2>
 8008bd0:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <_dtoa_r+0x600>)
 8008bd2:	f7f7 fd41 	bl	8000658 <__aeabi_dmul>
 8008bd6:	e9cd 0100 	strd	r0, r1, [sp]
 8008bda:	e7bc      	b.n	8008b56 <_dtoa_r+0x56e>
 8008bdc:	0800a5d8 	.word	0x0800a5d8
 8008be0:	0800a5b0 	.word	0x0800a5b0
 8008be4:	3ff00000 	.word	0x3ff00000
 8008be8:	40240000 	.word	0x40240000
 8008bec:	401c0000 	.word	0x401c0000
 8008bf0:	40140000 	.word	0x40140000
 8008bf4:	3fe00000 	.word	0x3fe00000
 8008bf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008bfc:	465d      	mov	r5, fp
 8008bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c02:	4630      	mov	r0, r6
 8008c04:	4639      	mov	r1, r7
 8008c06:	f7f7 fe51 	bl	80008ac <__aeabi_ddiv>
 8008c0a:	f7f7 ffd5 	bl	8000bb8 <__aeabi_d2iz>
 8008c0e:	4680      	mov	r8, r0
 8008c10:	f7f7 fcb8 	bl	8000584 <__aeabi_i2d>
 8008c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c18:	f7f7 fd1e 	bl	8000658 <__aeabi_dmul>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008c28:	f7f7 fb5e 	bl	80002e8 <__aeabi_dsub>
 8008c2c:	f805 6b01 	strb.w	r6, [r5], #1
 8008c30:	eba5 060b 	sub.w	r6, r5, fp
 8008c34:	45b1      	cmp	r9, r6
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	d139      	bne.n	8008cb0 <_dtoa_r+0x6c8>
 8008c3c:	f7f7 fb56 	bl	80002ec <__adddf3>
 8008c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c44:	4606      	mov	r6, r0
 8008c46:	460f      	mov	r7, r1
 8008c48:	f7f7 ff96 	bl	8000b78 <__aeabi_dcmpgt>
 8008c4c:	b9c8      	cbnz	r0, 8008c82 <_dtoa_r+0x69a>
 8008c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c52:	4630      	mov	r0, r6
 8008c54:	4639      	mov	r1, r7
 8008c56:	f7f7 ff67 	bl	8000b28 <__aeabi_dcmpeq>
 8008c5a:	b110      	cbz	r0, 8008c62 <_dtoa_r+0x67a>
 8008c5c:	f018 0f01 	tst.w	r8, #1
 8008c60:	d10f      	bne.n	8008c82 <_dtoa_r+0x69a>
 8008c62:	9904      	ldr	r1, [sp, #16]
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 fe0c 	bl	8009882 <_Bfree>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c6e:	702b      	strb	r3, [r5, #0]
 8008c70:	f10a 0301 	add.w	r3, sl, #1
 8008c74:	6013      	str	r3, [r2, #0]
 8008c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 8241 	beq.w	8009100 <_dtoa_r+0xb18>
 8008c7e:	601d      	str	r5, [r3, #0]
 8008c80:	e23e      	b.n	8009100 <_dtoa_r+0xb18>
 8008c82:	f8cd a020 	str.w	sl, [sp, #32]
 8008c86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c8a:	2a39      	cmp	r2, #57	; 0x39
 8008c8c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008c90:	d108      	bne.n	8008ca4 <_dtoa_r+0x6bc>
 8008c92:	459b      	cmp	fp, r3
 8008c94:	d10a      	bne.n	8008cac <_dtoa_r+0x6c4>
 8008c96:	9b08      	ldr	r3, [sp, #32]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	9308      	str	r3, [sp, #32]
 8008c9c:	2330      	movs	r3, #48	; 0x30
 8008c9e:	f88b 3000 	strb.w	r3, [fp]
 8008ca2:	465b      	mov	r3, fp
 8008ca4:	781a      	ldrb	r2, [r3, #0]
 8008ca6:	3201      	adds	r2, #1
 8008ca8:	701a      	strb	r2, [r3, #0]
 8008caa:	e78c      	b.n	8008bc6 <_dtoa_r+0x5de>
 8008cac:	461d      	mov	r5, r3
 8008cae:	e7ea      	b.n	8008c86 <_dtoa_r+0x69e>
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	4b9b      	ldr	r3, [pc, #620]	; (8008f20 <_dtoa_r+0x938>)
 8008cb4:	f7f7 fcd0 	bl	8000658 <__aeabi_dmul>
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2300      	movs	r3, #0
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	460f      	mov	r7, r1
 8008cc0:	f7f7 ff32 	bl	8000b28 <__aeabi_dcmpeq>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d09a      	beq.n	8008bfe <_dtoa_r+0x616>
 8008cc8:	e7cb      	b.n	8008c62 <_dtoa_r+0x67a>
 8008cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ccc:	2a00      	cmp	r2, #0
 8008cce:	f000 808b 	beq.w	8008de8 <_dtoa_r+0x800>
 8008cd2:	9a06      	ldr	r2, [sp, #24]
 8008cd4:	2a01      	cmp	r2, #1
 8008cd6:	dc6e      	bgt.n	8008db6 <_dtoa_r+0x7ce>
 8008cd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cda:	2a00      	cmp	r2, #0
 8008cdc:	d067      	beq.n	8008dae <_dtoa_r+0x7c6>
 8008cde:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ce2:	9f07      	ldr	r7, [sp, #28]
 8008ce4:	9d05      	ldr	r5, [sp, #20]
 8008ce6:	9a05      	ldr	r2, [sp, #20]
 8008ce8:	2101      	movs	r1, #1
 8008cea:	441a      	add	r2, r3
 8008cec:	4620      	mov	r0, r4
 8008cee:	9205      	str	r2, [sp, #20]
 8008cf0:	4498      	add	r8, r3
 8008cf2:	f000 fea4 	bl	8009a3e <__i2b>
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	2d00      	cmp	r5, #0
 8008cfa:	dd0c      	ble.n	8008d16 <_dtoa_r+0x72e>
 8008cfc:	f1b8 0f00 	cmp.w	r8, #0
 8008d00:	dd09      	ble.n	8008d16 <_dtoa_r+0x72e>
 8008d02:	4545      	cmp	r5, r8
 8008d04:	9a05      	ldr	r2, [sp, #20]
 8008d06:	462b      	mov	r3, r5
 8008d08:	bfa8      	it	ge
 8008d0a:	4643      	movge	r3, r8
 8008d0c:	1ad2      	subs	r2, r2, r3
 8008d0e:	9205      	str	r2, [sp, #20]
 8008d10:	1aed      	subs	r5, r5, r3
 8008d12:	eba8 0803 	sub.w	r8, r8, r3
 8008d16:	9b07      	ldr	r3, [sp, #28]
 8008d18:	b1eb      	cbz	r3, 8008d56 <_dtoa_r+0x76e>
 8008d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d067      	beq.n	8008df0 <_dtoa_r+0x808>
 8008d20:	b18f      	cbz	r7, 8008d46 <_dtoa_r+0x75e>
 8008d22:	4631      	mov	r1, r6
 8008d24:	463a      	mov	r2, r7
 8008d26:	4620      	mov	r0, r4
 8008d28:	f000 ff28 	bl	8009b7c <__pow5mult>
 8008d2c:	9a04      	ldr	r2, [sp, #16]
 8008d2e:	4601      	mov	r1, r0
 8008d30:	4606      	mov	r6, r0
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 fe8c 	bl	8009a50 <__multiply>
 8008d38:	9904      	ldr	r1, [sp, #16]
 8008d3a:	9008      	str	r0, [sp, #32]
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f000 fda0 	bl	8009882 <_Bfree>
 8008d42:	9b08      	ldr	r3, [sp, #32]
 8008d44:	9304      	str	r3, [sp, #16]
 8008d46:	9b07      	ldr	r3, [sp, #28]
 8008d48:	1bda      	subs	r2, r3, r7
 8008d4a:	d004      	beq.n	8008d56 <_dtoa_r+0x76e>
 8008d4c:	9904      	ldr	r1, [sp, #16]
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 ff14 	bl	8009b7c <__pow5mult>
 8008d54:	9004      	str	r0, [sp, #16]
 8008d56:	2101      	movs	r1, #1
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 fe70 	bl	8009a3e <__i2b>
 8008d5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d60:	4607      	mov	r7, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 81d0 	beq.w	8009108 <_dtoa_r+0xb20>
 8008d68:	461a      	mov	r2, r3
 8008d6a:	4601      	mov	r1, r0
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f000 ff05 	bl	8009b7c <__pow5mult>
 8008d72:	9b06      	ldr	r3, [sp, #24]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	4607      	mov	r7, r0
 8008d78:	dc40      	bgt.n	8008dfc <_dtoa_r+0x814>
 8008d7a:	9b00      	ldr	r3, [sp, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d139      	bne.n	8008df4 <_dtoa_r+0x80c>
 8008d80:	9b01      	ldr	r3, [sp, #4]
 8008d82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d136      	bne.n	8008df8 <_dtoa_r+0x810>
 8008d8a:	9b01      	ldr	r3, [sp, #4]
 8008d8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d90:	0d1b      	lsrs	r3, r3, #20
 8008d92:	051b      	lsls	r3, r3, #20
 8008d94:	b12b      	cbz	r3, 8008da2 <_dtoa_r+0x7ba>
 8008d96:	9b05      	ldr	r3, [sp, #20]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	9305      	str	r3, [sp, #20]
 8008d9c:	f108 0801 	add.w	r8, r8, #1
 8008da0:	2301      	movs	r3, #1
 8008da2:	9307      	str	r3, [sp, #28]
 8008da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d12a      	bne.n	8008e00 <_dtoa_r+0x818>
 8008daa:	2001      	movs	r0, #1
 8008dac:	e030      	b.n	8008e10 <_dtoa_r+0x828>
 8008dae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008db0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008db4:	e795      	b.n	8008ce2 <_dtoa_r+0x6fa>
 8008db6:	9b07      	ldr	r3, [sp, #28]
 8008db8:	f109 37ff 	add.w	r7, r9, #4294967295
 8008dbc:	42bb      	cmp	r3, r7
 8008dbe:	bfbf      	itttt	lt
 8008dc0:	9b07      	ldrlt	r3, [sp, #28]
 8008dc2:	9707      	strlt	r7, [sp, #28]
 8008dc4:	1afa      	sublt	r2, r7, r3
 8008dc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008dc8:	bfbb      	ittet	lt
 8008dca:	189b      	addlt	r3, r3, r2
 8008dcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008dce:	1bdf      	subge	r7, r3, r7
 8008dd0:	2700      	movlt	r7, #0
 8008dd2:	f1b9 0f00 	cmp.w	r9, #0
 8008dd6:	bfb5      	itete	lt
 8008dd8:	9b05      	ldrlt	r3, [sp, #20]
 8008dda:	9d05      	ldrge	r5, [sp, #20]
 8008ddc:	eba3 0509 	sublt.w	r5, r3, r9
 8008de0:	464b      	movge	r3, r9
 8008de2:	bfb8      	it	lt
 8008de4:	2300      	movlt	r3, #0
 8008de6:	e77e      	b.n	8008ce6 <_dtoa_r+0x6fe>
 8008de8:	9f07      	ldr	r7, [sp, #28]
 8008dea:	9d05      	ldr	r5, [sp, #20]
 8008dec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008dee:	e783      	b.n	8008cf8 <_dtoa_r+0x710>
 8008df0:	9a07      	ldr	r2, [sp, #28]
 8008df2:	e7ab      	b.n	8008d4c <_dtoa_r+0x764>
 8008df4:	2300      	movs	r3, #0
 8008df6:	e7d4      	b.n	8008da2 <_dtoa_r+0x7ba>
 8008df8:	9b00      	ldr	r3, [sp, #0]
 8008dfa:	e7d2      	b.n	8008da2 <_dtoa_r+0x7ba>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	9307      	str	r3, [sp, #28]
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008e06:	6918      	ldr	r0, [r3, #16]
 8008e08:	f000 fdcb 	bl	80099a2 <__hi0bits>
 8008e0c:	f1c0 0020 	rsb	r0, r0, #32
 8008e10:	4440      	add	r0, r8
 8008e12:	f010 001f 	ands.w	r0, r0, #31
 8008e16:	d047      	beq.n	8008ea8 <_dtoa_r+0x8c0>
 8008e18:	f1c0 0320 	rsb	r3, r0, #32
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	dd3b      	ble.n	8008e98 <_dtoa_r+0x8b0>
 8008e20:	9b05      	ldr	r3, [sp, #20]
 8008e22:	f1c0 001c 	rsb	r0, r0, #28
 8008e26:	4403      	add	r3, r0
 8008e28:	9305      	str	r3, [sp, #20]
 8008e2a:	4405      	add	r5, r0
 8008e2c:	4480      	add	r8, r0
 8008e2e:	9b05      	ldr	r3, [sp, #20]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	dd05      	ble.n	8008e40 <_dtoa_r+0x858>
 8008e34:	461a      	mov	r2, r3
 8008e36:	9904      	ldr	r1, [sp, #16]
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f000 feed 	bl	8009c18 <__lshift>
 8008e3e:	9004      	str	r0, [sp, #16]
 8008e40:	f1b8 0f00 	cmp.w	r8, #0
 8008e44:	dd05      	ble.n	8008e52 <_dtoa_r+0x86a>
 8008e46:	4639      	mov	r1, r7
 8008e48:	4642      	mov	r2, r8
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 fee4 	bl	8009c18 <__lshift>
 8008e50:	4607      	mov	r7, r0
 8008e52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e54:	b353      	cbz	r3, 8008eac <_dtoa_r+0x8c4>
 8008e56:	4639      	mov	r1, r7
 8008e58:	9804      	ldr	r0, [sp, #16]
 8008e5a:	f000 ff31 	bl	8009cc0 <__mcmp>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	da24      	bge.n	8008eac <_dtoa_r+0x8c4>
 8008e62:	2300      	movs	r3, #0
 8008e64:	220a      	movs	r2, #10
 8008e66:	9904      	ldr	r1, [sp, #16]
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f000 fd21 	bl	80098b0 <__multadd>
 8008e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e70:	9004      	str	r0, [sp, #16]
 8008e72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 814d 	beq.w	8009116 <_dtoa_r+0xb2e>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4631      	mov	r1, r6
 8008e80:	220a      	movs	r2, #10
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 fd14 	bl	80098b0 <__multadd>
 8008e88:	9b02      	ldr	r3, [sp, #8]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	dc4f      	bgt.n	8008f30 <_dtoa_r+0x948>
 8008e90:	9b06      	ldr	r3, [sp, #24]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	dd4c      	ble.n	8008f30 <_dtoa_r+0x948>
 8008e96:	e011      	b.n	8008ebc <_dtoa_r+0x8d4>
 8008e98:	d0c9      	beq.n	8008e2e <_dtoa_r+0x846>
 8008e9a:	9a05      	ldr	r2, [sp, #20]
 8008e9c:	331c      	adds	r3, #28
 8008e9e:	441a      	add	r2, r3
 8008ea0:	9205      	str	r2, [sp, #20]
 8008ea2:	441d      	add	r5, r3
 8008ea4:	4498      	add	r8, r3
 8008ea6:	e7c2      	b.n	8008e2e <_dtoa_r+0x846>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	e7f6      	b.n	8008e9a <_dtoa_r+0x8b2>
 8008eac:	f1b9 0f00 	cmp.w	r9, #0
 8008eb0:	dc38      	bgt.n	8008f24 <_dtoa_r+0x93c>
 8008eb2:	9b06      	ldr	r3, [sp, #24]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	dd35      	ble.n	8008f24 <_dtoa_r+0x93c>
 8008eb8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ebc:	9b02      	ldr	r3, [sp, #8]
 8008ebe:	b963      	cbnz	r3, 8008eda <_dtoa_r+0x8f2>
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	2205      	movs	r2, #5
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f000 fcf3 	bl	80098b0 <__multadd>
 8008eca:	4601      	mov	r1, r0
 8008ecc:	4607      	mov	r7, r0
 8008ece:	9804      	ldr	r0, [sp, #16]
 8008ed0:	f000 fef6 	bl	8009cc0 <__mcmp>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	f73f adcc 	bgt.w	8008a72 <_dtoa_r+0x48a>
 8008eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008edc:	465d      	mov	r5, fp
 8008ede:	ea6f 0a03 	mvn.w	sl, r3
 8008ee2:	f04f 0900 	mov.w	r9, #0
 8008ee6:	4639      	mov	r1, r7
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f000 fcca 	bl	8009882 <_Bfree>
 8008eee:	2e00      	cmp	r6, #0
 8008ef0:	f43f aeb7 	beq.w	8008c62 <_dtoa_r+0x67a>
 8008ef4:	f1b9 0f00 	cmp.w	r9, #0
 8008ef8:	d005      	beq.n	8008f06 <_dtoa_r+0x91e>
 8008efa:	45b1      	cmp	r9, r6
 8008efc:	d003      	beq.n	8008f06 <_dtoa_r+0x91e>
 8008efe:	4649      	mov	r1, r9
 8008f00:	4620      	mov	r0, r4
 8008f02:	f000 fcbe 	bl	8009882 <_Bfree>
 8008f06:	4631      	mov	r1, r6
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f000 fcba 	bl	8009882 <_Bfree>
 8008f0e:	e6a8      	b.n	8008c62 <_dtoa_r+0x67a>
 8008f10:	2700      	movs	r7, #0
 8008f12:	463e      	mov	r6, r7
 8008f14:	e7e1      	b.n	8008eda <_dtoa_r+0x8f2>
 8008f16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008f1a:	463e      	mov	r6, r7
 8008f1c:	e5a9      	b.n	8008a72 <_dtoa_r+0x48a>
 8008f1e:	bf00      	nop
 8008f20:	40240000 	.word	0x40240000
 8008f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f26:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 80fa 	beq.w	8009124 <_dtoa_r+0xb3c>
 8008f30:	2d00      	cmp	r5, #0
 8008f32:	dd05      	ble.n	8008f40 <_dtoa_r+0x958>
 8008f34:	4631      	mov	r1, r6
 8008f36:	462a      	mov	r2, r5
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 fe6d 	bl	8009c18 <__lshift>
 8008f3e:	4606      	mov	r6, r0
 8008f40:	9b07      	ldr	r3, [sp, #28]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d04c      	beq.n	8008fe0 <_dtoa_r+0x9f8>
 8008f46:	6871      	ldr	r1, [r6, #4]
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 fc66 	bl	800981a <_Balloc>
 8008f4e:	6932      	ldr	r2, [r6, #16]
 8008f50:	3202      	adds	r2, #2
 8008f52:	4605      	mov	r5, r0
 8008f54:	0092      	lsls	r2, r2, #2
 8008f56:	f106 010c 	add.w	r1, r6, #12
 8008f5a:	300c      	adds	r0, #12
 8008f5c:	f000 fc50 	bl	8009800 <memcpy>
 8008f60:	2201      	movs	r2, #1
 8008f62:	4629      	mov	r1, r5
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 fe57 	bl	8009c18 <__lshift>
 8008f6a:	9b00      	ldr	r3, [sp, #0]
 8008f6c:	f8cd b014 	str.w	fp, [sp, #20]
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	46b1      	mov	r9, r6
 8008f76:	9307      	str	r3, [sp, #28]
 8008f78:	4606      	mov	r6, r0
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	9804      	ldr	r0, [sp, #16]
 8008f7e:	f7ff faa5 	bl	80084cc <quorem>
 8008f82:	4649      	mov	r1, r9
 8008f84:	4605      	mov	r5, r0
 8008f86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008f8a:	9804      	ldr	r0, [sp, #16]
 8008f8c:	f000 fe98 	bl	8009cc0 <__mcmp>
 8008f90:	4632      	mov	r2, r6
 8008f92:	9000      	str	r0, [sp, #0]
 8008f94:	4639      	mov	r1, r7
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 feac 	bl	8009cf4 <__mdiff>
 8008f9c:	68c3      	ldr	r3, [r0, #12]
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	bb03      	cbnz	r3, 8008fe4 <_dtoa_r+0x9fc>
 8008fa2:	4601      	mov	r1, r0
 8008fa4:	9008      	str	r0, [sp, #32]
 8008fa6:	9804      	ldr	r0, [sp, #16]
 8008fa8:	f000 fe8a 	bl	8009cc0 <__mcmp>
 8008fac:	9a08      	ldr	r2, [sp, #32]
 8008fae:	4603      	mov	r3, r0
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	9308      	str	r3, [sp, #32]
 8008fb6:	f000 fc64 	bl	8009882 <_Bfree>
 8008fba:	9b08      	ldr	r3, [sp, #32]
 8008fbc:	b9a3      	cbnz	r3, 8008fe8 <_dtoa_r+0xa00>
 8008fbe:	9a06      	ldr	r2, [sp, #24]
 8008fc0:	b992      	cbnz	r2, 8008fe8 <_dtoa_r+0xa00>
 8008fc2:	9a07      	ldr	r2, [sp, #28]
 8008fc4:	b982      	cbnz	r2, 8008fe8 <_dtoa_r+0xa00>
 8008fc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008fca:	d029      	beq.n	8009020 <_dtoa_r+0xa38>
 8008fcc:	9b00      	ldr	r3, [sp, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	dd01      	ble.n	8008fd6 <_dtoa_r+0x9ee>
 8008fd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008fd6:	9b05      	ldr	r3, [sp, #20]
 8008fd8:	1c5d      	adds	r5, r3, #1
 8008fda:	f883 8000 	strb.w	r8, [r3]
 8008fde:	e782      	b.n	8008ee6 <_dtoa_r+0x8fe>
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	e7c2      	b.n	8008f6a <_dtoa_r+0x982>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e7e3      	b.n	8008fb0 <_dtoa_r+0x9c8>
 8008fe8:	9a00      	ldr	r2, [sp, #0]
 8008fea:	2a00      	cmp	r2, #0
 8008fec:	db04      	blt.n	8008ff8 <_dtoa_r+0xa10>
 8008fee:	d125      	bne.n	800903c <_dtoa_r+0xa54>
 8008ff0:	9a06      	ldr	r2, [sp, #24]
 8008ff2:	bb1a      	cbnz	r2, 800903c <_dtoa_r+0xa54>
 8008ff4:	9a07      	ldr	r2, [sp, #28]
 8008ff6:	bb0a      	cbnz	r2, 800903c <_dtoa_r+0xa54>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	ddec      	ble.n	8008fd6 <_dtoa_r+0x9ee>
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	9904      	ldr	r1, [sp, #16]
 8009000:	4620      	mov	r0, r4
 8009002:	f000 fe09 	bl	8009c18 <__lshift>
 8009006:	4639      	mov	r1, r7
 8009008:	9004      	str	r0, [sp, #16]
 800900a:	f000 fe59 	bl	8009cc0 <__mcmp>
 800900e:	2800      	cmp	r0, #0
 8009010:	dc03      	bgt.n	800901a <_dtoa_r+0xa32>
 8009012:	d1e0      	bne.n	8008fd6 <_dtoa_r+0x9ee>
 8009014:	f018 0f01 	tst.w	r8, #1
 8009018:	d0dd      	beq.n	8008fd6 <_dtoa_r+0x9ee>
 800901a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800901e:	d1d8      	bne.n	8008fd2 <_dtoa_r+0x9ea>
 8009020:	9b05      	ldr	r3, [sp, #20]
 8009022:	9a05      	ldr	r2, [sp, #20]
 8009024:	1c5d      	adds	r5, r3, #1
 8009026:	2339      	movs	r3, #57	; 0x39
 8009028:	7013      	strb	r3, [r2, #0]
 800902a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800902e:	2b39      	cmp	r3, #57	; 0x39
 8009030:	f105 32ff 	add.w	r2, r5, #4294967295
 8009034:	d04f      	beq.n	80090d6 <_dtoa_r+0xaee>
 8009036:	3301      	adds	r3, #1
 8009038:	7013      	strb	r3, [r2, #0]
 800903a:	e754      	b.n	8008ee6 <_dtoa_r+0x8fe>
 800903c:	9a05      	ldr	r2, [sp, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	f102 0501 	add.w	r5, r2, #1
 8009044:	dd06      	ble.n	8009054 <_dtoa_r+0xa6c>
 8009046:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800904a:	d0e9      	beq.n	8009020 <_dtoa_r+0xa38>
 800904c:	f108 0801 	add.w	r8, r8, #1
 8009050:	9b05      	ldr	r3, [sp, #20]
 8009052:	e7c2      	b.n	8008fda <_dtoa_r+0x9f2>
 8009054:	9a02      	ldr	r2, [sp, #8]
 8009056:	f805 8c01 	strb.w	r8, [r5, #-1]
 800905a:	eba5 030b 	sub.w	r3, r5, fp
 800905e:	4293      	cmp	r3, r2
 8009060:	d021      	beq.n	80090a6 <_dtoa_r+0xabe>
 8009062:	2300      	movs	r3, #0
 8009064:	220a      	movs	r2, #10
 8009066:	9904      	ldr	r1, [sp, #16]
 8009068:	4620      	mov	r0, r4
 800906a:	f000 fc21 	bl	80098b0 <__multadd>
 800906e:	45b1      	cmp	r9, r6
 8009070:	9004      	str	r0, [sp, #16]
 8009072:	f04f 0300 	mov.w	r3, #0
 8009076:	f04f 020a 	mov.w	r2, #10
 800907a:	4649      	mov	r1, r9
 800907c:	4620      	mov	r0, r4
 800907e:	d105      	bne.n	800908c <_dtoa_r+0xaa4>
 8009080:	f000 fc16 	bl	80098b0 <__multadd>
 8009084:	4681      	mov	r9, r0
 8009086:	4606      	mov	r6, r0
 8009088:	9505      	str	r5, [sp, #20]
 800908a:	e776      	b.n	8008f7a <_dtoa_r+0x992>
 800908c:	f000 fc10 	bl	80098b0 <__multadd>
 8009090:	4631      	mov	r1, r6
 8009092:	4681      	mov	r9, r0
 8009094:	2300      	movs	r3, #0
 8009096:	220a      	movs	r2, #10
 8009098:	4620      	mov	r0, r4
 800909a:	f000 fc09 	bl	80098b0 <__multadd>
 800909e:	4606      	mov	r6, r0
 80090a0:	e7f2      	b.n	8009088 <_dtoa_r+0xaa0>
 80090a2:	f04f 0900 	mov.w	r9, #0
 80090a6:	2201      	movs	r2, #1
 80090a8:	9904      	ldr	r1, [sp, #16]
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 fdb4 	bl	8009c18 <__lshift>
 80090b0:	4639      	mov	r1, r7
 80090b2:	9004      	str	r0, [sp, #16]
 80090b4:	f000 fe04 	bl	8009cc0 <__mcmp>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	dcb6      	bgt.n	800902a <_dtoa_r+0xa42>
 80090bc:	d102      	bne.n	80090c4 <_dtoa_r+0xadc>
 80090be:	f018 0f01 	tst.w	r8, #1
 80090c2:	d1b2      	bne.n	800902a <_dtoa_r+0xa42>
 80090c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090c8:	2b30      	cmp	r3, #48	; 0x30
 80090ca:	f105 32ff 	add.w	r2, r5, #4294967295
 80090ce:	f47f af0a 	bne.w	8008ee6 <_dtoa_r+0x8fe>
 80090d2:	4615      	mov	r5, r2
 80090d4:	e7f6      	b.n	80090c4 <_dtoa_r+0xadc>
 80090d6:	4593      	cmp	fp, r2
 80090d8:	d105      	bne.n	80090e6 <_dtoa_r+0xafe>
 80090da:	2331      	movs	r3, #49	; 0x31
 80090dc:	f10a 0a01 	add.w	sl, sl, #1
 80090e0:	f88b 3000 	strb.w	r3, [fp]
 80090e4:	e6ff      	b.n	8008ee6 <_dtoa_r+0x8fe>
 80090e6:	4615      	mov	r5, r2
 80090e8:	e79f      	b.n	800902a <_dtoa_r+0xa42>
 80090ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009150 <_dtoa_r+0xb68>
 80090ee:	e007      	b.n	8009100 <_dtoa_r+0xb18>
 80090f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009154 <_dtoa_r+0xb6c>
 80090f6:	b11b      	cbz	r3, 8009100 <_dtoa_r+0xb18>
 80090f8:	f10b 0308 	add.w	r3, fp, #8
 80090fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	4658      	mov	r0, fp
 8009102:	b017      	add	sp, #92	; 0x5c
 8009104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009108:	9b06      	ldr	r3, [sp, #24]
 800910a:	2b01      	cmp	r3, #1
 800910c:	f77f ae35 	ble.w	8008d7a <_dtoa_r+0x792>
 8009110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009112:	9307      	str	r3, [sp, #28]
 8009114:	e649      	b.n	8008daa <_dtoa_r+0x7c2>
 8009116:	9b02      	ldr	r3, [sp, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	dc03      	bgt.n	8009124 <_dtoa_r+0xb3c>
 800911c:	9b06      	ldr	r3, [sp, #24]
 800911e:	2b02      	cmp	r3, #2
 8009120:	f73f aecc 	bgt.w	8008ebc <_dtoa_r+0x8d4>
 8009124:	465d      	mov	r5, fp
 8009126:	4639      	mov	r1, r7
 8009128:	9804      	ldr	r0, [sp, #16]
 800912a:	f7ff f9cf 	bl	80084cc <quorem>
 800912e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009132:	f805 8b01 	strb.w	r8, [r5], #1
 8009136:	9a02      	ldr	r2, [sp, #8]
 8009138:	eba5 030b 	sub.w	r3, r5, fp
 800913c:	429a      	cmp	r2, r3
 800913e:	ddb0      	ble.n	80090a2 <_dtoa_r+0xaba>
 8009140:	2300      	movs	r3, #0
 8009142:	220a      	movs	r2, #10
 8009144:	9904      	ldr	r1, [sp, #16]
 8009146:	4620      	mov	r0, r4
 8009148:	f000 fbb2 	bl	80098b0 <__multadd>
 800914c:	9004      	str	r0, [sp, #16]
 800914e:	e7ea      	b.n	8009126 <_dtoa_r+0xb3e>
 8009150:	0800a524 	.word	0x0800a524
 8009154:	0800a598 	.word	0x0800a598

08009158 <rshift>:
 8009158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800915a:	6906      	ldr	r6, [r0, #16]
 800915c:	114b      	asrs	r3, r1, #5
 800915e:	429e      	cmp	r6, r3
 8009160:	f100 0414 	add.w	r4, r0, #20
 8009164:	dd30      	ble.n	80091c8 <rshift+0x70>
 8009166:	f011 011f 	ands.w	r1, r1, #31
 800916a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800916e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009172:	d108      	bne.n	8009186 <rshift+0x2e>
 8009174:	4621      	mov	r1, r4
 8009176:	42b2      	cmp	r2, r6
 8009178:	460b      	mov	r3, r1
 800917a:	d211      	bcs.n	80091a0 <rshift+0x48>
 800917c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009180:	f841 3b04 	str.w	r3, [r1], #4
 8009184:	e7f7      	b.n	8009176 <rshift+0x1e>
 8009186:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800918a:	f1c1 0c20 	rsb	ip, r1, #32
 800918e:	40cd      	lsrs	r5, r1
 8009190:	3204      	adds	r2, #4
 8009192:	4623      	mov	r3, r4
 8009194:	42b2      	cmp	r2, r6
 8009196:	4617      	mov	r7, r2
 8009198:	d30c      	bcc.n	80091b4 <rshift+0x5c>
 800919a:	601d      	str	r5, [r3, #0]
 800919c:	b105      	cbz	r5, 80091a0 <rshift+0x48>
 800919e:	3304      	adds	r3, #4
 80091a0:	1b1a      	subs	r2, r3, r4
 80091a2:	42a3      	cmp	r3, r4
 80091a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091a8:	bf08      	it	eq
 80091aa:	2300      	moveq	r3, #0
 80091ac:	6102      	str	r2, [r0, #16]
 80091ae:	bf08      	it	eq
 80091b0:	6143      	streq	r3, [r0, #20]
 80091b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b4:	683f      	ldr	r7, [r7, #0]
 80091b6:	fa07 f70c 	lsl.w	r7, r7, ip
 80091ba:	433d      	orrs	r5, r7
 80091bc:	f843 5b04 	str.w	r5, [r3], #4
 80091c0:	f852 5b04 	ldr.w	r5, [r2], #4
 80091c4:	40cd      	lsrs	r5, r1
 80091c6:	e7e5      	b.n	8009194 <rshift+0x3c>
 80091c8:	4623      	mov	r3, r4
 80091ca:	e7e9      	b.n	80091a0 <rshift+0x48>

080091cc <__hexdig_fun>:
 80091cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80091d0:	2b09      	cmp	r3, #9
 80091d2:	d802      	bhi.n	80091da <__hexdig_fun+0xe>
 80091d4:	3820      	subs	r0, #32
 80091d6:	b2c0      	uxtb	r0, r0
 80091d8:	4770      	bx	lr
 80091da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80091de:	2b05      	cmp	r3, #5
 80091e0:	d801      	bhi.n	80091e6 <__hexdig_fun+0x1a>
 80091e2:	3847      	subs	r0, #71	; 0x47
 80091e4:	e7f7      	b.n	80091d6 <__hexdig_fun+0xa>
 80091e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80091ea:	2b05      	cmp	r3, #5
 80091ec:	d801      	bhi.n	80091f2 <__hexdig_fun+0x26>
 80091ee:	3827      	subs	r0, #39	; 0x27
 80091f0:	e7f1      	b.n	80091d6 <__hexdig_fun+0xa>
 80091f2:	2000      	movs	r0, #0
 80091f4:	4770      	bx	lr

080091f6 <__gethex>:
 80091f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fa:	b08b      	sub	sp, #44	; 0x2c
 80091fc:	468a      	mov	sl, r1
 80091fe:	9002      	str	r0, [sp, #8]
 8009200:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009202:	9306      	str	r3, [sp, #24]
 8009204:	4690      	mov	r8, r2
 8009206:	f000 fad0 	bl	80097aa <__localeconv_l>
 800920a:	6803      	ldr	r3, [r0, #0]
 800920c:	9303      	str	r3, [sp, #12]
 800920e:	4618      	mov	r0, r3
 8009210:	f7f7 f808 	bl	8000224 <strlen>
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	9001      	str	r0, [sp, #4]
 8009218:	4403      	add	r3, r0
 800921a:	f04f 0b00 	mov.w	fp, #0
 800921e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009222:	9307      	str	r3, [sp, #28]
 8009224:	f8da 3000 	ldr.w	r3, [sl]
 8009228:	3302      	adds	r3, #2
 800922a:	461f      	mov	r7, r3
 800922c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009230:	2830      	cmp	r0, #48	; 0x30
 8009232:	d06c      	beq.n	800930e <__gethex+0x118>
 8009234:	f7ff ffca 	bl	80091cc <__hexdig_fun>
 8009238:	4604      	mov	r4, r0
 800923a:	2800      	cmp	r0, #0
 800923c:	d16a      	bne.n	8009314 <__gethex+0x11e>
 800923e:	9a01      	ldr	r2, [sp, #4]
 8009240:	9903      	ldr	r1, [sp, #12]
 8009242:	4638      	mov	r0, r7
 8009244:	f001 f888 	bl	800a358 <strncmp>
 8009248:	2800      	cmp	r0, #0
 800924a:	d166      	bne.n	800931a <__gethex+0x124>
 800924c:	9b01      	ldr	r3, [sp, #4]
 800924e:	5cf8      	ldrb	r0, [r7, r3]
 8009250:	18fe      	adds	r6, r7, r3
 8009252:	f7ff ffbb 	bl	80091cc <__hexdig_fun>
 8009256:	2800      	cmp	r0, #0
 8009258:	d062      	beq.n	8009320 <__gethex+0x12a>
 800925a:	4633      	mov	r3, r6
 800925c:	7818      	ldrb	r0, [r3, #0]
 800925e:	2830      	cmp	r0, #48	; 0x30
 8009260:	461f      	mov	r7, r3
 8009262:	f103 0301 	add.w	r3, r3, #1
 8009266:	d0f9      	beq.n	800925c <__gethex+0x66>
 8009268:	f7ff ffb0 	bl	80091cc <__hexdig_fun>
 800926c:	fab0 f580 	clz	r5, r0
 8009270:	096d      	lsrs	r5, r5, #5
 8009272:	4634      	mov	r4, r6
 8009274:	f04f 0b01 	mov.w	fp, #1
 8009278:	463a      	mov	r2, r7
 800927a:	4616      	mov	r6, r2
 800927c:	3201      	adds	r2, #1
 800927e:	7830      	ldrb	r0, [r6, #0]
 8009280:	f7ff ffa4 	bl	80091cc <__hexdig_fun>
 8009284:	2800      	cmp	r0, #0
 8009286:	d1f8      	bne.n	800927a <__gethex+0x84>
 8009288:	9a01      	ldr	r2, [sp, #4]
 800928a:	9903      	ldr	r1, [sp, #12]
 800928c:	4630      	mov	r0, r6
 800928e:	f001 f863 	bl	800a358 <strncmp>
 8009292:	b950      	cbnz	r0, 80092aa <__gethex+0xb4>
 8009294:	b954      	cbnz	r4, 80092ac <__gethex+0xb6>
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	18f4      	adds	r4, r6, r3
 800929a:	4622      	mov	r2, r4
 800929c:	4616      	mov	r6, r2
 800929e:	3201      	adds	r2, #1
 80092a0:	7830      	ldrb	r0, [r6, #0]
 80092a2:	f7ff ff93 	bl	80091cc <__hexdig_fun>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d1f8      	bne.n	800929c <__gethex+0xa6>
 80092aa:	b10c      	cbz	r4, 80092b0 <__gethex+0xba>
 80092ac:	1ba4      	subs	r4, r4, r6
 80092ae:	00a4      	lsls	r4, r4, #2
 80092b0:	7833      	ldrb	r3, [r6, #0]
 80092b2:	2b50      	cmp	r3, #80	; 0x50
 80092b4:	d001      	beq.n	80092ba <__gethex+0xc4>
 80092b6:	2b70      	cmp	r3, #112	; 0x70
 80092b8:	d140      	bne.n	800933c <__gethex+0x146>
 80092ba:	7873      	ldrb	r3, [r6, #1]
 80092bc:	2b2b      	cmp	r3, #43	; 0x2b
 80092be:	d031      	beq.n	8009324 <__gethex+0x12e>
 80092c0:	2b2d      	cmp	r3, #45	; 0x2d
 80092c2:	d033      	beq.n	800932c <__gethex+0x136>
 80092c4:	1c71      	adds	r1, r6, #1
 80092c6:	f04f 0900 	mov.w	r9, #0
 80092ca:	7808      	ldrb	r0, [r1, #0]
 80092cc:	f7ff ff7e 	bl	80091cc <__hexdig_fun>
 80092d0:	1e43      	subs	r3, r0, #1
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	2b18      	cmp	r3, #24
 80092d6:	d831      	bhi.n	800933c <__gethex+0x146>
 80092d8:	f1a0 0210 	sub.w	r2, r0, #16
 80092dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092e0:	f7ff ff74 	bl	80091cc <__hexdig_fun>
 80092e4:	1e43      	subs	r3, r0, #1
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b18      	cmp	r3, #24
 80092ea:	d922      	bls.n	8009332 <__gethex+0x13c>
 80092ec:	f1b9 0f00 	cmp.w	r9, #0
 80092f0:	d000      	beq.n	80092f4 <__gethex+0xfe>
 80092f2:	4252      	negs	r2, r2
 80092f4:	4414      	add	r4, r2
 80092f6:	f8ca 1000 	str.w	r1, [sl]
 80092fa:	b30d      	cbz	r5, 8009340 <__gethex+0x14a>
 80092fc:	f1bb 0f00 	cmp.w	fp, #0
 8009300:	bf0c      	ite	eq
 8009302:	2706      	moveq	r7, #6
 8009304:	2700      	movne	r7, #0
 8009306:	4638      	mov	r0, r7
 8009308:	b00b      	add	sp, #44	; 0x2c
 800930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930e:	f10b 0b01 	add.w	fp, fp, #1
 8009312:	e78a      	b.n	800922a <__gethex+0x34>
 8009314:	2500      	movs	r5, #0
 8009316:	462c      	mov	r4, r5
 8009318:	e7ae      	b.n	8009278 <__gethex+0x82>
 800931a:	463e      	mov	r6, r7
 800931c:	2501      	movs	r5, #1
 800931e:	e7c7      	b.n	80092b0 <__gethex+0xba>
 8009320:	4604      	mov	r4, r0
 8009322:	e7fb      	b.n	800931c <__gethex+0x126>
 8009324:	f04f 0900 	mov.w	r9, #0
 8009328:	1cb1      	adds	r1, r6, #2
 800932a:	e7ce      	b.n	80092ca <__gethex+0xd4>
 800932c:	f04f 0901 	mov.w	r9, #1
 8009330:	e7fa      	b.n	8009328 <__gethex+0x132>
 8009332:	230a      	movs	r3, #10
 8009334:	fb03 0202 	mla	r2, r3, r2, r0
 8009338:	3a10      	subs	r2, #16
 800933a:	e7cf      	b.n	80092dc <__gethex+0xe6>
 800933c:	4631      	mov	r1, r6
 800933e:	e7da      	b.n	80092f6 <__gethex+0x100>
 8009340:	1bf3      	subs	r3, r6, r7
 8009342:	3b01      	subs	r3, #1
 8009344:	4629      	mov	r1, r5
 8009346:	2b07      	cmp	r3, #7
 8009348:	dc49      	bgt.n	80093de <__gethex+0x1e8>
 800934a:	9802      	ldr	r0, [sp, #8]
 800934c:	f000 fa65 	bl	800981a <_Balloc>
 8009350:	9b01      	ldr	r3, [sp, #4]
 8009352:	f100 0914 	add.w	r9, r0, #20
 8009356:	f04f 0b00 	mov.w	fp, #0
 800935a:	f1c3 0301 	rsb	r3, r3, #1
 800935e:	4605      	mov	r5, r0
 8009360:	f8cd 9010 	str.w	r9, [sp, #16]
 8009364:	46da      	mov	sl, fp
 8009366:	9308      	str	r3, [sp, #32]
 8009368:	42b7      	cmp	r7, r6
 800936a:	d33b      	bcc.n	80093e4 <__gethex+0x1ee>
 800936c:	9804      	ldr	r0, [sp, #16]
 800936e:	f840 ab04 	str.w	sl, [r0], #4
 8009372:	eba0 0009 	sub.w	r0, r0, r9
 8009376:	1080      	asrs	r0, r0, #2
 8009378:	6128      	str	r0, [r5, #16]
 800937a:	0147      	lsls	r7, r0, #5
 800937c:	4650      	mov	r0, sl
 800937e:	f000 fb10 	bl	80099a2 <__hi0bits>
 8009382:	f8d8 6000 	ldr.w	r6, [r8]
 8009386:	1a3f      	subs	r7, r7, r0
 8009388:	42b7      	cmp	r7, r6
 800938a:	dd64      	ble.n	8009456 <__gethex+0x260>
 800938c:	1bbf      	subs	r7, r7, r6
 800938e:	4639      	mov	r1, r7
 8009390:	4628      	mov	r0, r5
 8009392:	f000 fe1f 	bl	8009fd4 <__any_on>
 8009396:	4682      	mov	sl, r0
 8009398:	b178      	cbz	r0, 80093ba <__gethex+0x1c4>
 800939a:	1e7b      	subs	r3, r7, #1
 800939c:	1159      	asrs	r1, r3, #5
 800939e:	f003 021f 	and.w	r2, r3, #31
 80093a2:	f04f 0a01 	mov.w	sl, #1
 80093a6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80093aa:	fa0a f202 	lsl.w	r2, sl, r2
 80093ae:	420a      	tst	r2, r1
 80093b0:	d003      	beq.n	80093ba <__gethex+0x1c4>
 80093b2:	4553      	cmp	r3, sl
 80093b4:	dc46      	bgt.n	8009444 <__gethex+0x24e>
 80093b6:	f04f 0a02 	mov.w	sl, #2
 80093ba:	4639      	mov	r1, r7
 80093bc:	4628      	mov	r0, r5
 80093be:	f7ff fecb 	bl	8009158 <rshift>
 80093c2:	443c      	add	r4, r7
 80093c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093c8:	42a3      	cmp	r3, r4
 80093ca:	da52      	bge.n	8009472 <__gethex+0x27c>
 80093cc:	4629      	mov	r1, r5
 80093ce:	9802      	ldr	r0, [sp, #8]
 80093d0:	f000 fa57 	bl	8009882 <_Bfree>
 80093d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093d6:	2300      	movs	r3, #0
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	27a3      	movs	r7, #163	; 0xa3
 80093dc:	e793      	b.n	8009306 <__gethex+0x110>
 80093de:	3101      	adds	r1, #1
 80093e0:	105b      	asrs	r3, r3, #1
 80093e2:	e7b0      	b.n	8009346 <__gethex+0x150>
 80093e4:	1e73      	subs	r3, r6, #1
 80093e6:	9305      	str	r3, [sp, #20]
 80093e8:	9a07      	ldr	r2, [sp, #28]
 80093ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d018      	beq.n	8009424 <__gethex+0x22e>
 80093f2:	f1bb 0f20 	cmp.w	fp, #32
 80093f6:	d107      	bne.n	8009408 <__gethex+0x212>
 80093f8:	9b04      	ldr	r3, [sp, #16]
 80093fa:	f8c3 a000 	str.w	sl, [r3]
 80093fe:	3304      	adds	r3, #4
 8009400:	f04f 0a00 	mov.w	sl, #0
 8009404:	9304      	str	r3, [sp, #16]
 8009406:	46d3      	mov	fp, sl
 8009408:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800940c:	f7ff fede 	bl	80091cc <__hexdig_fun>
 8009410:	f000 000f 	and.w	r0, r0, #15
 8009414:	fa00 f00b 	lsl.w	r0, r0, fp
 8009418:	ea4a 0a00 	orr.w	sl, sl, r0
 800941c:	f10b 0b04 	add.w	fp, fp, #4
 8009420:	9b05      	ldr	r3, [sp, #20]
 8009422:	e00d      	b.n	8009440 <__gethex+0x24a>
 8009424:	9b05      	ldr	r3, [sp, #20]
 8009426:	9a08      	ldr	r2, [sp, #32]
 8009428:	4413      	add	r3, r2
 800942a:	42bb      	cmp	r3, r7
 800942c:	d3e1      	bcc.n	80093f2 <__gethex+0x1fc>
 800942e:	4618      	mov	r0, r3
 8009430:	9a01      	ldr	r2, [sp, #4]
 8009432:	9903      	ldr	r1, [sp, #12]
 8009434:	9309      	str	r3, [sp, #36]	; 0x24
 8009436:	f000 ff8f 	bl	800a358 <strncmp>
 800943a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800943c:	2800      	cmp	r0, #0
 800943e:	d1d8      	bne.n	80093f2 <__gethex+0x1fc>
 8009440:	461e      	mov	r6, r3
 8009442:	e791      	b.n	8009368 <__gethex+0x172>
 8009444:	1eb9      	subs	r1, r7, #2
 8009446:	4628      	mov	r0, r5
 8009448:	f000 fdc4 	bl	8009fd4 <__any_on>
 800944c:	2800      	cmp	r0, #0
 800944e:	d0b2      	beq.n	80093b6 <__gethex+0x1c0>
 8009450:	f04f 0a03 	mov.w	sl, #3
 8009454:	e7b1      	b.n	80093ba <__gethex+0x1c4>
 8009456:	da09      	bge.n	800946c <__gethex+0x276>
 8009458:	1bf7      	subs	r7, r6, r7
 800945a:	4629      	mov	r1, r5
 800945c:	463a      	mov	r2, r7
 800945e:	9802      	ldr	r0, [sp, #8]
 8009460:	f000 fbda 	bl	8009c18 <__lshift>
 8009464:	1be4      	subs	r4, r4, r7
 8009466:	4605      	mov	r5, r0
 8009468:	f100 0914 	add.w	r9, r0, #20
 800946c:	f04f 0a00 	mov.w	sl, #0
 8009470:	e7a8      	b.n	80093c4 <__gethex+0x1ce>
 8009472:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009476:	42a0      	cmp	r0, r4
 8009478:	dd6a      	ble.n	8009550 <__gethex+0x35a>
 800947a:	1b04      	subs	r4, r0, r4
 800947c:	42a6      	cmp	r6, r4
 800947e:	dc2e      	bgt.n	80094de <__gethex+0x2e8>
 8009480:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009484:	2b02      	cmp	r3, #2
 8009486:	d022      	beq.n	80094ce <__gethex+0x2d8>
 8009488:	2b03      	cmp	r3, #3
 800948a:	d024      	beq.n	80094d6 <__gethex+0x2e0>
 800948c:	2b01      	cmp	r3, #1
 800948e:	d115      	bne.n	80094bc <__gethex+0x2c6>
 8009490:	42a6      	cmp	r6, r4
 8009492:	d113      	bne.n	80094bc <__gethex+0x2c6>
 8009494:	2e01      	cmp	r6, #1
 8009496:	dc0b      	bgt.n	80094b0 <__gethex+0x2ba>
 8009498:	9a06      	ldr	r2, [sp, #24]
 800949a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	2301      	movs	r3, #1
 80094a2:	612b      	str	r3, [r5, #16]
 80094a4:	f8c9 3000 	str.w	r3, [r9]
 80094a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094aa:	2762      	movs	r7, #98	; 0x62
 80094ac:	601d      	str	r5, [r3, #0]
 80094ae:	e72a      	b.n	8009306 <__gethex+0x110>
 80094b0:	1e71      	subs	r1, r6, #1
 80094b2:	4628      	mov	r0, r5
 80094b4:	f000 fd8e 	bl	8009fd4 <__any_on>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d1ed      	bne.n	8009498 <__gethex+0x2a2>
 80094bc:	4629      	mov	r1, r5
 80094be:	9802      	ldr	r0, [sp, #8]
 80094c0:	f000 f9df 	bl	8009882 <_Bfree>
 80094c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094c6:	2300      	movs	r3, #0
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	2750      	movs	r7, #80	; 0x50
 80094cc:	e71b      	b.n	8009306 <__gethex+0x110>
 80094ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0e1      	beq.n	8009498 <__gethex+0x2a2>
 80094d4:	e7f2      	b.n	80094bc <__gethex+0x2c6>
 80094d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1dd      	bne.n	8009498 <__gethex+0x2a2>
 80094dc:	e7ee      	b.n	80094bc <__gethex+0x2c6>
 80094de:	1e67      	subs	r7, r4, #1
 80094e0:	f1ba 0f00 	cmp.w	sl, #0
 80094e4:	d131      	bne.n	800954a <__gethex+0x354>
 80094e6:	b127      	cbz	r7, 80094f2 <__gethex+0x2fc>
 80094e8:	4639      	mov	r1, r7
 80094ea:	4628      	mov	r0, r5
 80094ec:	f000 fd72 	bl	8009fd4 <__any_on>
 80094f0:	4682      	mov	sl, r0
 80094f2:	117a      	asrs	r2, r7, #5
 80094f4:	2301      	movs	r3, #1
 80094f6:	f007 071f 	and.w	r7, r7, #31
 80094fa:	fa03 f707 	lsl.w	r7, r3, r7
 80094fe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009502:	4621      	mov	r1, r4
 8009504:	421f      	tst	r7, r3
 8009506:	4628      	mov	r0, r5
 8009508:	bf18      	it	ne
 800950a:	f04a 0a02 	orrne.w	sl, sl, #2
 800950e:	1b36      	subs	r6, r6, r4
 8009510:	f7ff fe22 	bl	8009158 <rshift>
 8009514:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009518:	2702      	movs	r7, #2
 800951a:	f1ba 0f00 	cmp.w	sl, #0
 800951e:	d048      	beq.n	80095b2 <__gethex+0x3bc>
 8009520:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009524:	2b02      	cmp	r3, #2
 8009526:	d015      	beq.n	8009554 <__gethex+0x35e>
 8009528:	2b03      	cmp	r3, #3
 800952a:	d017      	beq.n	800955c <__gethex+0x366>
 800952c:	2b01      	cmp	r3, #1
 800952e:	d109      	bne.n	8009544 <__gethex+0x34e>
 8009530:	f01a 0f02 	tst.w	sl, #2
 8009534:	d006      	beq.n	8009544 <__gethex+0x34e>
 8009536:	f8d9 3000 	ldr.w	r3, [r9]
 800953a:	ea4a 0a03 	orr.w	sl, sl, r3
 800953e:	f01a 0f01 	tst.w	sl, #1
 8009542:	d10e      	bne.n	8009562 <__gethex+0x36c>
 8009544:	f047 0710 	orr.w	r7, r7, #16
 8009548:	e033      	b.n	80095b2 <__gethex+0x3bc>
 800954a:	f04f 0a01 	mov.w	sl, #1
 800954e:	e7d0      	b.n	80094f2 <__gethex+0x2fc>
 8009550:	2701      	movs	r7, #1
 8009552:	e7e2      	b.n	800951a <__gethex+0x324>
 8009554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009556:	f1c3 0301 	rsb	r3, r3, #1
 800955a:	9315      	str	r3, [sp, #84]	; 0x54
 800955c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0f0      	beq.n	8009544 <__gethex+0x34e>
 8009562:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009566:	f105 0314 	add.w	r3, r5, #20
 800956a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800956e:	eb03 010a 	add.w	r1, r3, sl
 8009572:	f04f 0c00 	mov.w	ip, #0
 8009576:	4618      	mov	r0, r3
 8009578:	f853 2b04 	ldr.w	r2, [r3], #4
 800957c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009580:	d01c      	beq.n	80095bc <__gethex+0x3c6>
 8009582:	3201      	adds	r2, #1
 8009584:	6002      	str	r2, [r0, #0]
 8009586:	2f02      	cmp	r7, #2
 8009588:	f105 0314 	add.w	r3, r5, #20
 800958c:	d138      	bne.n	8009600 <__gethex+0x40a>
 800958e:	f8d8 2000 	ldr.w	r2, [r8]
 8009592:	3a01      	subs	r2, #1
 8009594:	42b2      	cmp	r2, r6
 8009596:	d10a      	bne.n	80095ae <__gethex+0x3b8>
 8009598:	1171      	asrs	r1, r6, #5
 800959a:	2201      	movs	r2, #1
 800959c:	f006 061f 	and.w	r6, r6, #31
 80095a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095a4:	fa02 f606 	lsl.w	r6, r2, r6
 80095a8:	421e      	tst	r6, r3
 80095aa:	bf18      	it	ne
 80095ac:	4617      	movne	r7, r2
 80095ae:	f047 0720 	orr.w	r7, r7, #32
 80095b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095b4:	601d      	str	r5, [r3, #0]
 80095b6:	9b06      	ldr	r3, [sp, #24]
 80095b8:	601c      	str	r4, [r3, #0]
 80095ba:	e6a4      	b.n	8009306 <__gethex+0x110>
 80095bc:	4299      	cmp	r1, r3
 80095be:	f843 cc04 	str.w	ip, [r3, #-4]
 80095c2:	d8d8      	bhi.n	8009576 <__gethex+0x380>
 80095c4:	68ab      	ldr	r3, [r5, #8]
 80095c6:	4599      	cmp	r9, r3
 80095c8:	db12      	blt.n	80095f0 <__gethex+0x3fa>
 80095ca:	6869      	ldr	r1, [r5, #4]
 80095cc:	9802      	ldr	r0, [sp, #8]
 80095ce:	3101      	adds	r1, #1
 80095d0:	f000 f923 	bl	800981a <_Balloc>
 80095d4:	692a      	ldr	r2, [r5, #16]
 80095d6:	3202      	adds	r2, #2
 80095d8:	f105 010c 	add.w	r1, r5, #12
 80095dc:	4683      	mov	fp, r0
 80095de:	0092      	lsls	r2, r2, #2
 80095e0:	300c      	adds	r0, #12
 80095e2:	f000 f90d 	bl	8009800 <memcpy>
 80095e6:	4629      	mov	r1, r5
 80095e8:	9802      	ldr	r0, [sp, #8]
 80095ea:	f000 f94a 	bl	8009882 <_Bfree>
 80095ee:	465d      	mov	r5, fp
 80095f0:	692b      	ldr	r3, [r5, #16]
 80095f2:	1c5a      	adds	r2, r3, #1
 80095f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80095f8:	612a      	str	r2, [r5, #16]
 80095fa:	2201      	movs	r2, #1
 80095fc:	615a      	str	r2, [r3, #20]
 80095fe:	e7c2      	b.n	8009586 <__gethex+0x390>
 8009600:	692a      	ldr	r2, [r5, #16]
 8009602:	454a      	cmp	r2, r9
 8009604:	dd0b      	ble.n	800961e <__gethex+0x428>
 8009606:	2101      	movs	r1, #1
 8009608:	4628      	mov	r0, r5
 800960a:	f7ff fda5 	bl	8009158 <rshift>
 800960e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009612:	3401      	adds	r4, #1
 8009614:	42a3      	cmp	r3, r4
 8009616:	f6ff aed9 	blt.w	80093cc <__gethex+0x1d6>
 800961a:	2701      	movs	r7, #1
 800961c:	e7c7      	b.n	80095ae <__gethex+0x3b8>
 800961e:	f016 061f 	ands.w	r6, r6, #31
 8009622:	d0fa      	beq.n	800961a <__gethex+0x424>
 8009624:	449a      	add	sl, r3
 8009626:	f1c6 0620 	rsb	r6, r6, #32
 800962a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800962e:	f000 f9b8 	bl	80099a2 <__hi0bits>
 8009632:	42b0      	cmp	r0, r6
 8009634:	dbe7      	blt.n	8009606 <__gethex+0x410>
 8009636:	e7f0      	b.n	800961a <__gethex+0x424>

08009638 <L_shift>:
 8009638:	f1c2 0208 	rsb	r2, r2, #8
 800963c:	0092      	lsls	r2, r2, #2
 800963e:	b570      	push	{r4, r5, r6, lr}
 8009640:	f1c2 0620 	rsb	r6, r2, #32
 8009644:	6843      	ldr	r3, [r0, #4]
 8009646:	6804      	ldr	r4, [r0, #0]
 8009648:	fa03 f506 	lsl.w	r5, r3, r6
 800964c:	432c      	orrs	r4, r5
 800964e:	40d3      	lsrs	r3, r2
 8009650:	6004      	str	r4, [r0, #0]
 8009652:	f840 3f04 	str.w	r3, [r0, #4]!
 8009656:	4288      	cmp	r0, r1
 8009658:	d3f4      	bcc.n	8009644 <L_shift+0xc>
 800965a:	bd70      	pop	{r4, r5, r6, pc}

0800965c <__match>:
 800965c:	b530      	push	{r4, r5, lr}
 800965e:	6803      	ldr	r3, [r0, #0]
 8009660:	3301      	adds	r3, #1
 8009662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009666:	b914      	cbnz	r4, 800966e <__match+0x12>
 8009668:	6003      	str	r3, [r0, #0]
 800966a:	2001      	movs	r0, #1
 800966c:	bd30      	pop	{r4, r5, pc}
 800966e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009672:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009676:	2d19      	cmp	r5, #25
 8009678:	bf98      	it	ls
 800967a:	3220      	addls	r2, #32
 800967c:	42a2      	cmp	r2, r4
 800967e:	d0f0      	beq.n	8009662 <__match+0x6>
 8009680:	2000      	movs	r0, #0
 8009682:	e7f3      	b.n	800966c <__match+0x10>

08009684 <__hexnan>:
 8009684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009688:	680b      	ldr	r3, [r1, #0]
 800968a:	6801      	ldr	r1, [r0, #0]
 800968c:	115f      	asrs	r7, r3, #5
 800968e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009692:	f013 031f 	ands.w	r3, r3, #31
 8009696:	b087      	sub	sp, #28
 8009698:	bf18      	it	ne
 800969a:	3704      	addne	r7, #4
 800969c:	2500      	movs	r5, #0
 800969e:	1f3e      	subs	r6, r7, #4
 80096a0:	4682      	mov	sl, r0
 80096a2:	4690      	mov	r8, r2
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	f847 5c04 	str.w	r5, [r7, #-4]
 80096aa:	46b1      	mov	r9, r6
 80096ac:	4634      	mov	r4, r6
 80096ae:	9502      	str	r5, [sp, #8]
 80096b0:	46ab      	mov	fp, r5
 80096b2:	784a      	ldrb	r2, [r1, #1]
 80096b4:	1c4b      	adds	r3, r1, #1
 80096b6:	9303      	str	r3, [sp, #12]
 80096b8:	b342      	cbz	r2, 800970c <__hexnan+0x88>
 80096ba:	4610      	mov	r0, r2
 80096bc:	9105      	str	r1, [sp, #20]
 80096be:	9204      	str	r2, [sp, #16]
 80096c0:	f7ff fd84 	bl	80091cc <__hexdig_fun>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d143      	bne.n	8009750 <__hexnan+0xcc>
 80096c8:	9a04      	ldr	r2, [sp, #16]
 80096ca:	9905      	ldr	r1, [sp, #20]
 80096cc:	2a20      	cmp	r2, #32
 80096ce:	d818      	bhi.n	8009702 <__hexnan+0x7e>
 80096d0:	9b02      	ldr	r3, [sp, #8]
 80096d2:	459b      	cmp	fp, r3
 80096d4:	dd13      	ble.n	80096fe <__hexnan+0x7a>
 80096d6:	454c      	cmp	r4, r9
 80096d8:	d206      	bcs.n	80096e8 <__hexnan+0x64>
 80096da:	2d07      	cmp	r5, #7
 80096dc:	dc04      	bgt.n	80096e8 <__hexnan+0x64>
 80096de:	462a      	mov	r2, r5
 80096e0:	4649      	mov	r1, r9
 80096e2:	4620      	mov	r0, r4
 80096e4:	f7ff ffa8 	bl	8009638 <L_shift>
 80096e8:	4544      	cmp	r4, r8
 80096ea:	d944      	bls.n	8009776 <__hexnan+0xf2>
 80096ec:	2300      	movs	r3, #0
 80096ee:	f1a4 0904 	sub.w	r9, r4, #4
 80096f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80096f6:	f8cd b008 	str.w	fp, [sp, #8]
 80096fa:	464c      	mov	r4, r9
 80096fc:	461d      	mov	r5, r3
 80096fe:	9903      	ldr	r1, [sp, #12]
 8009700:	e7d7      	b.n	80096b2 <__hexnan+0x2e>
 8009702:	2a29      	cmp	r2, #41	; 0x29
 8009704:	d14a      	bne.n	800979c <__hexnan+0x118>
 8009706:	3102      	adds	r1, #2
 8009708:	f8ca 1000 	str.w	r1, [sl]
 800970c:	f1bb 0f00 	cmp.w	fp, #0
 8009710:	d044      	beq.n	800979c <__hexnan+0x118>
 8009712:	454c      	cmp	r4, r9
 8009714:	d206      	bcs.n	8009724 <__hexnan+0xa0>
 8009716:	2d07      	cmp	r5, #7
 8009718:	dc04      	bgt.n	8009724 <__hexnan+0xa0>
 800971a:	462a      	mov	r2, r5
 800971c:	4649      	mov	r1, r9
 800971e:	4620      	mov	r0, r4
 8009720:	f7ff ff8a 	bl	8009638 <L_shift>
 8009724:	4544      	cmp	r4, r8
 8009726:	d928      	bls.n	800977a <__hexnan+0xf6>
 8009728:	4643      	mov	r3, r8
 800972a:	f854 2b04 	ldr.w	r2, [r4], #4
 800972e:	f843 2b04 	str.w	r2, [r3], #4
 8009732:	42a6      	cmp	r6, r4
 8009734:	d2f9      	bcs.n	800972a <__hexnan+0xa6>
 8009736:	2200      	movs	r2, #0
 8009738:	f843 2b04 	str.w	r2, [r3], #4
 800973c:	429e      	cmp	r6, r3
 800973e:	d2fb      	bcs.n	8009738 <__hexnan+0xb4>
 8009740:	6833      	ldr	r3, [r6, #0]
 8009742:	b91b      	cbnz	r3, 800974c <__hexnan+0xc8>
 8009744:	4546      	cmp	r6, r8
 8009746:	d127      	bne.n	8009798 <__hexnan+0x114>
 8009748:	2301      	movs	r3, #1
 800974a:	6033      	str	r3, [r6, #0]
 800974c:	2005      	movs	r0, #5
 800974e:	e026      	b.n	800979e <__hexnan+0x11a>
 8009750:	3501      	adds	r5, #1
 8009752:	2d08      	cmp	r5, #8
 8009754:	f10b 0b01 	add.w	fp, fp, #1
 8009758:	dd06      	ble.n	8009768 <__hexnan+0xe4>
 800975a:	4544      	cmp	r4, r8
 800975c:	d9cf      	bls.n	80096fe <__hexnan+0x7a>
 800975e:	2300      	movs	r3, #0
 8009760:	f844 3c04 	str.w	r3, [r4, #-4]
 8009764:	2501      	movs	r5, #1
 8009766:	3c04      	subs	r4, #4
 8009768:	6822      	ldr	r2, [r4, #0]
 800976a:	f000 000f 	and.w	r0, r0, #15
 800976e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009772:	6020      	str	r0, [r4, #0]
 8009774:	e7c3      	b.n	80096fe <__hexnan+0x7a>
 8009776:	2508      	movs	r5, #8
 8009778:	e7c1      	b.n	80096fe <__hexnan+0x7a>
 800977a:	9b01      	ldr	r3, [sp, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d0df      	beq.n	8009740 <__hexnan+0xbc>
 8009780:	f04f 32ff 	mov.w	r2, #4294967295
 8009784:	f1c3 0320 	rsb	r3, r3, #32
 8009788:	fa22 f303 	lsr.w	r3, r2, r3
 800978c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009790:	401a      	ands	r2, r3
 8009792:	f847 2c04 	str.w	r2, [r7, #-4]
 8009796:	e7d3      	b.n	8009740 <__hexnan+0xbc>
 8009798:	3e04      	subs	r6, #4
 800979a:	e7d1      	b.n	8009740 <__hexnan+0xbc>
 800979c:	2004      	movs	r0, #4
 800979e:	b007      	add	sp, #28
 80097a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097a4 <__locale_ctype_ptr_l>:
 80097a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80097a8:	4770      	bx	lr

080097aa <__localeconv_l>:
 80097aa:	30f0      	adds	r0, #240	; 0xf0
 80097ac:	4770      	bx	lr
	...

080097b0 <_localeconv_r>:
 80097b0:	4b04      	ldr	r3, [pc, #16]	; (80097c4 <_localeconv_r+0x14>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6a18      	ldr	r0, [r3, #32]
 80097b6:	4b04      	ldr	r3, [pc, #16]	; (80097c8 <_localeconv_r+0x18>)
 80097b8:	2800      	cmp	r0, #0
 80097ba:	bf08      	it	eq
 80097bc:	4618      	moveq	r0, r3
 80097be:	30f0      	adds	r0, #240	; 0xf0
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	20000034 	.word	0x20000034
 80097c8:	20000098 	.word	0x20000098

080097cc <malloc>:
 80097cc:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <malloc+0xc>)
 80097ce:	4601      	mov	r1, r0
 80097d0:	6818      	ldr	r0, [r3, #0]
 80097d2:	f7fd ba8b 	b.w	8006cec <_malloc_r>
 80097d6:	bf00      	nop
 80097d8:	20000034 	.word	0x20000034

080097dc <__ascii_mbtowc>:
 80097dc:	b082      	sub	sp, #8
 80097de:	b901      	cbnz	r1, 80097e2 <__ascii_mbtowc+0x6>
 80097e0:	a901      	add	r1, sp, #4
 80097e2:	b142      	cbz	r2, 80097f6 <__ascii_mbtowc+0x1a>
 80097e4:	b14b      	cbz	r3, 80097fa <__ascii_mbtowc+0x1e>
 80097e6:	7813      	ldrb	r3, [r2, #0]
 80097e8:	600b      	str	r3, [r1, #0]
 80097ea:	7812      	ldrb	r2, [r2, #0]
 80097ec:	1c10      	adds	r0, r2, #0
 80097ee:	bf18      	it	ne
 80097f0:	2001      	movne	r0, #1
 80097f2:	b002      	add	sp, #8
 80097f4:	4770      	bx	lr
 80097f6:	4610      	mov	r0, r2
 80097f8:	e7fb      	b.n	80097f2 <__ascii_mbtowc+0x16>
 80097fa:	f06f 0001 	mvn.w	r0, #1
 80097fe:	e7f8      	b.n	80097f2 <__ascii_mbtowc+0x16>

08009800 <memcpy>:
 8009800:	b510      	push	{r4, lr}
 8009802:	1e43      	subs	r3, r0, #1
 8009804:	440a      	add	r2, r1
 8009806:	4291      	cmp	r1, r2
 8009808:	d100      	bne.n	800980c <memcpy+0xc>
 800980a:	bd10      	pop	{r4, pc}
 800980c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009814:	e7f7      	b.n	8009806 <memcpy+0x6>

08009816 <__malloc_lock>:
 8009816:	4770      	bx	lr

08009818 <__malloc_unlock>:
 8009818:	4770      	bx	lr

0800981a <_Balloc>:
 800981a:	b570      	push	{r4, r5, r6, lr}
 800981c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800981e:	4604      	mov	r4, r0
 8009820:	460e      	mov	r6, r1
 8009822:	b93d      	cbnz	r5, 8009834 <_Balloc+0x1a>
 8009824:	2010      	movs	r0, #16
 8009826:	f7ff ffd1 	bl	80097cc <malloc>
 800982a:	6260      	str	r0, [r4, #36]	; 0x24
 800982c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009830:	6005      	str	r5, [r0, #0]
 8009832:	60c5      	str	r5, [r0, #12]
 8009834:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009836:	68eb      	ldr	r3, [r5, #12]
 8009838:	b183      	cbz	r3, 800985c <_Balloc+0x42>
 800983a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009842:	b9b8      	cbnz	r0, 8009874 <_Balloc+0x5a>
 8009844:	2101      	movs	r1, #1
 8009846:	fa01 f506 	lsl.w	r5, r1, r6
 800984a:	1d6a      	adds	r2, r5, #5
 800984c:	0092      	lsls	r2, r2, #2
 800984e:	4620      	mov	r0, r4
 8009850:	f7fd fa3e 	bl	8006cd0 <_calloc_r>
 8009854:	b160      	cbz	r0, 8009870 <_Balloc+0x56>
 8009856:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800985a:	e00e      	b.n	800987a <_Balloc+0x60>
 800985c:	2221      	movs	r2, #33	; 0x21
 800985e:	2104      	movs	r1, #4
 8009860:	4620      	mov	r0, r4
 8009862:	f7fd fa35 	bl	8006cd0 <_calloc_r>
 8009866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009868:	60e8      	str	r0, [r5, #12]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1e4      	bne.n	800983a <_Balloc+0x20>
 8009870:	2000      	movs	r0, #0
 8009872:	bd70      	pop	{r4, r5, r6, pc}
 8009874:	6802      	ldr	r2, [r0, #0]
 8009876:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800987a:	2300      	movs	r3, #0
 800987c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009880:	e7f7      	b.n	8009872 <_Balloc+0x58>

08009882 <_Bfree>:
 8009882:	b570      	push	{r4, r5, r6, lr}
 8009884:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009886:	4606      	mov	r6, r0
 8009888:	460d      	mov	r5, r1
 800988a:	b93c      	cbnz	r4, 800989c <_Bfree+0x1a>
 800988c:	2010      	movs	r0, #16
 800988e:	f7ff ff9d 	bl	80097cc <malloc>
 8009892:	6270      	str	r0, [r6, #36]	; 0x24
 8009894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009898:	6004      	str	r4, [r0, #0]
 800989a:	60c4      	str	r4, [r0, #12]
 800989c:	b13d      	cbz	r5, 80098ae <_Bfree+0x2c>
 800989e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80098a0:	686a      	ldr	r2, [r5, #4]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098a8:	6029      	str	r1, [r5, #0]
 80098aa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80098ae:	bd70      	pop	{r4, r5, r6, pc}

080098b0 <__multadd>:
 80098b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b4:	690d      	ldr	r5, [r1, #16]
 80098b6:	461f      	mov	r7, r3
 80098b8:	4606      	mov	r6, r0
 80098ba:	460c      	mov	r4, r1
 80098bc:	f101 0c14 	add.w	ip, r1, #20
 80098c0:	2300      	movs	r3, #0
 80098c2:	f8dc 0000 	ldr.w	r0, [ip]
 80098c6:	b281      	uxth	r1, r0
 80098c8:	fb02 7101 	mla	r1, r2, r1, r7
 80098cc:	0c0f      	lsrs	r7, r1, #16
 80098ce:	0c00      	lsrs	r0, r0, #16
 80098d0:	fb02 7000 	mla	r0, r2, r0, r7
 80098d4:	b289      	uxth	r1, r1
 80098d6:	3301      	adds	r3, #1
 80098d8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80098dc:	429d      	cmp	r5, r3
 80098de:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80098e2:	f84c 1b04 	str.w	r1, [ip], #4
 80098e6:	dcec      	bgt.n	80098c2 <__multadd+0x12>
 80098e8:	b1d7      	cbz	r7, 8009920 <__multadd+0x70>
 80098ea:	68a3      	ldr	r3, [r4, #8]
 80098ec:	42ab      	cmp	r3, r5
 80098ee:	dc12      	bgt.n	8009916 <__multadd+0x66>
 80098f0:	6861      	ldr	r1, [r4, #4]
 80098f2:	4630      	mov	r0, r6
 80098f4:	3101      	adds	r1, #1
 80098f6:	f7ff ff90 	bl	800981a <_Balloc>
 80098fa:	6922      	ldr	r2, [r4, #16]
 80098fc:	3202      	adds	r2, #2
 80098fe:	f104 010c 	add.w	r1, r4, #12
 8009902:	4680      	mov	r8, r0
 8009904:	0092      	lsls	r2, r2, #2
 8009906:	300c      	adds	r0, #12
 8009908:	f7ff ff7a 	bl	8009800 <memcpy>
 800990c:	4621      	mov	r1, r4
 800990e:	4630      	mov	r0, r6
 8009910:	f7ff ffb7 	bl	8009882 <_Bfree>
 8009914:	4644      	mov	r4, r8
 8009916:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800991a:	3501      	adds	r5, #1
 800991c:	615f      	str	r7, [r3, #20]
 800991e:	6125      	str	r5, [r4, #16]
 8009920:	4620      	mov	r0, r4
 8009922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009926 <__s2b>:
 8009926:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800992a:	460c      	mov	r4, r1
 800992c:	4615      	mov	r5, r2
 800992e:	461f      	mov	r7, r3
 8009930:	2209      	movs	r2, #9
 8009932:	3308      	adds	r3, #8
 8009934:	4606      	mov	r6, r0
 8009936:	fb93 f3f2 	sdiv	r3, r3, r2
 800993a:	2100      	movs	r1, #0
 800993c:	2201      	movs	r2, #1
 800993e:	429a      	cmp	r2, r3
 8009940:	db20      	blt.n	8009984 <__s2b+0x5e>
 8009942:	4630      	mov	r0, r6
 8009944:	f7ff ff69 	bl	800981a <_Balloc>
 8009948:	9b08      	ldr	r3, [sp, #32]
 800994a:	6143      	str	r3, [r0, #20]
 800994c:	2d09      	cmp	r5, #9
 800994e:	f04f 0301 	mov.w	r3, #1
 8009952:	6103      	str	r3, [r0, #16]
 8009954:	dd19      	ble.n	800998a <__s2b+0x64>
 8009956:	f104 0809 	add.w	r8, r4, #9
 800995a:	46c1      	mov	r9, r8
 800995c:	442c      	add	r4, r5
 800995e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009962:	4601      	mov	r1, r0
 8009964:	3b30      	subs	r3, #48	; 0x30
 8009966:	220a      	movs	r2, #10
 8009968:	4630      	mov	r0, r6
 800996a:	f7ff ffa1 	bl	80098b0 <__multadd>
 800996e:	45a1      	cmp	r9, r4
 8009970:	d1f5      	bne.n	800995e <__s2b+0x38>
 8009972:	eb08 0405 	add.w	r4, r8, r5
 8009976:	3c08      	subs	r4, #8
 8009978:	1b2d      	subs	r5, r5, r4
 800997a:	1963      	adds	r3, r4, r5
 800997c:	42bb      	cmp	r3, r7
 800997e:	db07      	blt.n	8009990 <__s2b+0x6a>
 8009980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009984:	0052      	lsls	r2, r2, #1
 8009986:	3101      	adds	r1, #1
 8009988:	e7d9      	b.n	800993e <__s2b+0x18>
 800998a:	340a      	adds	r4, #10
 800998c:	2509      	movs	r5, #9
 800998e:	e7f3      	b.n	8009978 <__s2b+0x52>
 8009990:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009994:	4601      	mov	r1, r0
 8009996:	3b30      	subs	r3, #48	; 0x30
 8009998:	220a      	movs	r2, #10
 800999a:	4630      	mov	r0, r6
 800999c:	f7ff ff88 	bl	80098b0 <__multadd>
 80099a0:	e7eb      	b.n	800997a <__s2b+0x54>

080099a2 <__hi0bits>:
 80099a2:	0c02      	lsrs	r2, r0, #16
 80099a4:	0412      	lsls	r2, r2, #16
 80099a6:	4603      	mov	r3, r0
 80099a8:	b9b2      	cbnz	r2, 80099d8 <__hi0bits+0x36>
 80099aa:	0403      	lsls	r3, r0, #16
 80099ac:	2010      	movs	r0, #16
 80099ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80099b2:	bf04      	itt	eq
 80099b4:	021b      	lsleq	r3, r3, #8
 80099b6:	3008      	addeq	r0, #8
 80099b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80099bc:	bf04      	itt	eq
 80099be:	011b      	lsleq	r3, r3, #4
 80099c0:	3004      	addeq	r0, #4
 80099c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80099c6:	bf04      	itt	eq
 80099c8:	009b      	lsleq	r3, r3, #2
 80099ca:	3002      	addeq	r0, #2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	db06      	blt.n	80099de <__hi0bits+0x3c>
 80099d0:	005b      	lsls	r3, r3, #1
 80099d2:	d503      	bpl.n	80099dc <__hi0bits+0x3a>
 80099d4:	3001      	adds	r0, #1
 80099d6:	4770      	bx	lr
 80099d8:	2000      	movs	r0, #0
 80099da:	e7e8      	b.n	80099ae <__hi0bits+0xc>
 80099dc:	2020      	movs	r0, #32
 80099de:	4770      	bx	lr

080099e0 <__lo0bits>:
 80099e0:	6803      	ldr	r3, [r0, #0]
 80099e2:	f013 0207 	ands.w	r2, r3, #7
 80099e6:	4601      	mov	r1, r0
 80099e8:	d00b      	beq.n	8009a02 <__lo0bits+0x22>
 80099ea:	07da      	lsls	r2, r3, #31
 80099ec:	d423      	bmi.n	8009a36 <__lo0bits+0x56>
 80099ee:	0798      	lsls	r0, r3, #30
 80099f0:	bf49      	itett	mi
 80099f2:	085b      	lsrmi	r3, r3, #1
 80099f4:	089b      	lsrpl	r3, r3, #2
 80099f6:	2001      	movmi	r0, #1
 80099f8:	600b      	strmi	r3, [r1, #0]
 80099fa:	bf5c      	itt	pl
 80099fc:	600b      	strpl	r3, [r1, #0]
 80099fe:	2002      	movpl	r0, #2
 8009a00:	4770      	bx	lr
 8009a02:	b298      	uxth	r0, r3
 8009a04:	b9a8      	cbnz	r0, 8009a32 <__lo0bits+0x52>
 8009a06:	0c1b      	lsrs	r3, r3, #16
 8009a08:	2010      	movs	r0, #16
 8009a0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a0e:	bf04      	itt	eq
 8009a10:	0a1b      	lsreq	r3, r3, #8
 8009a12:	3008      	addeq	r0, #8
 8009a14:	071a      	lsls	r2, r3, #28
 8009a16:	bf04      	itt	eq
 8009a18:	091b      	lsreq	r3, r3, #4
 8009a1a:	3004      	addeq	r0, #4
 8009a1c:	079a      	lsls	r2, r3, #30
 8009a1e:	bf04      	itt	eq
 8009a20:	089b      	lsreq	r3, r3, #2
 8009a22:	3002      	addeq	r0, #2
 8009a24:	07da      	lsls	r2, r3, #31
 8009a26:	d402      	bmi.n	8009a2e <__lo0bits+0x4e>
 8009a28:	085b      	lsrs	r3, r3, #1
 8009a2a:	d006      	beq.n	8009a3a <__lo0bits+0x5a>
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	600b      	str	r3, [r1, #0]
 8009a30:	4770      	bx	lr
 8009a32:	4610      	mov	r0, r2
 8009a34:	e7e9      	b.n	8009a0a <__lo0bits+0x2a>
 8009a36:	2000      	movs	r0, #0
 8009a38:	4770      	bx	lr
 8009a3a:	2020      	movs	r0, #32
 8009a3c:	4770      	bx	lr

08009a3e <__i2b>:
 8009a3e:	b510      	push	{r4, lr}
 8009a40:	460c      	mov	r4, r1
 8009a42:	2101      	movs	r1, #1
 8009a44:	f7ff fee9 	bl	800981a <_Balloc>
 8009a48:	2201      	movs	r2, #1
 8009a4a:	6144      	str	r4, [r0, #20]
 8009a4c:	6102      	str	r2, [r0, #16]
 8009a4e:	bd10      	pop	{r4, pc}

08009a50 <__multiply>:
 8009a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	4614      	mov	r4, r2
 8009a56:	690a      	ldr	r2, [r1, #16]
 8009a58:	6923      	ldr	r3, [r4, #16]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	bfb8      	it	lt
 8009a5e:	460b      	movlt	r3, r1
 8009a60:	4688      	mov	r8, r1
 8009a62:	bfbc      	itt	lt
 8009a64:	46a0      	movlt	r8, r4
 8009a66:	461c      	movlt	r4, r3
 8009a68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a78:	eb07 0609 	add.w	r6, r7, r9
 8009a7c:	42b3      	cmp	r3, r6
 8009a7e:	bfb8      	it	lt
 8009a80:	3101      	addlt	r1, #1
 8009a82:	f7ff feca 	bl	800981a <_Balloc>
 8009a86:	f100 0514 	add.w	r5, r0, #20
 8009a8a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009a8e:	462b      	mov	r3, r5
 8009a90:	2200      	movs	r2, #0
 8009a92:	4573      	cmp	r3, lr
 8009a94:	d316      	bcc.n	8009ac4 <__multiply+0x74>
 8009a96:	f104 0214 	add.w	r2, r4, #20
 8009a9a:	f108 0114 	add.w	r1, r8, #20
 8009a9e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009aa2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	9b00      	ldr	r3, [sp, #0]
 8009aaa:	9201      	str	r2, [sp, #4]
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d80c      	bhi.n	8009aca <__multiply+0x7a>
 8009ab0:	2e00      	cmp	r6, #0
 8009ab2:	dd03      	ble.n	8009abc <__multiply+0x6c>
 8009ab4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d05d      	beq.n	8009b78 <__multiply+0x128>
 8009abc:	6106      	str	r6, [r0, #16]
 8009abe:	b003      	add	sp, #12
 8009ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac4:	f843 2b04 	str.w	r2, [r3], #4
 8009ac8:	e7e3      	b.n	8009a92 <__multiply+0x42>
 8009aca:	f8b2 b000 	ldrh.w	fp, [r2]
 8009ace:	f1bb 0f00 	cmp.w	fp, #0
 8009ad2:	d023      	beq.n	8009b1c <__multiply+0xcc>
 8009ad4:	4689      	mov	r9, r1
 8009ad6:	46ac      	mov	ip, r5
 8009ad8:	f04f 0800 	mov.w	r8, #0
 8009adc:	f859 4b04 	ldr.w	r4, [r9], #4
 8009ae0:	f8dc a000 	ldr.w	sl, [ip]
 8009ae4:	b2a3      	uxth	r3, r4
 8009ae6:	fa1f fa8a 	uxth.w	sl, sl
 8009aea:	fb0b a303 	mla	r3, fp, r3, sl
 8009aee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009af2:	f8dc 4000 	ldr.w	r4, [ip]
 8009af6:	4443      	add	r3, r8
 8009af8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009afc:	fb0b 840a 	mla	r4, fp, sl, r8
 8009b00:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009b04:	46e2      	mov	sl, ip
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b0c:	454f      	cmp	r7, r9
 8009b0e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b12:	f84a 3b04 	str.w	r3, [sl], #4
 8009b16:	d82b      	bhi.n	8009b70 <__multiply+0x120>
 8009b18:	f8cc 8004 	str.w	r8, [ip, #4]
 8009b1c:	9b01      	ldr	r3, [sp, #4]
 8009b1e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009b22:	3204      	adds	r2, #4
 8009b24:	f1ba 0f00 	cmp.w	sl, #0
 8009b28:	d020      	beq.n	8009b6c <__multiply+0x11c>
 8009b2a:	682b      	ldr	r3, [r5, #0]
 8009b2c:	4689      	mov	r9, r1
 8009b2e:	46a8      	mov	r8, r5
 8009b30:	f04f 0b00 	mov.w	fp, #0
 8009b34:	f8b9 c000 	ldrh.w	ip, [r9]
 8009b38:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009b3c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009b40:	445c      	add	r4, fp
 8009b42:	46c4      	mov	ip, r8
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b4a:	f84c 3b04 	str.w	r3, [ip], #4
 8009b4e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b52:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009b56:	0c1b      	lsrs	r3, r3, #16
 8009b58:	fb0a b303 	mla	r3, sl, r3, fp
 8009b5c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009b60:	454f      	cmp	r7, r9
 8009b62:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009b66:	d805      	bhi.n	8009b74 <__multiply+0x124>
 8009b68:	f8c8 3004 	str.w	r3, [r8, #4]
 8009b6c:	3504      	adds	r5, #4
 8009b6e:	e79b      	b.n	8009aa8 <__multiply+0x58>
 8009b70:	46d4      	mov	ip, sl
 8009b72:	e7b3      	b.n	8009adc <__multiply+0x8c>
 8009b74:	46e0      	mov	r8, ip
 8009b76:	e7dd      	b.n	8009b34 <__multiply+0xe4>
 8009b78:	3e01      	subs	r6, #1
 8009b7a:	e799      	b.n	8009ab0 <__multiply+0x60>

08009b7c <__pow5mult>:
 8009b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b80:	4615      	mov	r5, r2
 8009b82:	f012 0203 	ands.w	r2, r2, #3
 8009b86:	4606      	mov	r6, r0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	d007      	beq.n	8009b9c <__pow5mult+0x20>
 8009b8c:	3a01      	subs	r2, #1
 8009b8e:	4c21      	ldr	r4, [pc, #132]	; (8009c14 <__pow5mult+0x98>)
 8009b90:	2300      	movs	r3, #0
 8009b92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b96:	f7ff fe8b 	bl	80098b0 <__multadd>
 8009b9a:	4607      	mov	r7, r0
 8009b9c:	10ad      	asrs	r5, r5, #2
 8009b9e:	d035      	beq.n	8009c0c <__pow5mult+0x90>
 8009ba0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ba2:	b93c      	cbnz	r4, 8009bb4 <__pow5mult+0x38>
 8009ba4:	2010      	movs	r0, #16
 8009ba6:	f7ff fe11 	bl	80097cc <malloc>
 8009baa:	6270      	str	r0, [r6, #36]	; 0x24
 8009bac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bb0:	6004      	str	r4, [r0, #0]
 8009bb2:	60c4      	str	r4, [r0, #12]
 8009bb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bbc:	b94c      	cbnz	r4, 8009bd2 <__pow5mult+0x56>
 8009bbe:	f240 2171 	movw	r1, #625	; 0x271
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f7ff ff3b 	bl	8009a3e <__i2b>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bce:	4604      	mov	r4, r0
 8009bd0:	6003      	str	r3, [r0, #0]
 8009bd2:	f04f 0800 	mov.w	r8, #0
 8009bd6:	07eb      	lsls	r3, r5, #31
 8009bd8:	d50a      	bpl.n	8009bf0 <__pow5mult+0x74>
 8009bda:	4639      	mov	r1, r7
 8009bdc:	4622      	mov	r2, r4
 8009bde:	4630      	mov	r0, r6
 8009be0:	f7ff ff36 	bl	8009a50 <__multiply>
 8009be4:	4639      	mov	r1, r7
 8009be6:	4681      	mov	r9, r0
 8009be8:	4630      	mov	r0, r6
 8009bea:	f7ff fe4a 	bl	8009882 <_Bfree>
 8009bee:	464f      	mov	r7, r9
 8009bf0:	106d      	asrs	r5, r5, #1
 8009bf2:	d00b      	beq.n	8009c0c <__pow5mult+0x90>
 8009bf4:	6820      	ldr	r0, [r4, #0]
 8009bf6:	b938      	cbnz	r0, 8009c08 <__pow5mult+0x8c>
 8009bf8:	4622      	mov	r2, r4
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f7ff ff27 	bl	8009a50 <__multiply>
 8009c02:	6020      	str	r0, [r4, #0]
 8009c04:	f8c0 8000 	str.w	r8, [r0]
 8009c08:	4604      	mov	r4, r0
 8009c0a:	e7e4      	b.n	8009bd6 <__pow5mult+0x5a>
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c12:	bf00      	nop
 8009c14:	0800a6a0 	.word	0x0800a6a0

08009c18 <__lshift>:
 8009c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c22:	6923      	ldr	r3, [r4, #16]
 8009c24:	6849      	ldr	r1, [r1, #4]
 8009c26:	eb0a 0903 	add.w	r9, sl, r3
 8009c2a:	68a3      	ldr	r3, [r4, #8]
 8009c2c:	4607      	mov	r7, r0
 8009c2e:	4616      	mov	r6, r2
 8009c30:	f109 0501 	add.w	r5, r9, #1
 8009c34:	42ab      	cmp	r3, r5
 8009c36:	db32      	blt.n	8009c9e <__lshift+0x86>
 8009c38:	4638      	mov	r0, r7
 8009c3a:	f7ff fdee 	bl	800981a <_Balloc>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	4680      	mov	r8, r0
 8009c42:	f100 0114 	add.w	r1, r0, #20
 8009c46:	461a      	mov	r2, r3
 8009c48:	4553      	cmp	r3, sl
 8009c4a:	db2b      	blt.n	8009ca4 <__lshift+0x8c>
 8009c4c:	6920      	ldr	r0, [r4, #16]
 8009c4e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c52:	f104 0314 	add.w	r3, r4, #20
 8009c56:	f016 021f 	ands.w	r2, r6, #31
 8009c5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c62:	d025      	beq.n	8009cb0 <__lshift+0x98>
 8009c64:	f1c2 0e20 	rsb	lr, r2, #32
 8009c68:	2000      	movs	r0, #0
 8009c6a:	681e      	ldr	r6, [r3, #0]
 8009c6c:	468a      	mov	sl, r1
 8009c6e:	4096      	lsls	r6, r2
 8009c70:	4330      	orrs	r0, r6
 8009c72:	f84a 0b04 	str.w	r0, [sl], #4
 8009c76:	f853 0b04 	ldr.w	r0, [r3], #4
 8009c7a:	459c      	cmp	ip, r3
 8009c7c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009c80:	d814      	bhi.n	8009cac <__lshift+0x94>
 8009c82:	6048      	str	r0, [r1, #4]
 8009c84:	b108      	cbz	r0, 8009c8a <__lshift+0x72>
 8009c86:	f109 0502 	add.w	r5, r9, #2
 8009c8a:	3d01      	subs	r5, #1
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009c92:	4621      	mov	r1, r4
 8009c94:	f7ff fdf5 	bl	8009882 <_Bfree>
 8009c98:	4640      	mov	r0, r8
 8009c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c9e:	3101      	adds	r1, #1
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	e7c7      	b.n	8009c34 <__lshift+0x1c>
 8009ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	e7cd      	b.n	8009c48 <__lshift+0x30>
 8009cac:	4651      	mov	r1, sl
 8009cae:	e7dc      	b.n	8009c6a <__lshift+0x52>
 8009cb0:	3904      	subs	r1, #4
 8009cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cba:	459c      	cmp	ip, r3
 8009cbc:	d8f9      	bhi.n	8009cb2 <__lshift+0x9a>
 8009cbe:	e7e4      	b.n	8009c8a <__lshift+0x72>

08009cc0 <__mcmp>:
 8009cc0:	6903      	ldr	r3, [r0, #16]
 8009cc2:	690a      	ldr	r2, [r1, #16]
 8009cc4:	1a9b      	subs	r3, r3, r2
 8009cc6:	b530      	push	{r4, r5, lr}
 8009cc8:	d10c      	bne.n	8009ce4 <__mcmp+0x24>
 8009cca:	0092      	lsls	r2, r2, #2
 8009ccc:	3014      	adds	r0, #20
 8009cce:	3114      	adds	r1, #20
 8009cd0:	1884      	adds	r4, r0, r2
 8009cd2:	4411      	add	r1, r2
 8009cd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009cd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009cdc:	4295      	cmp	r5, r2
 8009cde:	d003      	beq.n	8009ce8 <__mcmp+0x28>
 8009ce0:	d305      	bcc.n	8009cee <__mcmp+0x2e>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	bd30      	pop	{r4, r5, pc}
 8009ce8:	42a0      	cmp	r0, r4
 8009cea:	d3f3      	bcc.n	8009cd4 <__mcmp+0x14>
 8009cec:	e7fa      	b.n	8009ce4 <__mcmp+0x24>
 8009cee:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf2:	e7f7      	b.n	8009ce4 <__mcmp+0x24>

08009cf4 <__mdiff>:
 8009cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf8:	460d      	mov	r5, r1
 8009cfa:	4607      	mov	r7, r0
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	4628      	mov	r0, r5
 8009d00:	4614      	mov	r4, r2
 8009d02:	f7ff ffdd 	bl	8009cc0 <__mcmp>
 8009d06:	1e06      	subs	r6, r0, #0
 8009d08:	d108      	bne.n	8009d1c <__mdiff+0x28>
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	4638      	mov	r0, r7
 8009d0e:	f7ff fd84 	bl	800981a <_Balloc>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1c:	bfa4      	itt	ge
 8009d1e:	4623      	movge	r3, r4
 8009d20:	462c      	movge	r4, r5
 8009d22:	4638      	mov	r0, r7
 8009d24:	6861      	ldr	r1, [r4, #4]
 8009d26:	bfa6      	itte	ge
 8009d28:	461d      	movge	r5, r3
 8009d2a:	2600      	movge	r6, #0
 8009d2c:	2601      	movlt	r6, #1
 8009d2e:	f7ff fd74 	bl	800981a <_Balloc>
 8009d32:	692b      	ldr	r3, [r5, #16]
 8009d34:	60c6      	str	r6, [r0, #12]
 8009d36:	6926      	ldr	r6, [r4, #16]
 8009d38:	f105 0914 	add.w	r9, r5, #20
 8009d3c:	f104 0214 	add.w	r2, r4, #20
 8009d40:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009d44:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009d48:	f100 0514 	add.w	r5, r0, #20
 8009d4c:	f04f 0e00 	mov.w	lr, #0
 8009d50:	f852 ab04 	ldr.w	sl, [r2], #4
 8009d54:	f859 4b04 	ldr.w	r4, [r9], #4
 8009d58:	fa1e f18a 	uxtah	r1, lr, sl
 8009d5c:	b2a3      	uxth	r3, r4
 8009d5e:	1ac9      	subs	r1, r1, r3
 8009d60:	0c23      	lsrs	r3, r4, #16
 8009d62:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009d66:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009d6a:	b289      	uxth	r1, r1
 8009d6c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009d70:	45c8      	cmp	r8, r9
 8009d72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009d76:	4694      	mov	ip, r2
 8009d78:	f845 3b04 	str.w	r3, [r5], #4
 8009d7c:	d8e8      	bhi.n	8009d50 <__mdiff+0x5c>
 8009d7e:	45bc      	cmp	ip, r7
 8009d80:	d304      	bcc.n	8009d8c <__mdiff+0x98>
 8009d82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009d86:	b183      	cbz	r3, 8009daa <__mdiff+0xb6>
 8009d88:	6106      	str	r6, [r0, #16]
 8009d8a:	e7c5      	b.n	8009d18 <__mdiff+0x24>
 8009d8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d90:	fa1e f381 	uxtah	r3, lr, r1
 8009d94:	141a      	asrs	r2, r3, #16
 8009d96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009da0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009da4:	f845 3b04 	str.w	r3, [r5], #4
 8009da8:	e7e9      	b.n	8009d7e <__mdiff+0x8a>
 8009daa:	3e01      	subs	r6, #1
 8009dac:	e7e9      	b.n	8009d82 <__mdiff+0x8e>
	...

08009db0 <__ulp>:
 8009db0:	4b12      	ldr	r3, [pc, #72]	; (8009dfc <__ulp+0x4c>)
 8009db2:	ee10 2a90 	vmov	r2, s1
 8009db6:	401a      	ands	r2, r3
 8009db8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dd04      	ble.n	8009dca <__ulp+0x1a>
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	ec41 0b10 	vmov	d0, r0, r1
 8009dc8:	4770      	bx	lr
 8009dca:	425b      	negs	r3, r3
 8009dcc:	151b      	asrs	r3, r3, #20
 8009dce:	2b13      	cmp	r3, #19
 8009dd0:	f04f 0000 	mov.w	r0, #0
 8009dd4:	f04f 0100 	mov.w	r1, #0
 8009dd8:	dc04      	bgt.n	8009de4 <__ulp+0x34>
 8009dda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009dde:	fa42 f103 	asr.w	r1, r2, r3
 8009de2:	e7ef      	b.n	8009dc4 <__ulp+0x14>
 8009de4:	3b14      	subs	r3, #20
 8009de6:	2b1e      	cmp	r3, #30
 8009de8:	f04f 0201 	mov.w	r2, #1
 8009dec:	bfda      	itte	le
 8009dee:	f1c3 031f 	rsble	r3, r3, #31
 8009df2:	fa02 f303 	lslle.w	r3, r2, r3
 8009df6:	4613      	movgt	r3, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	e7e3      	b.n	8009dc4 <__ulp+0x14>
 8009dfc:	7ff00000 	.word	0x7ff00000

08009e00 <__b2d>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	6905      	ldr	r5, [r0, #16]
 8009e04:	f100 0714 	add.w	r7, r0, #20
 8009e08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009e0c:	1f2e      	subs	r6, r5, #4
 8009e0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009e12:	4620      	mov	r0, r4
 8009e14:	f7ff fdc5 	bl	80099a2 <__hi0bits>
 8009e18:	f1c0 0320 	rsb	r3, r0, #32
 8009e1c:	280a      	cmp	r0, #10
 8009e1e:	600b      	str	r3, [r1, #0]
 8009e20:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009e98 <__b2d+0x98>
 8009e24:	dc14      	bgt.n	8009e50 <__b2d+0x50>
 8009e26:	f1c0 0e0b 	rsb	lr, r0, #11
 8009e2a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009e2e:	42b7      	cmp	r7, r6
 8009e30:	ea41 030c 	orr.w	r3, r1, ip
 8009e34:	bf34      	ite	cc
 8009e36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009e3a:	2100      	movcs	r1, #0
 8009e3c:	3015      	adds	r0, #21
 8009e3e:	fa04 f000 	lsl.w	r0, r4, r0
 8009e42:	fa21 f10e 	lsr.w	r1, r1, lr
 8009e46:	ea40 0201 	orr.w	r2, r0, r1
 8009e4a:	ec43 2b10 	vmov	d0, r2, r3
 8009e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e50:	42b7      	cmp	r7, r6
 8009e52:	bf3a      	itte	cc
 8009e54:	f1a5 0608 	subcc.w	r6, r5, #8
 8009e58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009e5c:	2100      	movcs	r1, #0
 8009e5e:	380b      	subs	r0, #11
 8009e60:	d015      	beq.n	8009e8e <__b2d+0x8e>
 8009e62:	4084      	lsls	r4, r0
 8009e64:	f1c0 0520 	rsb	r5, r0, #32
 8009e68:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009e6c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009e70:	42be      	cmp	r6, r7
 8009e72:	fa21 fc05 	lsr.w	ip, r1, r5
 8009e76:	ea44 030c 	orr.w	r3, r4, ip
 8009e7a:	bf8c      	ite	hi
 8009e7c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009e80:	2400      	movls	r4, #0
 8009e82:	fa01 f000 	lsl.w	r0, r1, r0
 8009e86:	40ec      	lsrs	r4, r5
 8009e88:	ea40 0204 	orr.w	r2, r0, r4
 8009e8c:	e7dd      	b.n	8009e4a <__b2d+0x4a>
 8009e8e:	ea44 030c 	orr.w	r3, r4, ip
 8009e92:	460a      	mov	r2, r1
 8009e94:	e7d9      	b.n	8009e4a <__b2d+0x4a>
 8009e96:	bf00      	nop
 8009e98:	3ff00000 	.word	0x3ff00000

08009e9c <__d2b>:
 8009e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ea0:	460e      	mov	r6, r1
 8009ea2:	2101      	movs	r1, #1
 8009ea4:	ec59 8b10 	vmov	r8, r9, d0
 8009ea8:	4615      	mov	r5, r2
 8009eaa:	f7ff fcb6 	bl	800981a <_Balloc>
 8009eae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009eb2:	4607      	mov	r7, r0
 8009eb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009eb8:	bb34      	cbnz	r4, 8009f08 <__d2b+0x6c>
 8009eba:	9301      	str	r3, [sp, #4]
 8009ebc:	f1b8 0300 	subs.w	r3, r8, #0
 8009ec0:	d027      	beq.n	8009f12 <__d2b+0x76>
 8009ec2:	a802      	add	r0, sp, #8
 8009ec4:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009ec8:	f7ff fd8a 	bl	80099e0 <__lo0bits>
 8009ecc:	9900      	ldr	r1, [sp, #0]
 8009ece:	b1f0      	cbz	r0, 8009f0e <__d2b+0x72>
 8009ed0:	9a01      	ldr	r2, [sp, #4]
 8009ed2:	f1c0 0320 	rsb	r3, r0, #32
 8009ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eda:	430b      	orrs	r3, r1
 8009edc:	40c2      	lsrs	r2, r0
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	9201      	str	r2, [sp, #4]
 8009ee2:	9b01      	ldr	r3, [sp, #4]
 8009ee4:	61bb      	str	r3, [r7, #24]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	bf14      	ite	ne
 8009eea:	2102      	movne	r1, #2
 8009eec:	2101      	moveq	r1, #1
 8009eee:	6139      	str	r1, [r7, #16]
 8009ef0:	b1c4      	cbz	r4, 8009f24 <__d2b+0x88>
 8009ef2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009ef6:	4404      	add	r4, r0
 8009ef8:	6034      	str	r4, [r6, #0]
 8009efa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009efe:	6028      	str	r0, [r5, #0]
 8009f00:	4638      	mov	r0, r7
 8009f02:	b003      	add	sp, #12
 8009f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f0c:	e7d5      	b.n	8009eba <__d2b+0x1e>
 8009f0e:	6179      	str	r1, [r7, #20]
 8009f10:	e7e7      	b.n	8009ee2 <__d2b+0x46>
 8009f12:	a801      	add	r0, sp, #4
 8009f14:	f7ff fd64 	bl	80099e0 <__lo0bits>
 8009f18:	9b01      	ldr	r3, [sp, #4]
 8009f1a:	617b      	str	r3, [r7, #20]
 8009f1c:	2101      	movs	r1, #1
 8009f1e:	6139      	str	r1, [r7, #16]
 8009f20:	3020      	adds	r0, #32
 8009f22:	e7e5      	b.n	8009ef0 <__d2b+0x54>
 8009f24:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009f28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f2c:	6030      	str	r0, [r6, #0]
 8009f2e:	6918      	ldr	r0, [r3, #16]
 8009f30:	f7ff fd37 	bl	80099a2 <__hi0bits>
 8009f34:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009f38:	e7e1      	b.n	8009efe <__d2b+0x62>

08009f3a <__ratio>:
 8009f3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3e:	4688      	mov	r8, r1
 8009f40:	4669      	mov	r1, sp
 8009f42:	4681      	mov	r9, r0
 8009f44:	f7ff ff5c 	bl	8009e00 <__b2d>
 8009f48:	a901      	add	r1, sp, #4
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	ec57 6b10 	vmov	r6, r7, d0
 8009f50:	f7ff ff56 	bl	8009e00 <__b2d>
 8009f54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f58:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009f5c:	eba3 0c02 	sub.w	ip, r3, r2
 8009f60:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f64:	1a9b      	subs	r3, r3, r2
 8009f66:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009f6a:	ec5b ab10 	vmov	sl, fp, d0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	bfce      	itee	gt
 8009f72:	463a      	movgt	r2, r7
 8009f74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009f78:	465a      	movle	r2, fp
 8009f7a:	4659      	mov	r1, fp
 8009f7c:	463d      	mov	r5, r7
 8009f7e:	bfd4      	ite	le
 8009f80:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009f84:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009f88:	4630      	mov	r0, r6
 8009f8a:	ee10 2a10 	vmov	r2, s0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4629      	mov	r1, r5
 8009f92:	f7f6 fc8b 	bl	80008ac <__aeabi_ddiv>
 8009f96:	ec41 0b10 	vmov	d0, r0, r1
 8009f9a:	b003      	add	sp, #12
 8009f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fa0 <__copybits>:
 8009fa0:	3901      	subs	r1, #1
 8009fa2:	b510      	push	{r4, lr}
 8009fa4:	1149      	asrs	r1, r1, #5
 8009fa6:	6914      	ldr	r4, [r2, #16]
 8009fa8:	3101      	adds	r1, #1
 8009faa:	f102 0314 	add.w	r3, r2, #20
 8009fae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009fb2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009fb6:	42a3      	cmp	r3, r4
 8009fb8:	4602      	mov	r2, r0
 8009fba:	d303      	bcc.n	8009fc4 <__copybits+0x24>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	428a      	cmp	r2, r1
 8009fc0:	d305      	bcc.n	8009fce <__copybits+0x2e>
 8009fc2:	bd10      	pop	{r4, pc}
 8009fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fc8:	f840 2b04 	str.w	r2, [r0], #4
 8009fcc:	e7f3      	b.n	8009fb6 <__copybits+0x16>
 8009fce:	f842 3b04 	str.w	r3, [r2], #4
 8009fd2:	e7f4      	b.n	8009fbe <__copybits+0x1e>

08009fd4 <__any_on>:
 8009fd4:	f100 0214 	add.w	r2, r0, #20
 8009fd8:	6900      	ldr	r0, [r0, #16]
 8009fda:	114b      	asrs	r3, r1, #5
 8009fdc:	4298      	cmp	r0, r3
 8009fde:	b510      	push	{r4, lr}
 8009fe0:	db11      	blt.n	800a006 <__any_on+0x32>
 8009fe2:	dd0a      	ble.n	8009ffa <__any_on+0x26>
 8009fe4:	f011 011f 	ands.w	r1, r1, #31
 8009fe8:	d007      	beq.n	8009ffa <__any_on+0x26>
 8009fea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009fee:	fa24 f001 	lsr.w	r0, r4, r1
 8009ff2:	fa00 f101 	lsl.w	r1, r0, r1
 8009ff6:	428c      	cmp	r4, r1
 8009ff8:	d10b      	bne.n	800a012 <__any_on+0x3e>
 8009ffa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d803      	bhi.n	800a00a <__any_on+0x36>
 800a002:	2000      	movs	r0, #0
 800a004:	bd10      	pop	{r4, pc}
 800a006:	4603      	mov	r3, r0
 800a008:	e7f7      	b.n	8009ffa <__any_on+0x26>
 800a00a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a00e:	2900      	cmp	r1, #0
 800a010:	d0f5      	beq.n	8009ffe <__any_on+0x2a>
 800a012:	2001      	movs	r0, #1
 800a014:	e7f6      	b.n	800a004 <__any_on+0x30>
	...

0800a018 <_free_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4605      	mov	r5, r0
 800a01c:	2900      	cmp	r1, #0
 800a01e:	d045      	beq.n	800a0ac <_free_r+0x94>
 800a020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a024:	1f0c      	subs	r4, r1, #4
 800a026:	2b00      	cmp	r3, #0
 800a028:	bfb8      	it	lt
 800a02a:	18e4      	addlt	r4, r4, r3
 800a02c:	f7ff fbf3 	bl	8009816 <__malloc_lock>
 800a030:	4a1f      	ldr	r2, [pc, #124]	; (800a0b0 <_free_r+0x98>)
 800a032:	6813      	ldr	r3, [r2, #0]
 800a034:	4610      	mov	r0, r2
 800a036:	b933      	cbnz	r3, 800a046 <_free_r+0x2e>
 800a038:	6063      	str	r3, [r4, #4]
 800a03a:	6014      	str	r4, [r2, #0]
 800a03c:	4628      	mov	r0, r5
 800a03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a042:	f7ff bbe9 	b.w	8009818 <__malloc_unlock>
 800a046:	42a3      	cmp	r3, r4
 800a048:	d90c      	bls.n	800a064 <_free_r+0x4c>
 800a04a:	6821      	ldr	r1, [r4, #0]
 800a04c:	1862      	adds	r2, r4, r1
 800a04e:	4293      	cmp	r3, r2
 800a050:	bf04      	itt	eq
 800a052:	681a      	ldreq	r2, [r3, #0]
 800a054:	685b      	ldreq	r3, [r3, #4]
 800a056:	6063      	str	r3, [r4, #4]
 800a058:	bf04      	itt	eq
 800a05a:	1852      	addeq	r2, r2, r1
 800a05c:	6022      	streq	r2, [r4, #0]
 800a05e:	6004      	str	r4, [r0, #0]
 800a060:	e7ec      	b.n	800a03c <_free_r+0x24>
 800a062:	4613      	mov	r3, r2
 800a064:	685a      	ldr	r2, [r3, #4]
 800a066:	b10a      	cbz	r2, 800a06c <_free_r+0x54>
 800a068:	42a2      	cmp	r2, r4
 800a06a:	d9fa      	bls.n	800a062 <_free_r+0x4a>
 800a06c:	6819      	ldr	r1, [r3, #0]
 800a06e:	1858      	adds	r0, r3, r1
 800a070:	42a0      	cmp	r0, r4
 800a072:	d10b      	bne.n	800a08c <_free_r+0x74>
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	4401      	add	r1, r0
 800a078:	1858      	adds	r0, r3, r1
 800a07a:	4282      	cmp	r2, r0
 800a07c:	6019      	str	r1, [r3, #0]
 800a07e:	d1dd      	bne.n	800a03c <_free_r+0x24>
 800a080:	6810      	ldr	r0, [r2, #0]
 800a082:	6852      	ldr	r2, [r2, #4]
 800a084:	605a      	str	r2, [r3, #4]
 800a086:	4401      	add	r1, r0
 800a088:	6019      	str	r1, [r3, #0]
 800a08a:	e7d7      	b.n	800a03c <_free_r+0x24>
 800a08c:	d902      	bls.n	800a094 <_free_r+0x7c>
 800a08e:	230c      	movs	r3, #12
 800a090:	602b      	str	r3, [r5, #0]
 800a092:	e7d3      	b.n	800a03c <_free_r+0x24>
 800a094:	6820      	ldr	r0, [r4, #0]
 800a096:	1821      	adds	r1, r4, r0
 800a098:	428a      	cmp	r2, r1
 800a09a:	bf04      	itt	eq
 800a09c:	6811      	ldreq	r1, [r2, #0]
 800a09e:	6852      	ldreq	r2, [r2, #4]
 800a0a0:	6062      	str	r2, [r4, #4]
 800a0a2:	bf04      	itt	eq
 800a0a4:	1809      	addeq	r1, r1, r0
 800a0a6:	6021      	streq	r1, [r4, #0]
 800a0a8:	605c      	str	r4, [r3, #4]
 800a0aa:	e7c7      	b.n	800a03c <_free_r+0x24>
 800a0ac:	bd38      	pop	{r3, r4, r5, pc}
 800a0ae:	bf00      	nop
 800a0b0:	200002e4 	.word	0x200002e4

0800a0b4 <__ssputs_r>:
 800a0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b8:	688e      	ldr	r6, [r1, #8]
 800a0ba:	429e      	cmp	r6, r3
 800a0bc:	4682      	mov	sl, r0
 800a0be:	460c      	mov	r4, r1
 800a0c0:	4690      	mov	r8, r2
 800a0c2:	4699      	mov	r9, r3
 800a0c4:	d837      	bhi.n	800a136 <__ssputs_r+0x82>
 800a0c6:	898a      	ldrh	r2, [r1, #12]
 800a0c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0cc:	d031      	beq.n	800a132 <__ssputs_r+0x7e>
 800a0ce:	6825      	ldr	r5, [r4, #0]
 800a0d0:	6909      	ldr	r1, [r1, #16]
 800a0d2:	1a6f      	subs	r7, r5, r1
 800a0d4:	6965      	ldr	r5, [r4, #20]
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0dc:	fb95 f5f3 	sdiv	r5, r5, r3
 800a0e0:	f109 0301 	add.w	r3, r9, #1
 800a0e4:	443b      	add	r3, r7
 800a0e6:	429d      	cmp	r5, r3
 800a0e8:	bf38      	it	cc
 800a0ea:	461d      	movcc	r5, r3
 800a0ec:	0553      	lsls	r3, r2, #21
 800a0ee:	d530      	bpl.n	800a152 <__ssputs_r+0x9e>
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7fc fdfb 	bl	8006cec <_malloc_r>
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	b950      	cbnz	r0, 800a110 <__ssputs_r+0x5c>
 800a0fa:	230c      	movs	r3, #12
 800a0fc:	f8ca 3000 	str.w	r3, [sl]
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a110:	463a      	mov	r2, r7
 800a112:	6921      	ldr	r1, [r4, #16]
 800a114:	f7ff fb74 	bl	8009800 <memcpy>
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a11e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a122:	81a3      	strh	r3, [r4, #12]
 800a124:	6126      	str	r6, [r4, #16]
 800a126:	6165      	str	r5, [r4, #20]
 800a128:	443e      	add	r6, r7
 800a12a:	1bed      	subs	r5, r5, r7
 800a12c:	6026      	str	r6, [r4, #0]
 800a12e:	60a5      	str	r5, [r4, #8]
 800a130:	464e      	mov	r6, r9
 800a132:	454e      	cmp	r6, r9
 800a134:	d900      	bls.n	800a138 <__ssputs_r+0x84>
 800a136:	464e      	mov	r6, r9
 800a138:	4632      	mov	r2, r6
 800a13a:	4641      	mov	r1, r8
 800a13c:	6820      	ldr	r0, [r4, #0]
 800a13e:	f000 f92a 	bl	800a396 <memmove>
 800a142:	68a3      	ldr	r3, [r4, #8]
 800a144:	1b9b      	subs	r3, r3, r6
 800a146:	60a3      	str	r3, [r4, #8]
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	441e      	add	r6, r3
 800a14c:	6026      	str	r6, [r4, #0]
 800a14e:	2000      	movs	r0, #0
 800a150:	e7dc      	b.n	800a10c <__ssputs_r+0x58>
 800a152:	462a      	mov	r2, r5
 800a154:	f000 f938 	bl	800a3c8 <_realloc_r>
 800a158:	4606      	mov	r6, r0
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d1e2      	bne.n	800a124 <__ssputs_r+0x70>
 800a15e:	6921      	ldr	r1, [r4, #16]
 800a160:	4650      	mov	r0, sl
 800a162:	f7ff ff59 	bl	800a018 <_free_r>
 800a166:	e7c8      	b.n	800a0fa <__ssputs_r+0x46>

0800a168 <_svfiprintf_r>:
 800a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16c:	461d      	mov	r5, r3
 800a16e:	898b      	ldrh	r3, [r1, #12]
 800a170:	061f      	lsls	r7, r3, #24
 800a172:	b09d      	sub	sp, #116	; 0x74
 800a174:	4680      	mov	r8, r0
 800a176:	460c      	mov	r4, r1
 800a178:	4616      	mov	r6, r2
 800a17a:	d50f      	bpl.n	800a19c <_svfiprintf_r+0x34>
 800a17c:	690b      	ldr	r3, [r1, #16]
 800a17e:	b96b      	cbnz	r3, 800a19c <_svfiprintf_r+0x34>
 800a180:	2140      	movs	r1, #64	; 0x40
 800a182:	f7fc fdb3 	bl	8006cec <_malloc_r>
 800a186:	6020      	str	r0, [r4, #0]
 800a188:	6120      	str	r0, [r4, #16]
 800a18a:	b928      	cbnz	r0, 800a198 <_svfiprintf_r+0x30>
 800a18c:	230c      	movs	r3, #12
 800a18e:	f8c8 3000 	str.w	r3, [r8]
 800a192:	f04f 30ff 	mov.w	r0, #4294967295
 800a196:	e0c8      	b.n	800a32a <_svfiprintf_r+0x1c2>
 800a198:	2340      	movs	r3, #64	; 0x40
 800a19a:	6163      	str	r3, [r4, #20]
 800a19c:	2300      	movs	r3, #0
 800a19e:	9309      	str	r3, [sp, #36]	; 0x24
 800a1a0:	2320      	movs	r3, #32
 800a1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1a6:	2330      	movs	r3, #48	; 0x30
 800a1a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1ac:	9503      	str	r5, [sp, #12]
 800a1ae:	f04f 0b01 	mov.w	fp, #1
 800a1b2:	4637      	mov	r7, r6
 800a1b4:	463d      	mov	r5, r7
 800a1b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a1ba:	b10b      	cbz	r3, 800a1c0 <_svfiprintf_r+0x58>
 800a1bc:	2b25      	cmp	r3, #37	; 0x25
 800a1be:	d13e      	bne.n	800a23e <_svfiprintf_r+0xd6>
 800a1c0:	ebb7 0a06 	subs.w	sl, r7, r6
 800a1c4:	d00b      	beq.n	800a1de <_svfiprintf_r+0x76>
 800a1c6:	4653      	mov	r3, sl
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	f7ff ff71 	bl	800a0b4 <__ssputs_r>
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	f000 80a4 	beq.w	800a320 <_svfiprintf_r+0x1b8>
 800a1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1da:	4453      	add	r3, sl
 800a1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1de:	783b      	ldrb	r3, [r7, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 809d 	beq.w	800a320 <_svfiprintf_r+0x1b8>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1f0:	9304      	str	r3, [sp, #16]
 800a1f2:	9307      	str	r3, [sp, #28]
 800a1f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1f8:	931a      	str	r3, [sp, #104]	; 0x68
 800a1fa:	462f      	mov	r7, r5
 800a1fc:	2205      	movs	r2, #5
 800a1fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a202:	4850      	ldr	r0, [pc, #320]	; (800a344 <_svfiprintf_r+0x1dc>)
 800a204:	f7f6 f81c 	bl	8000240 <memchr>
 800a208:	9b04      	ldr	r3, [sp, #16]
 800a20a:	b9d0      	cbnz	r0, 800a242 <_svfiprintf_r+0xda>
 800a20c:	06d9      	lsls	r1, r3, #27
 800a20e:	bf44      	itt	mi
 800a210:	2220      	movmi	r2, #32
 800a212:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a216:	071a      	lsls	r2, r3, #28
 800a218:	bf44      	itt	mi
 800a21a:	222b      	movmi	r2, #43	; 0x2b
 800a21c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a220:	782a      	ldrb	r2, [r5, #0]
 800a222:	2a2a      	cmp	r2, #42	; 0x2a
 800a224:	d015      	beq.n	800a252 <_svfiprintf_r+0xea>
 800a226:	9a07      	ldr	r2, [sp, #28]
 800a228:	462f      	mov	r7, r5
 800a22a:	2000      	movs	r0, #0
 800a22c:	250a      	movs	r5, #10
 800a22e:	4639      	mov	r1, r7
 800a230:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a234:	3b30      	subs	r3, #48	; 0x30
 800a236:	2b09      	cmp	r3, #9
 800a238:	d94d      	bls.n	800a2d6 <_svfiprintf_r+0x16e>
 800a23a:	b1b8      	cbz	r0, 800a26c <_svfiprintf_r+0x104>
 800a23c:	e00f      	b.n	800a25e <_svfiprintf_r+0xf6>
 800a23e:	462f      	mov	r7, r5
 800a240:	e7b8      	b.n	800a1b4 <_svfiprintf_r+0x4c>
 800a242:	4a40      	ldr	r2, [pc, #256]	; (800a344 <_svfiprintf_r+0x1dc>)
 800a244:	1a80      	subs	r0, r0, r2
 800a246:	fa0b f000 	lsl.w	r0, fp, r0
 800a24a:	4318      	orrs	r0, r3
 800a24c:	9004      	str	r0, [sp, #16]
 800a24e:	463d      	mov	r5, r7
 800a250:	e7d3      	b.n	800a1fa <_svfiprintf_r+0x92>
 800a252:	9a03      	ldr	r2, [sp, #12]
 800a254:	1d11      	adds	r1, r2, #4
 800a256:	6812      	ldr	r2, [r2, #0]
 800a258:	9103      	str	r1, [sp, #12]
 800a25a:	2a00      	cmp	r2, #0
 800a25c:	db01      	blt.n	800a262 <_svfiprintf_r+0xfa>
 800a25e:	9207      	str	r2, [sp, #28]
 800a260:	e004      	b.n	800a26c <_svfiprintf_r+0x104>
 800a262:	4252      	negs	r2, r2
 800a264:	f043 0302 	orr.w	r3, r3, #2
 800a268:	9207      	str	r2, [sp, #28]
 800a26a:	9304      	str	r3, [sp, #16]
 800a26c:	783b      	ldrb	r3, [r7, #0]
 800a26e:	2b2e      	cmp	r3, #46	; 0x2e
 800a270:	d10c      	bne.n	800a28c <_svfiprintf_r+0x124>
 800a272:	787b      	ldrb	r3, [r7, #1]
 800a274:	2b2a      	cmp	r3, #42	; 0x2a
 800a276:	d133      	bne.n	800a2e0 <_svfiprintf_r+0x178>
 800a278:	9b03      	ldr	r3, [sp, #12]
 800a27a:	1d1a      	adds	r2, r3, #4
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	9203      	str	r2, [sp, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	bfb8      	it	lt
 800a284:	f04f 33ff 	movlt.w	r3, #4294967295
 800a288:	3702      	adds	r7, #2
 800a28a:	9305      	str	r3, [sp, #20]
 800a28c:	4d2e      	ldr	r5, [pc, #184]	; (800a348 <_svfiprintf_r+0x1e0>)
 800a28e:	7839      	ldrb	r1, [r7, #0]
 800a290:	2203      	movs	r2, #3
 800a292:	4628      	mov	r0, r5
 800a294:	f7f5 ffd4 	bl	8000240 <memchr>
 800a298:	b138      	cbz	r0, 800a2aa <_svfiprintf_r+0x142>
 800a29a:	2340      	movs	r3, #64	; 0x40
 800a29c:	1b40      	subs	r0, r0, r5
 800a29e:	fa03 f000 	lsl.w	r0, r3, r0
 800a2a2:	9b04      	ldr	r3, [sp, #16]
 800a2a4:	4303      	orrs	r3, r0
 800a2a6:	3701      	adds	r7, #1
 800a2a8:	9304      	str	r3, [sp, #16]
 800a2aa:	7839      	ldrb	r1, [r7, #0]
 800a2ac:	4827      	ldr	r0, [pc, #156]	; (800a34c <_svfiprintf_r+0x1e4>)
 800a2ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2b2:	2206      	movs	r2, #6
 800a2b4:	1c7e      	adds	r6, r7, #1
 800a2b6:	f7f5 ffc3 	bl	8000240 <memchr>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d038      	beq.n	800a330 <_svfiprintf_r+0x1c8>
 800a2be:	4b24      	ldr	r3, [pc, #144]	; (800a350 <_svfiprintf_r+0x1e8>)
 800a2c0:	bb13      	cbnz	r3, 800a308 <_svfiprintf_r+0x1a0>
 800a2c2:	9b03      	ldr	r3, [sp, #12]
 800a2c4:	3307      	adds	r3, #7
 800a2c6:	f023 0307 	bic.w	r3, r3, #7
 800a2ca:	3308      	adds	r3, #8
 800a2cc:	9303      	str	r3, [sp, #12]
 800a2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d0:	444b      	add	r3, r9
 800a2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d4:	e76d      	b.n	800a1b2 <_svfiprintf_r+0x4a>
 800a2d6:	fb05 3202 	mla	r2, r5, r2, r3
 800a2da:	2001      	movs	r0, #1
 800a2dc:	460f      	mov	r7, r1
 800a2de:	e7a6      	b.n	800a22e <_svfiprintf_r+0xc6>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	3701      	adds	r7, #1
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	250a      	movs	r5, #10
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2f0:	3a30      	subs	r2, #48	; 0x30
 800a2f2:	2a09      	cmp	r2, #9
 800a2f4:	d903      	bls.n	800a2fe <_svfiprintf_r+0x196>
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d0c8      	beq.n	800a28c <_svfiprintf_r+0x124>
 800a2fa:	9105      	str	r1, [sp, #20]
 800a2fc:	e7c6      	b.n	800a28c <_svfiprintf_r+0x124>
 800a2fe:	fb05 2101 	mla	r1, r5, r1, r2
 800a302:	2301      	movs	r3, #1
 800a304:	4607      	mov	r7, r0
 800a306:	e7f0      	b.n	800a2ea <_svfiprintf_r+0x182>
 800a308:	ab03      	add	r3, sp, #12
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	4622      	mov	r2, r4
 800a30e:	4b11      	ldr	r3, [pc, #68]	; (800a354 <_svfiprintf_r+0x1ec>)
 800a310:	a904      	add	r1, sp, #16
 800a312:	4640      	mov	r0, r8
 800a314:	f7fc fdd8 	bl	8006ec8 <_printf_float>
 800a318:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a31c:	4681      	mov	r9, r0
 800a31e:	d1d6      	bne.n	800a2ce <_svfiprintf_r+0x166>
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	065b      	lsls	r3, r3, #25
 800a324:	f53f af35 	bmi.w	800a192 <_svfiprintf_r+0x2a>
 800a328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a32a:	b01d      	add	sp, #116	; 0x74
 800a32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a330:	ab03      	add	r3, sp, #12
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	4622      	mov	r2, r4
 800a336:	4b07      	ldr	r3, [pc, #28]	; (800a354 <_svfiprintf_r+0x1ec>)
 800a338:	a904      	add	r1, sp, #16
 800a33a:	4640      	mov	r0, r8
 800a33c:	f7fd f87a 	bl	8007434 <_printf_i>
 800a340:	e7ea      	b.n	800a318 <_svfiprintf_r+0x1b0>
 800a342:	bf00      	nop
 800a344:	0800a6ac 	.word	0x0800a6ac
 800a348:	0800a6b2 	.word	0x0800a6b2
 800a34c:	0800a6b6 	.word	0x0800a6b6
 800a350:	08006ec9 	.word	0x08006ec9
 800a354:	0800a0b5 	.word	0x0800a0b5

0800a358 <strncmp>:
 800a358:	b510      	push	{r4, lr}
 800a35a:	b16a      	cbz	r2, 800a378 <strncmp+0x20>
 800a35c:	3901      	subs	r1, #1
 800a35e:	1884      	adds	r4, r0, r2
 800a360:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a364:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a368:	4293      	cmp	r3, r2
 800a36a:	d103      	bne.n	800a374 <strncmp+0x1c>
 800a36c:	42a0      	cmp	r0, r4
 800a36e:	d001      	beq.n	800a374 <strncmp+0x1c>
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1f5      	bne.n	800a360 <strncmp+0x8>
 800a374:	1a98      	subs	r0, r3, r2
 800a376:	bd10      	pop	{r4, pc}
 800a378:	4610      	mov	r0, r2
 800a37a:	e7fc      	b.n	800a376 <strncmp+0x1e>

0800a37c <__ascii_wctomb>:
 800a37c:	b149      	cbz	r1, 800a392 <__ascii_wctomb+0x16>
 800a37e:	2aff      	cmp	r2, #255	; 0xff
 800a380:	bf85      	ittet	hi
 800a382:	238a      	movhi	r3, #138	; 0x8a
 800a384:	6003      	strhi	r3, [r0, #0]
 800a386:	700a      	strbls	r2, [r1, #0]
 800a388:	f04f 30ff 	movhi.w	r0, #4294967295
 800a38c:	bf98      	it	ls
 800a38e:	2001      	movls	r0, #1
 800a390:	4770      	bx	lr
 800a392:	4608      	mov	r0, r1
 800a394:	4770      	bx	lr

0800a396 <memmove>:
 800a396:	4288      	cmp	r0, r1
 800a398:	b510      	push	{r4, lr}
 800a39a:	eb01 0302 	add.w	r3, r1, r2
 800a39e:	d807      	bhi.n	800a3b0 <memmove+0x1a>
 800a3a0:	1e42      	subs	r2, r0, #1
 800a3a2:	4299      	cmp	r1, r3
 800a3a4:	d00a      	beq.n	800a3bc <memmove+0x26>
 800a3a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a3ae:	e7f8      	b.n	800a3a2 <memmove+0xc>
 800a3b0:	4283      	cmp	r3, r0
 800a3b2:	d9f5      	bls.n	800a3a0 <memmove+0xa>
 800a3b4:	1881      	adds	r1, r0, r2
 800a3b6:	1ad2      	subs	r2, r2, r3
 800a3b8:	42d3      	cmn	r3, r2
 800a3ba:	d100      	bne.n	800a3be <memmove+0x28>
 800a3bc:	bd10      	pop	{r4, pc}
 800a3be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a3c6:	e7f7      	b.n	800a3b8 <memmove+0x22>

0800a3c8 <_realloc_r>:
 800a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ca:	4607      	mov	r7, r0
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	460e      	mov	r6, r1
 800a3d0:	b921      	cbnz	r1, 800a3dc <_realloc_r+0x14>
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3d8:	f7fc bc88 	b.w	8006cec <_malloc_r>
 800a3dc:	b922      	cbnz	r2, 800a3e8 <_realloc_r+0x20>
 800a3de:	f7ff fe1b 	bl	800a018 <_free_r>
 800a3e2:	4625      	mov	r5, r4
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3e8:	f000 f814 	bl	800a414 <_malloc_usable_size_r>
 800a3ec:	42a0      	cmp	r0, r4
 800a3ee:	d20f      	bcs.n	800a410 <_realloc_r+0x48>
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	f7fc fc7a 	bl	8006cec <_malloc_r>
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d0f2      	beq.n	800a3e4 <_realloc_r+0x1c>
 800a3fe:	4631      	mov	r1, r6
 800a400:	4622      	mov	r2, r4
 800a402:	f7ff f9fd 	bl	8009800 <memcpy>
 800a406:	4631      	mov	r1, r6
 800a408:	4638      	mov	r0, r7
 800a40a:	f7ff fe05 	bl	800a018 <_free_r>
 800a40e:	e7e9      	b.n	800a3e4 <_realloc_r+0x1c>
 800a410:	4635      	mov	r5, r6
 800a412:	e7e7      	b.n	800a3e4 <_realloc_r+0x1c>

0800a414 <_malloc_usable_size_r>:
 800a414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a418:	1f18      	subs	r0, r3, #4
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	bfbc      	itt	lt
 800a41e:	580b      	ldrlt	r3, [r1, r0]
 800a420:	18c0      	addlt	r0, r0, r3
 800a422:	4770      	bx	lr

0800a424 <_init>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	bf00      	nop
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr

0800a430 <_fini>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	bf00      	nop
 800a434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a436:	bc08      	pop	{r3}
 800a438:	469e      	mov	lr, r3
 800a43a:	4770      	bx	lr
